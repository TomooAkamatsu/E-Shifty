{"ast":null,"code":"import * as React from \"react\";\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\";\n/**\n * React hook to persist any value between renders,\n * but keeps it up-to-date if it changes.\n *\n * @param value the value or function to persist\n */\n\nexport function useCallbackRef(fn) {\n  var ref = React.useRef(fn);\n  useSafeLayoutEffect(() => {\n    ref.current = fn;\n  }); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  return React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return ref.current == null ? void 0 : ref.current(...args);\n  }, []);\n}","map":{"version":3,"sources":["../../src/use-callback-ref.ts"],"names":["ref","React","useSafeLayoutEffect","args"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,mBAAA,QAAA,0BAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,cAAA,CAAA,EAAA,EAEF;EACH,IAAMA,GAAG,GAAGC,KAAK,CAALA,MAAAA,CAAZ,EAAYA,CAAZ;EAEAC,mBAAmB,CAAC,MAAM;IACxBF,GAAG,CAAHA,OAAAA,GAAAA,EAAAA;EAJC,CAGgB,CAAnBE,CAHG,CAOH;;EACA,OAAO,KAAK,CAAL,WAAA,CAAmB,YAAA;IAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAIC,IAAJ,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;MAAIA,IAAJ,CAAA,IAAA,CAAIA,GAAJ,SAAA,CAAA,IAAA,CAAIA;IAAJ;;IAAA,OAAaH,GAAG,CAAhB,OAAaA,IAAb,IAAaA,GAAb,KAAA,CAAaA,GAAAA,GAAG,CAAHA,OAAAA,CAAc,GAA3B,IAAaA,CAAb;EAAnB,CAAA,EAAP,EAAO,CAAP;AACD","sourcesContent":["import * as React from \"react\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * React hook to persist any value between renders,\n * but keeps it up-to-date if it changes.\n *\n * @param value the value or function to persist\n */\nexport function useCallbackRef<T extends (...args: any[]) => any>(\n  fn: T | undefined,\n): T {\n  const ref = React.useRef(fn)\n\n  useSafeLayoutEffect(() => {\n    ref.current = fn\n  })\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(((...args) => ref.current?.(...args)) as T, [])\n}\n"]},"metadata":{},"sourceType":"module"}