{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\";\nimport { useControllableState, useId } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, createContext, mergeRefs } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar [PinInputProvider, usePinInputContext] = createContext({\n  name: \"PinInputContext\",\n  errorMessage: \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\"\n});\nexport { PinInputProvider, usePinInputContext };\n\nvar toArray = value => value == null ? void 0 : value.split(\"\");\n\nfunction validate(value, type) {\n  var NUMERIC_REGEX = /^[0-9]+$/;\n  var ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;\n  var regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;\n  return regex.test(value);\n}\n\nexport function usePinInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange: _onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask\n  } = props;\n  var uuid = useId();\n  var id = idProp != null ? idProp : \"pin-input-\" + uuid;\n  var domContext = useDescendants();\n  var {\n    descendants\n  } = domContext;\n  var [moveFocus, setMoveFocus] = React.useState(true);\n  var [values, setValues] = useControllableState({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: values => _onChange == null ? void 0 : _onChange(values.join(\"\"))\n  });\n  React.useEffect(() => {\n    if (autoFocus) {\n      var _firstInput$element;\n\n      var firstInput = descendants[0];\n      firstInput == null ? void 0 : (_firstInput$element = firstInput.element) == null ? void 0 : _firstInput$element.focus();\n    } // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n\n  }, [descendants]);\n  var focusNext = React.useCallback(index => {\n    var _nextInput$element;\n\n    if (!moveFocus || !manageFocus) return;\n    var nextInput = descendants[index + 1];\n    nextInput == null ? void 0 : (_nextInput$element = nextInput.element) == null ? void 0 : _nextInput$element.focus();\n  }, [descendants, moveFocus, manageFocus]);\n  var setValue = React.useCallback((value, index) => {\n    var nextValues = [...values];\n    nextValues[index] = value;\n    setValues(nextValues);\n    var isComplete = value !== \"\" && index === descendants.length - 1 && values.every(inputValue => inputValue !== \"\");\n\n    if (isComplete) {\n      onComplete == null ? void 0 : onComplete(nextValues.join(\"\"));\n    } else {\n      focusNext(index);\n    }\n  }, [values, setValues, focusNext, onComplete, descendants.length]);\n  var clear = React.useCallback(() => {\n    var _firstInput$element2;\n\n    var values = Array(descendants.length).fill(\"\");\n    setValues(values);\n    var firstInput = descendants[0];\n    (_firstInput$element2 = firstInput.element) == null ? void 0 : _firstInput$element2.focus();\n  }, [descendants, setValues]);\n  var getNextValue = React.useCallback((value, eventValue) => {\n    var nextValue = eventValue;\n\n    if ((value == null ? void 0 : value.length) > 0) {\n      if (value[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1);\n      } else if (value[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0);\n      }\n    }\n\n    return nextValue;\n  }, []);\n  var [focusedIndex, setFocusedIndex] = React.useState(-1);\n  var getInputProps = React.useCallback(props => {\n    var {\n      index\n    } = props,\n        rest = _objectWithoutPropertiesLoose(props, [\"index\"]);\n    /**\n     * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n     */\n\n\n    var onChange = event => {\n      var eventValue = event.target.value;\n      var currentValue = values[index];\n      var nextValue = getNextValue(currentValue, eventValue); // if the value was removed using backspace\n\n      if (nextValue === \"\") {\n        setValue(\"\", index);\n        return;\n      } // in the case of an autocomplete or copy and paste\n\n\n      if (eventValue.length > 2) {\n        // see if we can use the string to fill out our values\n        if (validate(eventValue, type)) {\n          // Ensure the value matches the number of inputs\n          var _nextValue = eventValue.split(\"\").filter((_, index) => index < descendants.length);\n\n          setValues(_nextValue); // if pasting fills the entire input fields, trigger `onComplete`\n\n          if (_nextValue.length === descendants.length) {\n            onComplete == null ? void 0 : onComplete(_nextValue.join(\"\"));\n          }\n        }\n      } else {\n        // only set if the new value is a number\n        if (validate(nextValue, type)) {\n          setValue(nextValue, index);\n        }\n\n        setMoveFocus(true);\n      }\n    };\n\n    var onKeyDown = event => {\n      if (event.key === \"Backspace\" && manageFocus) {\n        if (event.target.value === \"\") {\n          var prevInput = descendants[index - 1];\n\n          if (prevInput) {\n            var _prevInput$element;\n\n            setValue(\"\", index - 1);\n            (_prevInput$element = prevInput.element) == null ? void 0 : _prevInput$element.focus();\n            setMoveFocus(true);\n          }\n        } else {\n          setMoveFocus(false);\n        }\n      }\n    };\n\n    var onFocus = () => {\n      setFocusedIndex(index);\n    };\n\n    var onBlur = () => {\n      setFocusedIndex(-1);\n    };\n\n    var hasFocus = focusedIndex === index;\n    var inputType = type === \"number\" ? \"tel\" : \"text\";\n    return _extends({\n      \"aria-label\": \"Please enter your pin code\",\n      inputMode: type === \"number\" ? \"numeric\" : \"text\",\n      type: mask ? \"password\" : inputType\n    }, rest, {\n      id: id + \"-\" + index,\n      disabled: isDisabled,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      onChange: callAllHandlers(rest.onChange, onChange),\n      onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(rest.onFocus, onFocus),\n      onBlur: callAllHandlers(rest.onBlur, onBlur),\n      value: values[index] || \"\",\n      autoComplete: otp ? \"one-time-code\" : \"off\",\n      placeholder: hasFocus ? \"\" : placeholder\n    });\n  }, [descendants, focusedIndex, getNextValue, id, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues, type, values]);\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    domContext,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear\n  };\n}\nexport function usePinInputField(props, forwardedRef) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (forwardedRef === void 0) {\n    forwardedRef = null;\n  }\n\n  var ref = React.useRef(null);\n  var {\n    domContext,\n    getInputProps\n  } = usePinInputContext();\n  var index = useDescendant({\n    context: domContext,\n    element: ref.current\n  });\n  return getInputProps(_extends({}, props, {\n    ref: mergeRefs(ref, forwardedRef),\n    index\n  }));\n}","map":{"version":3,"sources":["../../src/use-pin-input.ts"],"names":["createContext","name","errorMessage","toArray","value","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","type","props","onChange","placeholder","manageFocus","otp","id","mask","uuid","useId","idProp","domContext","useDescendants","descendants","React","useControllableState","defaultValue","values","firstInput","focusNext","index","nextInput","setValue","nextValues","setValues","isComplete","inputValue","onComplete","clear","Array","getNextValue","nextValue","eventValue","getInputProps","rest","event","currentValue","validate","setMoveFocus","onKeyDown","prevInput","onFocus","setFocusedIndex","onBlur","hasFocus","focusedIndex","inputType","inputMode","disabled","ariaAttr","callAllHandlers","autoComplete","forwardedRef","ref","usePinInputContext","useDescendant","context","element","current","mergeRefs"],"mappings":"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","sourcesContent":["import { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport { useControllableState, useId } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  createContext,\n  mergeRefs,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype InputProps = Omit<\n  React.ComponentPropsWithRef<\"input\">,\n  \"color\" | \"height\" | \"width\"\n>\n\nexport type PinInputContext = UsePinInputReturn & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nconst [PinInputProvider, usePinInputContext] = createContext<PinInputContext>({\n  name: \"PinInputContext\",\n  errorMessage:\n    \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n})\n\nexport { PinInputProvider, usePinInputContext }\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const domContext = useDescendants<HTMLInputElement, {}>()\n  const { descendants } = domContext\n\n  const [moveFocus, setMoveFocus] = React.useState(true)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  React.useEffect(() => {\n    if (autoFocus) {\n      const firstInput = descendants[0]\n      firstInput?.element?.focus()\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = React.useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n\n      const nextInput = descendants[index + 1]\n      nextInput?.element?.focus()\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = React.useCallback(\n    (value: string, index: number) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        index === descendants.length - 1 &&\n        values.every((inputValue) => inputValue !== \"\")\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants.length],\n  )\n\n  const clear = React.useCallback(() => {\n    const values: string[] = Array(descendants.length).fill(\"\")\n    setValues(values)\n    const firstInput = descendants[0]\n    firstInput.element?.focus()\n  }, [descendants, setValues])\n\n  const getNextValue = React.useCallback(\n    (value: string, eventValue: string) => {\n      let nextValue = eventValue\n      if (value?.length > 0) {\n        if (value[0] === eventValue.charAt(0)) {\n          nextValue = eventValue.charAt(1)\n        } else if (value[0] === eventValue.charAt(1)) {\n          nextValue = eventValue.charAt(0)\n        }\n      }\n      return nextValue\n    },\n    [],\n  )\n\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  const getInputProps = React.useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.length)\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.length) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants[index - 1]\n            if (prevInput) {\n              setValue(\"\", index - 1)\n              prevInput.element?.focus()\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    domContext,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  forwardedRef: React.Ref<any> = null,\n) {\n  const ref = React.useRef<HTMLInputElement>(null)\n\n  const { domContext, getInputProps } = usePinInputContext()\n\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(ref, forwardedRef),\n    index,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}