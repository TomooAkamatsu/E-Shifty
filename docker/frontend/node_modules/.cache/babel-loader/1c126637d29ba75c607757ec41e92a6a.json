{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useEditable } from \"./use-editable\";\nvar [EditableProvider, useEditableContext] = createContext({\n  name: \"EditableContext\",\n  errorMessage: \"useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`\"\n});\n/**\n * Editable\n *\n * The wrapper that provides context and logic for all editable\n * components. It renders a `div`\n */\n\nexport var Editable = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Editable\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useEditable = useEditable(ownProps),\n      {\n    htmlProps\n  } = _useEditable,\n      context = _objectWithoutPropertiesLoose(_useEditable, [\"htmlProps\"]);\n\n  var {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit\n  } = context;\n\n  var _className = cx(\"chakra-editable\", props.className);\n\n  var children = runIfFn(props.children, {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit\n  });\n  return /*#__PURE__*/React.createElement(EditableProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, htmlProps, {\n    className: _className\n  }), children)));\n});\n\nif (__DEV__) {\n  Editable.displayName = \"Editable\";\n}\n\nvar commonStyles = {\n  fontSize: \"inherit\",\n  fontWeight: \"inherit\",\n  textAlign: \"inherit\",\n  bg: \"transparent\"\n};\n/**\n * EditablePreview\n *\n * The `span` used to display the final value, in the `preview` mode\n */\n\nexport var EditablePreview = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getPreviewProps\n  } = useEditableContext();\n  var styles = useStyles();\n  var previewProps = getPreviewProps(props, ref);\n\n  var _className = cx(\"chakra-editable__preview\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({}, previewProps, {\n    __css: _extends({\n      cursor: \"text\",\n      display: \"inline-block\"\n    }, commonStyles, styles.preview),\n    className: _className\n  }));\n});\n\nif (__DEV__) {\n  EditablePreview.displayName = \"EditablePreview\";\n}\n/**\n * EditableInput\n *\n * The input used in the `edit` mode\n */\n\n\nexport var EditableInput = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getInputProps\n  } = useEditableContext();\n  var styles = useStyles();\n  var inputProps = getInputProps(props, ref);\n\n  var _className = cx(\"chakra-editable__input\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.input, _extends({}, inputProps, {\n    __css: _extends({\n      outline: 0\n    }, commonStyles, styles.input),\n    className: _className\n  }));\n});\n\nif (__DEV__) {\n  EditableInput.displayName = \"EditableInput\";\n}\n/**\n * React hook use to gain access to the editable state and actions.\n */\n\n\nexport function useEditableState() {\n  var {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled\n  } = useEditableContext();\n  return {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled\n  };\n}\n/**\n * React hook use to create controls for the editable component\n */\n\nexport function useEditableControls() {\n  var {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps\n  } = useEditableContext();\n  return {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps\n  };\n}","map":{"version":3,"sources":["../../src/editable.tsx"],"names":["createContext","name","errorMessage","Editable","forwardRef","styles","useMultiStyleConfig","ownProps","omitThemingProps","htmlProps","context","useEditable","onEdit","_className","cx","props","children","runIfFn","ref","commonStyles","fontSize","fontWeight","textAlign","bg","EditablePreview","getPreviewProps","useEditableContext","useStyles","previewProps","cursor","display","EditableInput","getInputProps","inputProps","outline","isDisabled","getSubmitButtonProps"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  createContext,\n  cx,\n  MaybeRenderProp,\n  runIfFn,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useEditable,\n  UseEditableProps,\n  UseEditableReturn,\n} from \"./use-editable\"\n\ntype EditableContext = Omit<UseEditableReturn, \"htmlProps\">\n\nconst [EditableProvider, useEditableContext] = createContext<EditableContext>({\n  name: \"EditableContext\",\n  errorMessage:\n    \"useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`\",\n})\n\ntype RenderProps = Pick<\n  UseEditableReturn,\n  \"isEditing\" | \"onSubmit\" | \"onCancel\" | \"onEdit\"\n>\n\ninterface BaseEditableProps\n  extends Omit<\n    HTMLChakraProps<\"div\">,\n    \"onChange\" | \"value\" | \"defaultValue\" | \"onSubmit\"\n  > {}\n\nexport interface EditableProps\n  extends UseEditableProps,\n    BaseEditableProps,\n    ThemingProps<\"Editable\"> {\n  children?: MaybeRenderProp<RenderProps>\n}\n\n/**\n * Editable\n *\n * The wrapper that provides context and logic for all editable\n * components. It renders a `div`\n */\nexport const Editable = forwardRef<EditableProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Editable\", props)\n\n  const ownProps = omitThemingProps(props)\n  const { htmlProps, ...context } = useEditable(ownProps)\n\n  const { isEditing, onSubmit, onCancel, onEdit } = context\n\n  const _className = cx(\"chakra-editable\", props.className)\n\n  const children = runIfFn(props.children, {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n  })\n\n  return (\n    <EditableProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          ref={ref}\n          {...(htmlProps as HTMLChakraProps<\"div\">)}\n          className={_className}\n        >\n          {children}\n        </chakra.div>\n      </StylesProvider>\n    </EditableProvider>\n  )\n})\n\nif (__DEV__) {\n  Editable.displayName = \"Editable\"\n}\n\nconst commonStyles: SystemStyleObject = {\n  fontSize: \"inherit\",\n  fontWeight: \"inherit\",\n  textAlign: \"inherit\",\n  bg: \"transparent\",\n}\n\nexport interface EditablePreviewProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * EditablePreview\n *\n * The `span` used to display the final value, in the `preview` mode\n */\nexport const EditablePreview = forwardRef<EditablePreviewProps, \"span\">(\n  (props, ref) => {\n    const { getPreviewProps } = useEditableContext()\n    const styles = useStyles()\n\n    const previewProps = getPreviewProps(props, ref) as HTMLChakraProps<\"span\">\n    const _className = cx(\"chakra-editable__preview\", props.className)\n\n    return (\n      <chakra.span\n        {...previewProps}\n        __css={{\n          cursor: \"text\",\n          display: \"inline-block\",\n          ...commonStyles,\n          ...styles.preview,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  EditablePreview.displayName = \"EditablePreview\"\n}\n\nexport interface EditableInputProps extends HTMLChakraProps<\"input\"> {}\n\n/**\n * EditableInput\n *\n * The input used in the `edit` mode\n */\nexport const EditableInput = forwardRef<EditableInputProps, \"input\">(\n  (props, ref) => {\n    const { getInputProps } = useEditableContext()\n    const styles = useStyles()\n\n    const inputProps = getInputProps(props, ref) as HTMLChakraProps<\"input\">\n    const _className = cx(\"chakra-editable__input\", props.className)\n\n    return (\n      <chakra.input\n        {...inputProps}\n        __css={{\n          outline: 0,\n          ...commonStyles,\n          ...styles.input,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  EditableInput.displayName = \"EditableInput\"\n}\n\n/**\n * React hook use to gain access to the editable state and actions.\n */\nexport function useEditableState() {\n  const {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled,\n  } = useEditableContext()\n\n  return {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled,\n  }\n}\n\n/**\n * React hook use to create controls for the editable component\n */\nexport function useEditableControls(): Pick<\n  EditableContext,\n  | \"isEditing\"\n  | \"getEditButtonProps\"\n  | \"getCancelButtonProps\"\n  | \"getSubmitButtonProps\"\n> {\n  const {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps,\n  } = useEditableContext()\n\n  return {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}