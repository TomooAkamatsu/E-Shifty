{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { dataAttr, isRightClick, mergeRefs } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useEventListeners } from \"./use-event-listeners\";\n\nfunction isValidElement(event) {\n  var element = event.target;\n  var {\n    tagName,\n    isContentEditable\n  } = element;\n  return tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable !== true;\n}\n/**\n * useClickable implements all the interactions of a native `button`\n * component with support for making it focusable even if it is disabled.\n *\n * It can be used with both native button elements or other elements (like `div`).\n */\n\n\nexport function useClickable(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    ref: htmlRef,\n    isDisabled,\n    isFocusable,\n    clickOnEnter = true,\n    clickOnSpace = true,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onKeyDown,\n    onKeyUp,\n    tabIndex: tabIndexProp,\n    onMouseOver,\n    onMouseLeave\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"ref\", \"isDisabled\", \"isFocusable\", \"clickOnEnter\", \"clickOnSpace\", \"onMouseDown\", \"onMouseUp\", \"onClick\", \"onKeyDown\", \"onKeyUp\", \"tabIndex\", \"onMouseOver\", \"onMouseLeave\"]);\n  /**\n   * We'll use this to track if the element is a button element\n   */\n\n\n  var [isButton, setIsButton] = React.useState(true);\n  /**\n   * For custom button implementation, we'll use this to track when\n   * we mouse down on the button, to enable use style its \":active\" style\n   */\n\n  var [isPressed, setIsPressed] = React.useState(false);\n  var listeners = useEventListeners();\n  /**\n   * The ref callback that fires as soon as the dom node is ready\n   */\n\n  var refCallback = node => {\n    if (!node) return;\n\n    if (node.tagName !== \"BUTTON\") {\n      setIsButton(false);\n    }\n  };\n\n  var tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;\n  var trulyDisabled = isDisabled && !isFocusable;\n  var handleClick = React.useCallback(event => {\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    var self = event.currentTarget;\n    self.focus();\n    onClick == null ? void 0 : onClick(event);\n  }, [isDisabled, onClick]);\n  var onDocumentKeyUp = React.useCallback(e => {\n    if (isPressed && isValidElement(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsPressed(false); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n      listeners.remove(document, \"keyup\", onDocumentKeyUp, false);\n    }\n  }, [isPressed, listeners]);\n  var handleKeyDown = React.useCallback(event => {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n\n    if (isDisabled || event.defaultPrevented || event.metaKey) {\n      return;\n    }\n\n    if (!isValidElement(event.nativeEvent) || isButton) return;\n    var shouldClickOnEnter = clickOnEnter && event.key === \"Enter\";\n    var shouldClickOnSpace = clickOnSpace && event.key === \" \";\n\n    if (shouldClickOnSpace) {\n      event.preventDefault();\n      setIsPressed(true);\n    }\n\n    if (shouldClickOnEnter) {\n      event.preventDefault();\n      var self = event.currentTarget;\n      self.click();\n    }\n\n    listeners.add(document, \"keyup\", onDocumentKeyUp, false);\n  }, [isDisabled, isButton, onKeyDown, clickOnEnter, clickOnSpace, listeners, onDocumentKeyUp]);\n  var handleKeyUp = React.useCallback(event => {\n    onKeyUp == null ? void 0 : onKeyUp(event);\n    if (isDisabled || event.defaultPrevented || event.metaKey) return;\n    if (!isValidElement(event.nativeEvent) || isButton) return;\n    var shouldClickOnSpace = clickOnSpace && event.key === \" \";\n\n    if (shouldClickOnSpace) {\n      event.preventDefault();\n      setIsPressed(false);\n      var self = event.currentTarget;\n      self.click();\n    }\n  }, [clickOnSpace, isButton, isDisabled, onKeyUp]);\n  var onDocumentMouseUp = React.useCallback(event => {\n    if (event.button !== 0) return;\n    setIsPressed(false);\n    listeners.remove(document, \"mouseup\", onDocumentMouseUp, false);\n  }, [listeners]);\n  var handleMouseDown = React.useCallback(event => {\n    if (isRightClick(event)) return;\n\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    if (!isButton) {\n      setIsPressed(true);\n    }\n\n    var target = event.currentTarget;\n    target.focus({\n      preventScroll: true\n    });\n    listeners.add(document, \"mouseup\", onDocumentMouseUp, false);\n    onMouseDown == null ? void 0 : onMouseDown(event);\n  }, [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp]);\n  var handleMouseUp = React.useCallback(event => {\n    if (isRightClick(event)) return;\n\n    if (!isButton) {\n      setIsPressed(false);\n    }\n\n    onMouseUp == null ? void 0 : onMouseUp(event);\n  }, [onMouseUp, isButton]);\n  var handleMouseOver = React.useCallback(event => {\n    if (isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    onMouseOver == null ? void 0 : onMouseOver(event);\n  }, [isDisabled, onMouseOver]);\n  var handleMouseLeave = React.useCallback(event => {\n    if (isPressed) {\n      event.preventDefault();\n      setIsPressed(false);\n    }\n\n    onMouseLeave == null ? void 0 : onMouseLeave(event);\n  }, [isPressed, onMouseLeave]);\n  var ref = mergeRefs(htmlRef, refCallback);\n\n  if (isButton) {\n    return _extends({}, htmlProps, {\n      ref,\n      type: \"button\",\n      \"aria-disabled\": trulyDisabled ? undefined : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown,\n      onMouseUp,\n      onKeyUp,\n      onKeyDown,\n      onMouseOver,\n      onMouseLeave\n    });\n  }\n\n  return _extends({}, htmlProps, {\n    ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isPressed),\n    \"aria-disabled\": isDisabled ? \"true\" : undefined,\n    tabIndex: trulyDisabled ? undefined : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseLeave: handleMouseLeave\n  });\n}","map":{"version":3,"sources":["../../src/use-clickable.ts"],"names":["element","event","isContentEditable","tagName","props","ref","clickOnEnter","clickOnSpace","tabIndex","onMouseLeave","htmlProps","React","listeners","useEventListeners","refCallback","node","setIsButton","isButton","tabIndexProp","trulyDisabled","isDisabled","handleClick","self","onClick","onDocumentKeyUp","e","isPressed","isValidElement","setIsPressed","handleKeyDown","onKeyDown","shouldClickOnEnter","shouldClickOnSpace","handleKeyUp","onKeyUp","onDocumentMouseUp","handleMouseDown","isRightClick","target","preventScroll","onMouseDown","handleMouseUp","onMouseUp","handleMouseOver","onMouseOver","handleMouseLeave","mergeRefs","type","disabled","role","dataAttr"],"mappings":"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","sourcesContent":["import { dataAttr, isRightClick, mergeRefs } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useEventListeners } from \"./use-event-listeners\"\n\nexport interface UseClickableProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * If `true`, the element will be disabled.\n   * It will set the `disabled` HTML attribute\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and isDisabled, the element will\n   * have only `aria-disabled` set to `true`\n   */\n  isFocusable?: boolean\n  /**\n   * Whether or not trigger click on pressing `Enter`.\n   */\n  clickOnEnter?: boolean\n  /**\n   * Whether or not trigger click on pressing `Space`.\n   */\n  clickOnSpace?: boolean\n  /**\n   * The ref for the element\n   */\n  ref?: React.Ref<HTMLElement>\n}\n\nfunction isValidElement(event: KeyboardEvent): boolean {\n  const element = event.target as HTMLElement\n  const { tagName, isContentEditable } = element\n  return (\n    tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable !== true\n  )\n}\n\n/**\n * useClickable implements all the interactions of a native `button`\n * component with support for making it focusable even if it is disabled.\n *\n * It can be used with both native button elements or other elements (like `div`).\n */\nexport function useClickable(props: UseClickableProps = {}) {\n  const {\n    ref: htmlRef,\n    isDisabled,\n    isFocusable,\n    clickOnEnter = true,\n    clickOnSpace = true,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onKeyDown,\n    onKeyUp,\n    tabIndex: tabIndexProp,\n    onMouseOver,\n    onMouseLeave,\n    ...htmlProps\n  } = props\n  /**\n   * We'll use this to track if the element is a button element\n   */\n  const [isButton, setIsButton] = React.useState(true)\n\n  /**\n   * For custom button implementation, we'll use this to track when\n   * we mouse down on the button, to enable use style its \":active\" style\n   */\n  const [isPressed, setIsPressed] = React.useState(false)\n\n  const listeners = useEventListeners()\n\n  /**\n   * The ref callback that fires as soon as the dom node is ready\n   */\n  const refCallback = (node: any) => {\n    if (!node) return\n    if (node.tagName !== \"BUTTON\") {\n      setIsButton(false)\n    }\n  }\n\n  const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      const self = event.currentTarget as HTMLElement\n      self.focus()\n      onClick?.(event)\n    },\n    [isDisabled, onClick],\n  )\n\n  const onDocumentKeyUp = React.useCallback(\n    (e: KeyboardEvent) => {\n      if (isPressed && isValidElement(e)) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        setIsPressed(false)\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        listeners.remove(document, \"keyup\", onDocumentKeyUp, false)\n      }\n    },\n    [isPressed, listeners],\n  )\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      onKeyDown?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) {\n        return\n      }\n\n      if (!isValidElement(event.nativeEvent) || isButton) return\n\n      const shouldClickOnEnter = clickOnEnter && event.key === \"Enter\"\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (shouldClickOnSpace) {\n        event.preventDefault()\n        setIsPressed(true)\n      }\n\n      if (shouldClickOnEnter) {\n        event.preventDefault()\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n\n      listeners.add(document, \"keyup\", onDocumentKeyUp, false)\n    },\n    [\n      isDisabled,\n      isButton,\n      onKeyDown,\n      clickOnEnter,\n      clickOnSpace,\n      listeners,\n      onDocumentKeyUp,\n    ],\n  )\n\n  const handleKeyUp = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      onKeyUp?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) return\n\n      if (!isValidElement(event.nativeEvent) || isButton) return\n\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (shouldClickOnSpace) {\n        event.preventDefault()\n        setIsPressed(false)\n\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n    },\n    [clickOnSpace, isButton, isDisabled, onKeyUp],\n  )\n\n  const onDocumentMouseUp = React.useCallback(\n    (event: MouseEvent) => {\n      if (event.button !== 0) return\n      setIsPressed(false)\n      listeners.remove(document, \"mouseup\", onDocumentMouseUp, false)\n    },\n    [listeners],\n  )\n\n  const handleMouseDown = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isRightClick(event)) return\n\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      if (!isButton) {\n        setIsPressed(true)\n      }\n\n      const target = event.currentTarget as HTMLElement\n      target.focus({ preventScroll: true })\n\n      listeners.add(document, \"mouseup\", onDocumentMouseUp, false)\n\n      onMouseDown?.(event)\n    },\n    [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp],\n  )\n\n  const handleMouseUp = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isRightClick(event)) return\n\n      if (!isButton) {\n        setIsPressed(false)\n      }\n\n      onMouseUp?.(event)\n    },\n    [onMouseUp, isButton],\n  )\n\n  const handleMouseOver = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      onMouseOver?.(event)\n    },\n    [isDisabled, onMouseOver],\n  )\n\n  const handleMouseLeave = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isPressed) {\n        event.preventDefault()\n        setIsPressed(false)\n      }\n      onMouseLeave?.(event)\n    },\n    [isPressed, onMouseLeave],\n  )\n\n  const ref = mergeRefs(htmlRef, refCallback)\n\n  if (isButton) {\n    return {\n      ...htmlProps,\n      ref,\n      type: \"button\" as React.ButtonHTMLAttributes<any>[\"type\"],\n      \"aria-disabled\": trulyDisabled ? undefined : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown,\n      onMouseUp,\n      onKeyUp,\n      onKeyDown,\n      onMouseOver,\n      onMouseLeave,\n    }\n  }\n\n  return {\n    ...htmlProps,\n    ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isPressed),\n    \"aria-disabled\": isDisabled ? (\"true\" as const) : undefined,\n    tabIndex: trulyDisabled ? undefined : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseLeave: handleMouseLeave,\n  }\n}\n\nexport type UseClickableReturn = ReturnType<typeof useClickable>\n"]},"metadata":{},"sourceType":"module"}