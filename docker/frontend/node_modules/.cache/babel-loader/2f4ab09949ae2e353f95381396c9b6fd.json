{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\";\nimport { useControllableState, useDisclosure, useFocusOnHide, useId, useIds, useOutsideClick, useShortcut, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { addItem, callAllHandlers, createContext, dataAttr, focus, getNextIndex, getNextItemFromSearch, getPrevIndex, getValidChildren, isArray, isString, mergeRefs, mergeWith, normalizeEventKey, removeItem } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar [MenuProvider, useMenuContext] = createContext({\n  strict: false,\n  name: \"MenuContext\"\n});\nexport { MenuProvider, useMenuContext };\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\n\nexport function useMenu(props) {\n  var {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    isLazy,\n    placement = \"bottom-start\"\n  } = props;\n  var {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle\n  } = useDisclosure(props);\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n\n  var menuRef = React.useRef(null);\n  var buttonRef = React.useRef(null);\n  useOutsideClick({\n    ref: menuRef,\n    handler: event => {\n      var _buttonRef$current;\n\n      if (isOpen && closeOnBlur && !((_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n\n  var popper = usePopper(_extends({\n    placement\n  }, props, {\n    enabled: isOpen\n  }));\n  var [focusedIndex, setFocusedIndex] = React.useState(-1);\n  /**\n   * Context to register all menu item nodes\n   */\n\n  var domContext = useDescendants();\n  /**\n   * Focus the button when we close the menu\n   */\n\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  /**\n   * Generate unique ids for menu's list and button\n   */\n\n  var [buttonId, menuId] = useIds(id, \"menu-button\", \"menu-list\");\n  var openAndFocusMenu = React.useCallback(() => {\n    onOpen();\n    if (menuRef.current) focus(menuRef.current);\n  }, [onOpen, menuRef]);\n  var openAndFocusFirstItem = React.useCallback(() => {\n    onOpen();\n    setFocusedIndex(0);\n  }, [onOpen, setFocusedIndex]);\n  var openAndFocusLastItem = React.useCallback(() => {\n    onOpen();\n    setFocusedIndex(domContext.descendants.length - 1);\n  }, [onOpen, setFocusedIndex, domContext.descendants]);\n  var refocus = React.useCallback(() => {\n    var _menuRef$current, _domContext$descendan;\n\n    var hasFocusWithin = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(document.activeElement);\n    var shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    var el = (_domContext$descendan = domContext.descendants[focusedIndex]) == null ? void 0 : _domContext$descendan.element;\n    el == null ? void 0 : el.focus({\n      preventScroll: true\n    });\n  }, [isOpen, focusedIndex, domContext.descendants]);\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    domContext,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy\n  };\n}\nexport function useMenuButton(props, externalRef) {\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var menu = useMenuContext();\n  var {\n    isOpen,\n    onClose,\n    autoSelect,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    openAndFocusMenu\n  } = menu;\n  var onClick = React.useCallback(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      var action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu;\n      action();\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu]);\n  var onKeyDown = React.useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n\n  var buttonProps = _extends({}, props, {\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n\n  return popper.getReferenceProps(buttonProps, mergeRefs(menu.buttonRef, externalRef));\n}\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\nexport function useMenuList(props, ref) {\n  if (ref === void 0) {\n    ref = null;\n  }\n\n  var menu = useMenuContext();\n\n  if (!menu) {\n    throw new Error(\"useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>\");\n  }\n\n  var {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    popper,\n    domContext: {\n      descendants\n    },\n    isLazy\n  } = menu;\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n\n  var onCharacterPress = useShortcut({\n    preventDefault: event => event.key !== \" \"\n  });\n  var onKeyDown = React.useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Tab: event => {\n        event.preventDefault();\n      },\n      Escape: onClose,\n      ArrowDown: () => {\n        var nextIndex = getNextIndex(focusedIndex, descendants.length);\n        setFocusedIndex(nextIndex);\n      },\n      ArrowUp: () => {\n        var prevIndex = getPrevIndex(focusedIndex, descendants.length);\n        setFocusedIndex(prevIndex);\n      }\n    };\n    var fn = keyMap[eventKey];\n\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n\n    var characterHandler = onCharacterPress(character => {\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      var nextItem = getNextItemFromSearch(descendants, character, node => {\n        var _node$element;\n\n        return ((_node$element = node.element) == null ? void 0 : _node$element.textContent) || \"\";\n      }, descendants[focusedIndex]);\n\n      if (nextItem) {\n        var index = descendants.indexOf(nextItem);\n        setFocusedIndex(index);\n      }\n    });\n    characterHandler(event);\n  }, [descendants, focusedIndex, onCharacterPress, onClose, setFocusedIndex]);\n\n  var menulistProps = _extends({}, props, {\n    ref: mergeRefs(menuRef, ref),\n    children: !isLazy || isOpen ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: _extends({}, props.style, {\n      transformOrigin: popper.transformOrigin\n    }),\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n\n  return menulistProps;\n}\nexport function useMenuPositioner(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    popper,\n    isOpen\n  } = useMenuContext();\n  return mergeWith(popper.getPopperProps(props), {\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\"\n    }\n  });\n}\nexport function useMenuItem(props, externalRef) {\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onClick\", \"isDisabled\", \"isFocusable\"]);\n\n  var menu = useMenuContext();\n  var {\n    domContext,\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect,\n    onClose,\n    menuRef,\n    isOpen\n  } = menu;\n  var ref = React.useRef(null);\n  var id = \"menuitem-\" + useId();\n  /**\n   * Register the menuitem's node into the domContext\n   */\n\n  var index = useDescendant({\n    element: ref.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable\n  });\n  var onMouseEnter = React.useCallback(event => {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  var onMouseMove = React.useCallback(event => {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n\n    if (document.activeElement !== ref.current) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  var onMouseLeave = React.useCallback(event => {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  var onClick = React.useCallback(event => {\n    onClickProp == null ? void 0 : onClickProp(event);\n    /**\n     * Close menu and parent menu's if `closeOnSelect` is set to `true`\n     */\n\n    if (closeOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, closeOnSelect]);\n  var isFocused = index === focusedIndex;\n  var trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(() => {\n    if (!isOpen) return;\n\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current);\n    } else if (document.activeElement !== menuRef.current) {\n      var _menuRef$current2;\n\n      (_menuRef$current2 = menuRef.current) == null ? void 0 : _menuRef$current2.focus();\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  var tabbable = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(ref, externalRef),\n    isDisabled,\n    isFocusable\n  });\n  return _extends({}, htmlProps, tabbable, {\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  });\n}\nexport function useMenuOption(props, externalRef) {\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var {\n    onClick,\n    isDisabled,\n    isFocusable,\n    type = \"radio\",\n    isChecked\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"onClick\", \"isDisabled\", \"isFocusable\", \"type\", \"isChecked\"]);\n\n  var hookProps = {\n    isDisabled,\n    isFocusable,\n    onClick\n  };\n  var optionsProps = useMenuItem(hookProps, externalRef);\n  return _extends({}, rest, optionsProps, {\n    role: \"menuitem\" + type,\n    \"aria-checked\": isChecked\n  });\n}\nexport function useMenuOptionGroup(props) {\n  var {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"children\", \"type\", \"value\", \"defaultValue\", \"onChange\"]);\n\n  var isRadio = type === \"radio\";\n  var fallback = isRadio ? \"\" : [];\n  var [value, setValue] = useControllableState({\n    defaultValue: defaultValue != null ? defaultValue : fallback,\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  var onChange = React.useCallback(selectedValue => {\n    if (type === \"radio\" && isString(value)) {\n      setValue(selectedValue);\n    }\n\n    if (type === \"checkbox\" && isArray(value)) {\n      var nextValue = value.includes(selectedValue) ? removeItem(value, selectedValue) : addItem(value, selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(child => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if (child.type.id !== \"MenuItemOption\") return child;\n\n    var onClick = event => {\n      onChange(child.props.value);\n      child.props.onClick == null ? void 0 : child.props.onClick(event);\n    };\n\n    var isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return /*#__PURE__*/React.cloneElement(child, {\n      type,\n      onClick,\n      isChecked\n    });\n  });\n  return _extends({}, htmlProps, {\n    children: clones\n  });\n}\nexport function useMenuState() {\n  var {\n    isOpen,\n    onClose\n  } = useMenuContext();\n  return {\n    isOpen,\n    onClose\n  };\n}","map":{"version":3,"sources":["../../src/use-menu.ts"],"names":["createContext","strict","name","closeOnSelect","closeOnBlur","autoSelect","placement","onToggle","useDisclosure","menuRef","React","buttonRef","useOutsideClick","ref","handler","event","isOpen","onClose","popper","usePopper","enabled","domContext","useDescendants","useUpdateEffect","setFocusedIndex","useFocusOnHide","focusRef","visible","shouldFocus","useIds","openAndFocusMenu","onOpen","focus","openAndFocusFirstItem","openAndFocusLastItem","refocus","hasFocusWithin","document","shouldRefocus","el","preventScroll","onTransitionEnd","forceUpdate","orientation","isLazy","externalRef","menu","useMenuContext","onClick","action","onKeyDown","eventKey","normalizeEventKey","keyMap","Enter","ArrowDown","ArrowUp","buttonProps","id","dataAttr","callAllHandlers","props","mergeRefs","descendants","onCharacterPress","useShortcut","preventDefault","Tab","Escape","nextIndex","getNextIndex","prevIndex","getPrevIndex","fn","characterHandler","character","nextItem","getNextItemFromSearch","node","index","menulistProps","children","tabIndex","role","style","transformOrigin","mergeWith","visibility","onMouseEnter","onMouseMove","onMouseLeave","isFocusable","htmlProps","useId","useDescendant","element","context","disabled","focusable","onMouseEnterProp","onMouseMoveProp","onMouseLeaveProp","onClickProp","isFocused","trulyDisabled","isDisabled","tabbable","useClickable","type","isChecked","rest","hookProps","optionsProps","useMenuItem","value","onChange","onChangeProp","isRadio","fallback","useControllableState","defaultValue","selectedValue","isString","setValue","isArray","nextValue","removeItem","addItem","validChildren","getValidChildren","clones","child"],"mappings":"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","sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useDisclosure,\n  UseDisclosureProps,\n  useFocusOnHide,\n  useId,\n  useIds,\n  useOutsideClick,\n  useShortcut,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  addItem,\n  callAllHandlers,\n  createContext,\n  dataAttr,\n  EventKeyMap,\n  focus,\n  getNextIndex,\n  getNextItemFromSearch,\n  getPrevIndex,\n  getValidChildren,\n  isArray,\n  isString,\n  mergeRefs,\n  mergeWith,\n  normalizeEventKey,\n  removeItem,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nconst [MenuProvider, useMenuContext] = createContext<UseMenuReturn>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\nexport { MenuProvider, useMenuContext }\n\nexport interface UseMenuProps extends UsePopperProps, UseDisclosureProps {\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will receive focus and be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * Performance 🚀:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   */\n  isLazy?: boolean\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport function useMenu(props: UseMenuProps) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    isLazy,\n    placement = \"bottom-start\",\n  } = props\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure(props)\n\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = React.useRef<HTMLDivElement>(null)\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n  useOutsideClick({\n    ref: menuRef,\n    handler: (event) => {\n      if (\n        isOpen &&\n        closeOnBlur &&\n        !buttonRef.current?.contains(event.target as HTMLElement)\n      ) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper = usePopper({\n    placement,\n    ...props,\n    enabled: isOpen,\n  })\n\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const domContext = useDescendants<HTMLDivElement, {}>()\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true,\n  })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = React.useCallback(() => {\n    onOpen()\n    if (menuRef.current) focus(menuRef.current)\n  }, [onOpen, menuRef])\n\n  const openAndFocusFirstItem = React.useCallback(() => {\n    onOpen()\n    setFocusedIndex(0)\n  }, [onOpen, setFocusedIndex])\n\n  const openAndFocusLastItem = React.useCallback(() => {\n    onOpen()\n    setFocusedIndex(domContext.descendants.length - 1)\n  }, [onOpen, setFocusedIndex, domContext.descendants])\n\n  const refocus = React.useCallback(() => {\n    const hasFocusWithin = menuRef.current?.contains(document.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n\n    if (!shouldRefocus) return\n\n    const el = domContext.descendants[focusedIndex]?.element\n    el?.focus({ preventScroll: true })\n  }, [isOpen, focusedIndex, domContext.descendants])\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    domContext,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\nexport interface UseMenuButtonProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\nexport function useMenuButton(\n  props: UseMenuButtonProps,\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const {\n    isOpen,\n    onClose,\n    autoSelect,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    openAndFocusMenu,\n  } = menu\n\n  const onClick = React.useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      const action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu\n      action()\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu])\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  const buttonProps = {\n    ...props,\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n\n  return popper.getReferenceProps(\n    buttonProps,\n    mergeRefs(menu.buttonRef, externalRef),\n  )\n}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\nexport interface UseMenuListProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\nexport function useMenuList(\n  props: UseMenuListProps,\n  ref: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    popper,\n    domContext: { descendants },\n    isLazy,\n  } = menu\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const onCharacterPress = useShortcut({\n    preventDefault: (event) => event.key !== \" \",\n  })\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Tab: (event) => {\n          event.preventDefault()\n        },\n        Escape: onClose,\n        ArrowDown: () => {\n          const nextIndex = getNextIndex(focusedIndex, descendants.length)\n          setFocusedIndex(nextIndex)\n        },\n        ArrowUp: () => {\n          const prevIndex = getPrevIndex(focusedIndex, descendants.length)\n          setFocusedIndex(prevIndex)\n        },\n      }\n\n      const fn = keyMap[eventKey]\n\n      if (fn) {\n        event.preventDefault()\n        fn(event)\n        return\n      }\n\n      const characterHandler = onCharacterPress((character) => {\n        /**\n         * Typeahead: Based on current character pressed,\n         * find the next item to be selected\n         */\n        const nextItem = getNextItemFromSearch(\n          descendants,\n          character,\n          (node) => node.element?.textContent || \"\",\n          descendants[focusedIndex],\n        )\n\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem)\n          setFocusedIndex(index)\n        }\n      })\n\n      characterHandler(event)\n    },\n    [descendants, focusedIndex, onCharacterPress, onClose, setFocusedIndex],\n  )\n\n  const menulistProps: any = {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: !isLazy || isOpen ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: popper.transformOrigin,\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n\n  return menulistProps\n}\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return mergeWith(popper.getPopperProps(props), {\n    style: { visibility: isOpen ? \"visible\" : \"hidden\" },\n  })\n}\n\nexport interface UseMenuItemProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {\n  isDisabled?: boolean\n  isFocusable?: boolean\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps,\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    domContext,\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n  } = menu\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const id = `menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const index = useDescendant({\n    element: ref.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable,\n  })\n\n  const onMouseEnter = React.useCallback(\n    (event) => {\n      onMouseEnterProp?.(event)\n      if (isDisabled) return\n\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, index, isDisabled, onMouseEnterProp],\n  )\n\n  const onMouseMove = React.useCallback(\n    (event) => {\n      onMouseMoveProp?.(event)\n      if (document.activeElement !== ref.current) {\n        onMouseEnter(event)\n      }\n    },\n    [onMouseEnter, onMouseMoveProp],\n  )\n\n  const onMouseLeave = React.useCallback(\n    (event) => {\n      onMouseLeaveProp?.(event)\n      if (isDisabled) return\n\n      setFocusedIndex(-1)\n    },\n    [setFocusedIndex, isDisabled, onMouseLeaveProp],\n  )\n\n  const onClick = React.useCallback(\n    (event: React.MouseEvent) => {\n      onClickProp?.(event)\n      /**\n       * Close menu and parent menu's if `closeOnSelect` is set to `true`\n       */\n      if (closeOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, closeOnSelect],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (!isOpen) return\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current)\n    } else if (document.activeElement !== menuRef.current) {\n      menuRef.current?.focus()\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen])\n\n  const tabbable = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...tabbable,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends UseMenuItemProps,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps,\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onClick,\n    isDisabled,\n    isFocusable,\n    type = \"radio\",\n    isChecked,\n    ...rest\n  } = props\n\n  const hookProps = { isDisabled, isFocusable, onClick }\n  const optionsProps = useMenuItem(hookProps, externalRef)\n\n  return {\n    ...rest,\n    ...optionsProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  const onChange = React.useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && isString(value)) {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? removeItem(value, selectedValue)\n          : addItem(value, selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      onChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return React.cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n"]},"metadata":{},"sourceType":"module"}