{"ast":null,"code":"import { isFunction, __DEV__ } from \"./assertion\";\nexport function runIfFn(valueOrFn) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;\n}\nexport function callAllHandlers() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n\n  return function func(event) {\n    fns.some(fn => {\n      fn == null ? void 0 : fn(event);\n      return event == null ? void 0 : event.defaultPrevented;\n    });\n  };\n}\nexport function callAll() {\n  for (var _len3 = arguments.length, fns = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    fns[_key3] = arguments[_key3];\n  }\n\n  return function mergedFn(arg) {\n    fns.forEach(fn => {\n      fn == null ? void 0 : fn(arg);\n    });\n  };\n}\nexport var compose = function compose(fn1) {\n  for (var _len4 = arguments.length, fns = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    fns[_key4 - 1] = arguments[_key4];\n  }\n\n  return fns.reduce((f1, f2) => function () {\n    return f1(f2(...arguments));\n  }, fn1);\n};\nexport function once(fn) {\n  var result;\n  return function func() {\n    if (fn) {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      result = fn.apply(this, args);\n      fn = null;\n    }\n\n    return result;\n  };\n}\nexport var noop = () => {};\nexport var warn = once(options => {\n  var {\n    condition,\n    message\n  } = options;\n\n  if (condition && __DEV__) {\n    console.warn(message);\n  }\n});\nexport var error = once(options => {\n  var {\n    condition,\n    message\n  } = options;\n\n  if (condition && __DEV__) {\n    console.error(message);\n  }\n});","map":{"version":3,"sources":["../../src/function.ts"],"names":["args","isFunction","valueOrFn","fns","fn","event","compose","f1","f2","result","noop","warn","once","options","message","condition","console","error"],"mappings":"AAAA,SAAA,UAAA,EAAA,OAAA,QAAA,aAAA;AAGA,OAAO,SAAA,OAAA,CAAA,SAAA,EAGF;EAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EADAA,IACA,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;IADAA,IACA,CAAA,IAAA,GAAA,CAAA,CADAA,GACA,SAAA,CAAA,IAAA,CADAA;EACA;;EACH,OAAOC,UAAU,CAAVA,SAAU,CAAVA,GAAwBC,SAAS,CAAC,GAAlCD,IAAiC,CAAjCA,GAAP,SAAA;AACD;AAED,OAAO,SAAA,eAAA,GAEL;EAAA,KAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EADGE,GACH,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;IADGA,GACH,CAAA,KAAA,CADGA,GACH,SAAA,CAAA,KAAA,CADGA;EACH;;EACA,OAAO,SAAA,IAAA,CAAA,KAAA,EAA8C;IACnDA,GAAG,CAAHA,IAAAA,CAAUC,EAAD,IAAQ;MACfA,EAAE,IAAFA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,EAAE,CAAFA,KAAE,CAAFA;MACA,OAAOC,KAAP,IAAA,IAAOA,GAAP,KAAA,CAAOA,GAAAA,KAAK,CAAZ,gBAAA;IAFFF,CAAAA;EADF,CAAA;AAMD;AAED,OAAO,SAAA,OAAA,GAAmE;EAAA,KAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAAxBA,GAAwB,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;IAAxBA,GAAwB,CAAA,KAAA,CAAxBA,GAAwB,SAAA,CAAA,KAAA,CAAxBA;EAAwB;;EACxE,OAAO,SAAA,QAAA,CAAA,GAAA,EAAgD;IACrDA,GAAG,CAAHA,OAAAA,CAAaC,EAAD,IAAQ;MAClBA,EAAE,IAAFA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,EAAE,CAAFA,GAAE,CAAFA;IADFD,CAAAA;EADF,CAAA;AAKD;AAED,OAAO,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAAA,GAAA,EAAA;EAAA,KAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAElBH,GAFkB,GAAA,IAAA,KAAA,CAAA,KAAA,GAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;IAElBA,GAFkB,CAAA,KAAA,GAAA,CAAA,CAElBA,GAFkB,SAAA,CAAA,KAAA,CAElBA;EAFkB;;EAAA,OAGlB,GAAG,CAAH,MAAA,CAAW,CAAA,EAAA,EAAA,EAAA,KAAY,YAAA;IAAA,OAAaI,EAAE,CAACC,EAAE,CAAC,GAAnB,SAAkB,CAAH,CAAf;EAAvB,CAAA,EAHkB,GAGlB,CAHkB;AAAhB,CAAA;AAKP,OAAO,SAAA,IAAA,CAAA,EAAA,EAAoC;EACzC,IAAA,MAAA;EAEA,OAAO,SAAA,IAAA,GAAyC;IAC9C,IAAA,EAAA,EAAQ;MAAA,KAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EADyBR,IACzB,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;QADyBA,IACzB,CAAA,KAAA,CADyBA,GACzB,SAAA,CAAA,KAAA,CADyBA;MACzB;;MACNS,MAAM,GAAGL,EAAE,CAAFA,KAAAA,CAAAA,IAAAA,EAATK,IAASL,CAATK;MACAL,EAAE,GAAFA,IAAAA;IACD;;IAED,OAAA,MAAA;EANF,CAAA;AAQD;AAED,OAAO,IAAMM,IAAI,GAAG,MAAM,CAAnB,CAAA;AAOP,OAAO,IAAMC,IAAI,GAAGC,IAAI,CAAEC,OAAD,IAA6B;EACpD,IAAM;IAAA,SAAA;IAAaC;EAAb,IAAN,OAAA;;EACA,IAAIC,SAAS,IAAb,OAAA,EAA0B;IACxBC,OAAO,CAAPA,IAAAA,CAAAA,OAAAA;EACD;AAJI,CAAiB,CAAjB;AAOP,OAAO,IAAMC,KAAK,GAAGL,IAAI,CAAEC,OAAD,IAA6B;EACrD,IAAM;IAAA,SAAA;IAAaC;EAAb,IAAN,OAAA;;EACA,IAAIC,SAAS,IAAb,OAAA,EAA0B;IACxBC,OAAO,CAAPA,KAAAA,CAAAA,OAAAA;EACD;AAJI,CAAkB,CAAlB","sourcesContent":["import { isFunction, __DEV__ } from \"./assertion\"\nimport { AnyFunction, FunctionArguments } from \"./types\"\n\nexport function runIfFn<T, U>(\n  valueOrFn: T | ((...fnArgs: U[]) => T),\n  ...args: U[]\n): T {\n  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn\n}\n\nexport function callAllHandlers<T extends (event: any) => void>(\n  ...fns: (T | undefined)[]\n) {\n  return function func(event: FunctionArguments<T>[0]) {\n    fns.some((fn) => {\n      fn?.(event)\n      return event?.defaultPrevented\n    })\n  }\n}\n\nexport function callAll<T extends AnyFunction>(...fns: (T | undefined)[]) {\n  return function mergedFn(arg: FunctionArguments<T>[0]) {\n    fns.forEach((fn) => {\n      fn?.(arg)\n    })\n  }\n}\n\nexport const compose = <T>(\n  fn1: (...args: T[]) => T,\n  ...fns: Array<(...args: T[]) => T>\n) => fns.reduce((f1, f2) => (...args) => f1(f2(...args)), fn1)\n\nexport function once(fn?: Function | null) {\n  let result: any\n\n  return function func(this: any, ...args: any[]) {\n    if (fn) {\n      result = fn.apply(this, args)\n      fn = null\n    }\n\n    return result\n  }\n}\n\nexport const noop = () => {}\n\ntype MessageOptions = {\n  condition: boolean\n  message: string\n}\n\nexport const warn = once((options: MessageOptions) => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.warn(message)\n  }\n})\n\nexport const error = once((options: MessageOptions) => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.error(message)\n  }\n})\n"]},"metadata":{},"sourceType":"module"}