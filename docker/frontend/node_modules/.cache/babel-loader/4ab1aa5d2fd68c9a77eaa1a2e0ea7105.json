{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var LinkOverlay = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    isExternal,\n    target,\n    rel,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"isExternal\", \"target\", \"rel\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.a, _extends({}, rest, {\n    ref: ref,\n    className: cx(\"chakra-linkbox__overlay\", className),\n    rel: isExternal ? \"noopener noreferrer\" : rel,\n    target: isExternal ? \"_blank\" : target,\n    __css: {\n      position: \"static\",\n      \"&::before\": {\n        content: \"''\",\n        cursor: \"inherit\",\n        display: \"block\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        zIndex: 0,\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }\n  }));\n});\n/**\n * `LinkBox` is used to wrap content areas within a link while ensuring semantic html\n *\n * @see Docs https://www.chakra-ui.com/docs/link-overlay\n * @see Resources https://www.sarasoueidan.com/blog/nested-links\n */\n\nexport var LinkBox = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    position: \"relative\"\n  }, rest, {\n    className: cx(\"chakra-linkbox\", className),\n    __css: {\n      /* Elevate the links and abbreviations up */\n      \"a[href]:not(.chakra-linkbox__overlay), abbr[title]\": {\n        position: \"relative\",\n        zIndex: 1\n      }\n    }\n  }));\n});","map":{"version":3,"sources":["../../src/link-box.tsx"],"names":["LinkOverlay","forwardRef","className","rest","cx","isExternal","position","content","cursor","display","top","left","zIndex","width","height","LinkBox"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,QAAA,mBAAA;AACA,SAAA,EAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AASA,OAAO,IAAMA,WAAW,GAAA,aAAGC,UAAU,CAAwB,CAAA,KAAA,EAAA,GAAA,KAAgB;EAC3E,IAAM;IAAA,UAAA;IAAA,MAAA;IAAA,GAAA;IAA2BC;EAA3B,IAAN,KAAA;EAAA,IAA+CC,IAA/C,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,YAAA,EAAA,QAAA,EAAA,KAAA,EAAA,WAAA,CAAA,CAAA;;EACA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,CAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;IAEE,GAAG,EAFL,GAAA;IAGE,SAAS,EAAEC,EAAE,CAAA,yBAAA,EAHf,SAGe,CAHf;IAIE,GAAG,EAAEC,UAAU,GAAA,qBAAA,GAJjB,GAAA;IAKE,MAAM,EAAEA,UAAU,GAAA,QAAA,GALpB,MAAA;IAME,KAAK,EAAE;MACLC,QAAQ,EADH,QAAA;MAEL,aAAa;QACXC,OAAO,EADI,IAAA;QAEXC,MAAM,EAFK,SAAA;QAGXC,OAAO,EAHI,OAAA;QAIXH,QAAQ,EAJG,UAAA;QAKXI,GAAG,EALQ,CAAA;QAMXC,IAAI,EANO,CAAA;QAOXC,MAAM,EAPK,CAAA;QAQXC,KAAK,EARM,MAAA;QASXC,MAAM,EAAE;MATG;IAFR;EANT,CAAA,CAAA,CADF;AAFK,CAA8B,CAA9B;AA6BP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,OAAO,GAAA,aAAGd,UAAU,CAAsB,CAAA,KAAA,EAAA,GAAA,KAAgB;EACrE,IAAM;IAAEC;EAAF,IAAN,KAAA;EAAA,IAAsBC,IAAtB,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,WAAA,CAAA,CAAA;;EAEA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,GAAA,EAAA,QAAA,CAAA;IACE,GAAG,EADL,GAAA;IAEE,QAAQ,EAAC;EAFX,CAAA,EAAA,IAAA,EAAA;IAIE,SAAS,EAAEC,EAAE,CAAA,gBAAA,EAJf,SAIe,CAJf;IAKE,KAAK,EAAE;MACL;MACA,sDAAsD;QACpDE,QAAQ,EAD4C,UAAA;QAEpDM,MAAM,EAAE;MAF4C;IAFjD;EALT,CAAA,CAAA,CADF;AAHK,CAA0B,CAA1B","sourcesContent":["import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface LinkOverlayProps extends HTMLChakraProps<\"a\"> {\n  /**\n   *  If `true`, the link will open in new tab\n   */\n  isExternal?: boolean\n}\n\nexport const LinkOverlay = forwardRef<LinkOverlayProps, \"a\">((props, ref) => {\n  const { isExternal, target, rel, className, ...rest } = props\n  return (\n    <chakra.a\n      {...rest}\n      ref={ref}\n      className={cx(\"chakra-linkbox__overlay\", className)}\n      rel={isExternal ? \"noopener noreferrer\" : rel}\n      target={isExternal ? \"_blank\" : target}\n      __css={{\n        position: \"static\",\n        \"&::before\": {\n          content: \"''\",\n          cursor: \"inherit\",\n          display: \"block\",\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          zIndex: 0,\n          width: \"100%\",\n          height: \"100%\",\n        },\n      }}\n    />\n  )\n})\n\nexport interface LinkBoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * `LinkBox` is used to wrap content areas within a link while ensuring semantic html\n *\n * @see Docs https://www.chakra-ui.com/docs/link-overlay\n * @see Resources https://www.sarasoueidan.com/blog/nested-links\n */\nexport const LinkBox = forwardRef<LinkBoxProps, \"div\">((props, ref) => {\n  const { className, ...rest } = props\n\n  return (\n    <chakra.div\n      ref={ref}\n      position=\"relative\"\n      {...rest}\n      className={cx(\"chakra-linkbox\", className)}\n      __css={{\n        /* Elevate the links and abbreviations up */\n        \"a[href]:not(.chakra-linkbox__overlay), abbr[title]\": {\n          position: \"relative\",\n          zIndex: 1,\n        },\n      }}\n    />\n  )\n})\n"]},"metadata":{},"sourceType":"module"}