{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { callAllHandlers, mergeRefs } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport function useTooltip(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"openDelay\", \"closeDelay\", \"closeOnClick\", \"closeOnMouseDown\", \"onOpen\", \"onClose\", \"placement\", \"id\", \"isOpen\", \"defaultIsOpen\", \"arrowSize\", \"arrowShadowColor\", \"arrowPadding\", \"modifiers\", \"isDisabled\", \"gutter\", \"offset\"]);\n\n  var {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp\n  });\n  var popper = usePopper({\n    placement,\n    arrowSize,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset\n  });\n  var tooltipId = useId(id, \"tooltip\");\n  var ref = React.useRef(null);\n  var enterTimeout = React.useRef();\n  var exitTimeout = React.useRef();\n  var openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay);\n    }\n  }, [isDisabled, onOpen, openDelay]);\n  var closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n    }\n\n    exitTimeout.current = window.setTimeout(onClose, closeDelay);\n  }, [closeDelay, onClose]);\n  var onClick = React.useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay();\n    }\n  }, [closeOnClick, closeWithDelay]);\n  var onMouseDown = React.useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay();\n    }\n  }, [closeOnMouseDown, closeWithDelay]);\n\n  var onKeyDown = event => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay();\n    }\n  };\n\n  useEventListener(\"keydown\", onKeyDown);\n  React.useEffect(() => () => {\n    clearTimeout(enterTimeout.current);\n    clearTimeout(exitTimeout.current);\n  }, []);\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n\n  useEventListener(\"mouseleave\", closeWithDelay, ref.current);\n  var getTriggerProps = React.useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var triggerProps = _extends({}, props, {\n      onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n      onClick: callAllHandlers(props.onClick, onClick),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n      onFocus: callAllHandlers(props.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : undefined\n    });\n\n    return popper.getReferenceProps(triggerProps, mergeRefs(ref, _ref));\n  }, [openWithDelay, closeWithDelay, onMouseDown, isOpen, tooltipId, onClick, popper]);\n  var getTooltipProps = React.useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var tooltipProps = _extends({\n      ref: _ref\n    }, htmlProps, props, {\n      id: tooltipId,\n      role: \"tooltip\"\n    });\n\n    return tooltipProps;\n  }, [htmlProps, tooltipId]);\n  var getTooltipPositionerProps = React.useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var positionerProps = _extends({}, props, {\n      style: _extends({}, props.style, {\n        transformOrigin: popper.transformOrigin\n      })\n    });\n\n    return popper.getPopperProps(positionerProps, _ref);\n  }, [popper]);\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    transformOrigin: popper.transformOrigin,\n    placement: popper.placement,\n    getArrowWrapperProps: popper.getArrowWrapperProps,\n    getArrowProps: popper.getArrowProps\n  };\n}","map":{"version":3,"sources":["../../src/use-tooltip.ts"],"names":["props","openDelay","closeDelay","closeOnClick","onOpen","onClose","isOpen","arrowSize","offset","htmlProps","useDisclosure","onCloseProp","popper","usePopper","tooltipId","useId","ref","React","enterTimeout","exitTimeout","openWithDelay","window","closeWithDelay","clearTimeout","onClick","onMouseDown","onKeyDown","event","useEventListener","getTriggerProps","_ref","triggerProps","onMouseEnter","callAllHandlers","onFocus","onBlur","undefined","mergeRefs","getTooltipProps","tooltipProps","id","role","getTooltipPositionerProps","positionerProps","style","transformOrigin","show","hide","placement","getArrowWrapperProps","getArrowProps"],"mappings":"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","sourcesContent":["import { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\"\nimport { Placement, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { callAllHandlers, mergeRefs, PropGetter } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    | \"arrowSize\"\n    | \"modifiers\"\n    | \"gutter\"\n    | \"offset\"\n    | \"arrowShadowColor\"\n    | \"arrowPadding\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse\n   * is down\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * The Popper.js placement of the tooltip\n   */\n  placement?: Placement\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   */\n  defaultIsOpen?: boolean\n  isDisabled?: boolean\n}\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const popper = usePopper({\n    placement,\n    arrowSize,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset,\n  })\n\n  const tooltipId = useId(id, \"tooltip\")\n\n  const ref = React.useRef<any>(null)\n\n  const enterTimeout = React.useRef<number>()\n  const exitTimeout = React.useRef<number>()\n\n  const openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay)\n    }\n  }, [isDisabled, onOpen, openDelay])\n\n  const closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n    }\n    exitTimeout.current = window.setTimeout(onClose, closeDelay)\n  }, [closeDelay, onClose])\n\n  const onClick = React.useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay])\n\n  const onMouseDown = React.useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay()\n    }\n  }, [closeOnMouseDown, closeWithDelay])\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay()\n    }\n  }\n\n  useEventListener(\"keydown\", onKeyDown)\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(enterTimeout.current)\n      clearTimeout(exitTimeout.current)\n    },\n    [],\n  )\n\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n  useEventListener(\"mouseleave\", closeWithDelay, ref.current)\n\n  const getTriggerProps: PropGetter = React.useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps = {\n        ...props,\n        onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n        onClick: callAllHandlers(props.onClick, onClick),\n        onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n        onFocus: callAllHandlers(props.onFocus, openWithDelay),\n        onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n        \"aria-describedby\": isOpen ? tooltipId : undefined,\n      }\n\n      return popper.getReferenceProps(triggerProps, mergeRefs(ref, _ref))\n    },\n    [\n      openWithDelay,\n      closeWithDelay,\n      onMouseDown,\n      isOpen,\n      tooltipId,\n      onClick,\n      popper,\n    ],\n  )\n\n  const getTooltipProps: PropGetter = React.useCallback(\n    (props = {}, _ref = null) => {\n      const tooltipProps = {\n        ref: _ref,\n        ...htmlProps,\n        ...props,\n        id: tooltipId,\n        role: \"tooltip\",\n      }\n\n      return tooltipProps\n    },\n    [htmlProps, tooltipId],\n  )\n\n  const getTooltipPositionerProps: PropGetter = React.useCallback(\n    (props = {}, _ref = null) => {\n      const positionerProps = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popper.transformOrigin,\n        },\n      }\n      return popper.getPopperProps(positionerProps, _ref)\n    },\n    [popper],\n  )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    transformOrigin: popper.transformOrigin,\n    placement: popper.placement,\n    getArrowWrapperProps: popper.getArrowWrapperProps,\n    getArrowProps: popper.getArrowProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n"]},"metadata":{},"sourceType":"module"}