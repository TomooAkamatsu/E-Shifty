{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, useStyles } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar placements = {\n  left: {\n    marginRight: \"-1px\",\n    borderRightRadius: 0,\n    borderRightColor: \"transparent\"\n  },\n  right: {\n    marginLeft: \"-1px\",\n    borderLeftRadius: 0,\n    borderLeftColor: \"transparent\"\n  }\n};\nvar StyledAddon = chakra(\"div\", {\n  baseStyle: {\n    flex: \"0 0 auto\",\n    width: \"auto\",\n    display: \"flex\",\n    alignItems: \"center\",\n    whiteSpace: \"nowrap\"\n  }\n});\n/**\n * InputAddon\n *\n * Element to append or prepend to an input\n */\n\nexport var InputAddon = /*#__PURE__*/forwardRef((props, ref) => {\n  var _placements$placement;\n\n  var {\n    placement = \"left\"\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"placement\"]);\n\n  var placementStyles = (_placements$placement = placements[placement]) != null ? _placements$placement : {};\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(StyledAddon, _extends({\n    ref: ref\n  }, rest, {\n    __css: _extends({}, styles.addon, placementStyles)\n  }));\n});\n\nif (__DEV__) {\n  InputAddon.displayName = \"InputAddon\";\n}\n/**\n * InputLeftAddon\n *\n * Element to append to the left of an input\n */\n\n\nexport var InputLeftAddon = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(InputAddon, _extends({\n  ref: ref,\n  placement: \"left\"\n}, props, {\n  className: cx(\"chakra-input__left-addon\", props.className)\n})));\n\nif (__DEV__) {\n  InputLeftAddon.displayName = \"InputLeftAddon\";\n} // This is used in `input-group.tsx`\n\n\nInputLeftAddon.id = \"InputLeftAddon\";\n/**\n * InputRightAddon\n *\n * Element to append to the right of an input\n */\n\nexport var InputRightAddon = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(InputAddon, _extends({\n  ref: ref,\n  placement: \"right\"\n}, props, {\n  className: cx(\"chakra-input__right-addon\", props.className)\n})));\n\nif (__DEV__) {\n  InputRightAddon.displayName = \"InputRightAddon\";\n} // This is used in `input-group.tsx`\n\n\nInputRightAddon.id = \"InputRightAddon\";","map":{"version":3,"sources":["../../src/input-addon.tsx"],"names":["placements","left","marginRight","borderRightRadius","borderRightColor","right","marginLeft","borderLeftRadius","borderLeftColor","StyledAddon","chakra","baseStyle","flex","width","display","alignItems","whiteSpace","InputAddon","forwardRef","placement","rest","placementStyles","styles","useStyles","ref","InputLeftAddon","cx","props","InputRightAddon"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,EAAA,SAAA,QAAA,mBAAA;AAMA,SAAA,EAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAIA,IAAMA,UAAU,GAAG;EACjBC,IAAI,EAAE;IACJC,WAAW,EADP,MAAA;IAEJC,iBAAiB,EAFb,CAAA;IAGJC,gBAAgB,EAAE;EAHd,CADW;EAMjBC,KAAK,EAAE;IACLC,UAAU,EADL,MAAA;IAELC,gBAAgB,EAFX,CAAA;IAGLC,eAAe,EAAE;EAHZ;AANU,CAAnB;AAaA,IAAMC,WAAW,GAAGC,MAAM,CAAA,KAAA,EAAQ;EAChCC,SAAS,EAAE;IACTC,IAAI,EADK,UAAA;IAETC,KAAK,EAFI,MAAA;IAGTC,OAAO,EAHE,MAAA;IAITC,UAAU,EAJD,QAAA;IAKTC,UAAU,EAAE;EALH;AADqB,CAAR,CAA1B;AAcA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,UAAU,GAAA,aAAGC,UAAU,CAAyB,CAAA,KAAA,EAAA,GAAA,KAAgB;EAAA,IAAA,qBAAA;;EAC3E,IAAM;IAAEC,SAAS,GAAG;EAAd,IAAN,KAAA;EAAA,IAA+BC,IAA/B,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,WAAA,CAAA,CAAA;;EACA,IAAMC,eAAe,GAAA,CAAA,qBAAA,GAAGrB,UAAU,CAAb,SAAa,CAAb,KAAA,IAAA,GAAA,qBAAA,GAArB,EAAA;EACA,IAAMsB,MAAM,GAAGC,SAAf,EAAA;EAEA,OAAA,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA;IACE,GAAG,EAAEC;EADP,CAAA,EAAA,IAAA,EAAA;IAGE,KAAK,EAAA,QAAA,CAAA,EAAA,EACAF,MAAM,CADN,KAAA,EAAA,eAAA;EAHP,CAAA,CAAA,CADF;AALK,CAA6B,CAA7B;;AAiBP,IAAA,OAAA,EAAa;EACXL,UAAU,CAAVA,WAAAA,GAAAA,YAAAA;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAMQ,cAAc,GAAA,aAAGP,UAAU,CACtC,CAAA,KAAA,EAAA,GAAA,KAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA;EACE,GAAG,EADL,GAAA;EAEE,SAAS,EAAC;AAFZ,CAAA,EAAA,KAAA,EAAA;EAIE,SAAS,EAAEQ,EAAE,CAAA,0BAAA,EAA6BC,KAAK,CAAlC,SAAA;AAJf,CAAA,CAAA,CAFoC,CAAjC;;AAWP,IAAA,OAAA,EAAa;EACXF,cAAc,CAAdA,WAAAA,GAAAA,gBAAAA;EAGF;;;AACAA,cAAc,CAAdA,EAAAA,GAAAA,gBAAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMG,eAAe,GAAA,aAAGV,UAAU,CACvC,CAAA,KAAA,EAAA,GAAA,KAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA;EACE,GAAG,EADL,GAAA;EAEE,SAAS,EAAC;AAFZ,CAAA,EAAA,KAAA,EAAA;EAIE,SAAS,EAAEQ,EAAE,CAAA,2BAAA,EAA8BC,KAAK,CAAnC,SAAA;AAJf,CAAA,CAAA,CAFqC,CAAlC;;AAWP,IAAA,OAAA,EAAa;EACXC,eAAe,CAAfA,WAAAA,GAAAA,iBAAAA;EAGF;;;AACAA,eAAe,CAAfA,EAAAA,GAAAA,iBAAAA","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype Placement = \"left\" | \"right\"\n\nconst placements = {\n  left: {\n    marginRight: \"-1px\",\n    borderRightRadius: 0,\n    borderRightColor: \"transparent\",\n  },\n  right: {\n    marginLeft: \"-1px\",\n    borderLeftRadius: 0,\n    borderLeftColor: \"transparent\",\n  },\n}\n\nconst StyledAddon = chakra(\"div\", {\n  baseStyle: {\n    flex: \"0 0 auto\",\n    width: \"auto\",\n    display: \"flex\",\n    alignItems: \"center\",\n    whiteSpace: \"nowrap\",\n  },\n})\n\nexport interface InputAddonProps extends HTMLChakraProps<\"div\"> {\n  placement?: Placement\n}\n\n/**\n * InputAddon\n *\n * Element to append or prepend to an input\n */\nexport const InputAddon = forwardRef<InputAddonProps, \"div\">((props, ref) => {\n  const { placement = \"left\", ...rest } = props\n  const placementStyles = placements[placement] ?? {}\n  const styles = useStyles()\n\n  return (\n    <StyledAddon\n      ref={ref}\n      {...rest}\n      __css={{\n        ...styles.addon,\n        ...placementStyles,\n      }}\n    />\n  )\n})\n\nif (__DEV__) {\n  InputAddon.displayName = \"InputAddon\"\n}\n\n/**\n * InputLeftAddon\n *\n * Element to append to the left of an input\n */\nexport const InputLeftAddon = forwardRef<InputAddonProps, \"div\">(\n  (props, ref) => (\n    <InputAddon\n      ref={ref}\n      placement=\"left\"\n      {...props}\n      className={cx(\"chakra-input__left-addon\", props.className)}\n    />\n  ),\n)\n\nif (__DEV__) {\n  InputLeftAddon.displayName = \"InputLeftAddon\"\n}\n\n// This is used in `input-group.tsx`\nInputLeftAddon.id = \"InputLeftAddon\"\n\n/**\n * InputRightAddon\n *\n * Element to append to the right of an input\n */\nexport const InputRightAddon = forwardRef<InputAddonProps, \"div\">(\n  (props, ref) => (\n    <InputAddon\n      ref={ref}\n      placement=\"right\"\n      {...props}\n      className={cx(\"chakra-input__right-addon\", props.className)}\n    />\n  ),\n)\n\nif (__DEV__) {\n  InputRightAddon.displayName = \"InputRightAddon\"\n}\n\n// This is used in `input-group.tsx`\nInputRightAddon.id = \"InputRightAddon\"\n"]},"metadata":{},"sourceType":"module"}