{"ast":null,"code":"/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\";\nexport function assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value;\n  } catch (error) {\n    throw new Error(\"Cannot assign value '\" + value + \"' to ref '\" + ref + \"'\");\n  }\n}\n/**\n * React hook that merges react refs into a single memoized function\n *\n * @example\n * import React from \"react\";\n * import { useMergeRefs } from `@chakra-ui/hooks`;\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useMergeRefs(internalRef, ref)} />;\n * });\n */\n\nexport function useMergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n\n    return node => {\n      refs.forEach(ref => {\n        if (ref) assignRef(ref, node);\n      });\n    };\n  }, refs);\n}","map":{"version":3,"sources":["../../src/use-merge-refs.ts"],"names":["ref","refs","node","assignRef"],"mappings":"AAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAIA,OAAO,SAAA,SAAA,CAAA,GAAA,EAAA,KAAA,EAAoE;EACzE,IAAIA,GAAG,IAAP,IAAA,EAAiB;;EAEjB,IAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;IAC7BA,GAAG,CAAHA,KAAG,CAAHA;IACA;EACD;;EAED,IAAI;IACF;IACAA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;EAFF,CAAA,CAGE,OAAA,KAAA,EAAc;IACd,MAAM,IAAA,KAAA,CAAA,0BAAA,KAAA,GAAA,YAAA,GAAA,GAAA,GAAN,GAAM,CAAN;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,YAAA,GAA+D;EAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAnCC,IAAmC,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;IAAnCA,IAAmC,CAAA,IAAA,CAAnCA,GAAmC,SAAA,CAAA,IAAA,CAAnCA;EAAmC;;EACpE,OAAO,KAAK,CAAL,OAAA,CAAc,MAAM;IACzB,IAAIA,IAAI,CAAJA,KAAAA,CAAYD,GAAD,IAASA,GAAG,IAA3B,IAAIC,CAAJ,EAAsC;MACpC,OAAA,IAAA;IACD;;IACD,OAAQC,IAAD,IAAa;MAClBD,IAAI,CAAJA,OAAAA,CAAcD,GAAD,IAAS;QACpB,IAAA,GAAA,EAASG,SAAS,CAAA,GAAA,EAATA,IAAS,CAATA;MADXF,CAAAA;IADF,CAAA;EAJK,CAAA,EAAP,IAAO,CAAP;AAUD","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\n\ntype ReactRef<T> = React.Ref<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * React hook that merges react refs into a single memoized function\n *\n * @example\n * import React from \"react\";\n * import { useMergeRefs } from `@chakra-ui/hooks`;\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useMergeRefs(internalRef, ref)} />;\n * });\n */\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return React.useMemo(() => {\n    if (refs.every((ref) => ref == null)) {\n      return null\n    }\n    return (node: T) => {\n      refs.forEach((ref) => {\n        if (ref) assignRef(ref, node)\n      })\n    }\n  }, refs)\n}\n"]},"metadata":{},"sourceType":"module"}