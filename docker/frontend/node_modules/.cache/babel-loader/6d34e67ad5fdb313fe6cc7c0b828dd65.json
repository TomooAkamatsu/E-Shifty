{"ast":null,"code":"import { createParser, system } from \"../core\";\nimport { t } from \"../utils\";\nimport { transformGradient } from \"../utils/parse-gradient\";\n\nfunction transformBgClip(value) {\n  return value === \"text\" ? {\n    color: \"transparent\",\n    backgroundClip: \"text\"\n  } : {\n    backgroundClip: value\n  };\n}\n\nvar config = {\n  bg: t.colors(\"background\"),\n  bgColor: t.colors(\"backgroundColor\"),\n  background: t.colors(\"background\"),\n  backgroundColor: t.colors(\"backgroundColor\"),\n  backgroundImage: true,\n  backgroundSize: true,\n  backgroundPosition: true,\n  backgroundRepeat: true,\n  backgroundAttachment: true,\n  backgroundBlendMode: true,\n  backgroundClip: {\n    property: \"&\",\n    transform: transformBgClip\n  },\n  bgImage: t.prop(\"backgroundImage\"),\n  bgImg: t.prop(\"backgroundImage\"),\n  bgBlendMode: t.prop(\"backgroundBlendMode\"),\n  bgSize: t.prop(\"backgroundSize\"),\n  bgPosition: t.prop(\"backgroundPosition\"),\n  bgPos: t.prop(\"backgroundPosition\"),\n  bgRepeat: t.prop(\"backgroundRepeat\"),\n  bgAttachment: t.prop(\"backgroundAttachment\"),\n  bgGradient: {\n    property: \"backgroundImage\",\n    transform: transformGradient\n  },\n  bgClip: {\n    property: \"&\",\n    transform: transformBgClip\n  }\n};\nexport var background = system(config);\nexport var backgroundParser = createParser(config);","map":{"version":3,"sources":["../../../src/config/background.ts"],"names":["color","backgroundClip","value","config","bg","t","bgColor","background","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","backgroundAttachment","backgroundBlendMode","property","transform","transformBgClip","bgImage","bgImg","bgBlendMode","bgSize","bgPosition","bgPos","bgRepeat","bgAttachment","bgGradient","transformGradient","bgClip","system","backgroundParser","createParser"],"mappings":"AACA,SAAA,YAAA,EAAA,MAAA,QAAA,SAAA;AACA,SAAA,CAAA,QAAA,UAAA;AACA,SAAA,iBAAA,QAAA,yBAAA;;AAEA,SAAA,eAAA,CAAA,KAAA,EAAwC;EACtC,OAAO,KAAK,KAAL,MAAA,GACH;IAAEA,KAAK,EAAP,aAAA;IAAwBC,cAAc,EAAE;EAAxC,CADG,GAEH;IAAEA,cAAc,EAAEC;EAAlB,CAFJ;AAGD;;AAED,IAAMC,MAAc,GAAG;EACrBC,EAAE,EAAEC,CAAC,CAADA,MAAAA,CADiB,YACjBA,CADiB;EAErBC,OAAO,EAAED,CAAC,CAADA,MAAAA,CAFY,iBAEZA,CAFY;EAGrBE,UAAU,EAAEF,CAAC,CAADA,MAAAA,CAHS,YAGTA,CAHS;EAIrBG,eAAe,EAAEH,CAAC,CAADA,MAAAA,CAJI,iBAIJA,CAJI;EAKrBI,eAAe,EALM,IAAA;EAMrBC,cAAc,EANO,IAAA;EAOrBC,kBAAkB,EAPG,IAAA;EAQrBC,gBAAgB,EARK,IAAA;EASrBC,oBAAoB,EATC,IAAA;EAUrBC,mBAAmB,EAVE,IAAA;EAWrBb,cAAc,EAAE;IACdc,QAAQ,EADM,GAAA;IAEdC,SAAS,EAAEC;EAFG,CAXK;EAerBC,OAAO,EAAEb,CAAC,CAADA,IAAAA,CAfY,iBAeZA,CAfY;EAgBrBc,KAAK,EAAEd,CAAC,CAADA,IAAAA,CAhBc,iBAgBdA,CAhBc;EAiBrBe,WAAW,EAAEf,CAAC,CAADA,IAAAA,CAjBQ,qBAiBRA,CAjBQ;EAkBrBgB,MAAM,EAAEhB,CAAC,CAADA,IAAAA,CAlBa,gBAkBbA,CAlBa;EAmBrBiB,UAAU,EAAEjB,CAAC,CAADA,IAAAA,CAnBS,oBAmBTA,CAnBS;EAoBrBkB,KAAK,EAAElB,CAAC,CAADA,IAAAA,CApBc,oBAoBdA,CApBc;EAqBrBmB,QAAQ,EAAEnB,CAAC,CAADA,IAAAA,CArBW,kBAqBXA,CArBW;EAsBrBoB,YAAY,EAAEpB,CAAC,CAADA,IAAAA,CAtBO,sBAsBPA,CAtBO;EAuBrBqB,UAAU,EAAE;IACVX,QAAQ,EADE,iBAAA;IAEVC,SAAS,EAAEW;EAFD,CAvBS;EA2BrBC,MAAM,EAAE;IACNb,QAAQ,EADF,GAAA;IAENC,SAAS,EAAEC;EAFL;AA3Ba,CAAvB;AAwHA,OAAO,IAAMV,UAAU,GAAGsB,MAAM,CAAzB,MAAyB,CAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAGC,YAAY,CAArC,MAAqC,CAArC","sourcesContent":["import * as CSS from \"csstype\"\nimport { createParser, Config, system } from \"../core\"\nimport { Token, t } from \"../utils\"\nimport { transformGradient } from \"../utils/parse-gradient\"\n\nfunction transformBgClip(value: string) {\n  return value === \"text\"\n    ? { color: \"transparent\", backgroundClip: \"text\" }\n    : { backgroundClip: value }\n}\n\nconst config: Config = {\n  bg: t.colors(\"background\"),\n  bgColor: t.colors(\"backgroundColor\"),\n  background: t.colors(\"background\"),\n  backgroundColor: t.colors(\"backgroundColor\"),\n  backgroundImage: true,\n  backgroundSize: true,\n  backgroundPosition: true,\n  backgroundRepeat: true,\n  backgroundAttachment: true,\n  backgroundBlendMode: true,\n  backgroundClip: {\n    property: \"&\",\n    transform: transformBgClip,\n  },\n  bgImage: t.prop(\"backgroundImage\"),\n  bgImg: t.prop(\"backgroundImage\"),\n  bgBlendMode: t.prop(\"backgroundBlendMode\"),\n  bgSize: t.prop(\"backgroundSize\"),\n  bgPosition: t.prop(\"backgroundPosition\"),\n  bgPos: t.prop(\"backgroundPosition\"),\n  bgRepeat: t.prop(\"backgroundRepeat\"),\n  bgAttachment: t.prop(\"backgroundAttachment\"),\n  bgGradient: {\n    property: \"backgroundImage\",\n    transform: transformGradient,\n  },\n  bgClip: {\n    property: \"&\",\n    transform: transformBgClip,\n  },\n}\n\nexport interface BackgroundProps {\n  /**\n   * The CSS `background` property\n   */\n  bg?: Token<CSS.Property.Color, \"colors\">\n  /**\n   * The CSS `background-clip` property\n   */\n  bgClip?: Token<CSS.Property.BackgroundClip | \"text\">\n  /**\n   * The CSS `background-clip` property\n   */\n  backgroundClip?: Token<CSS.Property.BackgroundClip | \"text\">\n  /**\n   * The CSS `background` property\n   */\n  background?: Token<CSS.Property.Color, \"colors\">\n  /**\n   * The CSS `background-color` property\n   */\n  bgColor?: Token<CSS.Property.Color, \"colors\">\n  /**\n   * The CSS `background-color` property\n   */\n  backgroundColor?: Token<CSS.Property.Color, \"colors\">\n  /**\n   * The CSS `background-image` property\n   */\n  backgroundImage?: Token<CSS.Property.BackgroundImage>\n  /**\n   * The background-gradient shorthand\n   */\n  bgGradient?: Token<CSS.Property.BackgroundImage>\n  /**\n   * The CSS `background-blend-mode` property\n   */\n  backgroundBlendMode?: Token<CSS.Property.BackgroundBlendMode>\n  /**\n   * The CSS `background-blend-mode` property\n   */\n  bgBlendMode?: Token<CSS.Property.BackgroundBlendMode>\n  /**\n   * The CSS `background-size` property\n   */\n  backgroundSize?: Token<CSS.Property.BackgroundSize | number>\n  /**\n   * The CSS `background-position` property\n   */\n  bgPos?: Token<CSS.Property.BackgroundPosition | number>\n  /**\n   * The CSS `background-position` property\n   */\n  backgroundPosition?: Token<CSS.Property.BackgroundPosition | number>\n  /**\n   * The CSS `background-image` property\n   */\n  bgImage?: Token<CSS.Property.BackgroundImage>\n  /**\n   * The CSS `background-image` property\n   */\n  bgImg?: Token<CSS.Property.BackgroundImage>\n  /**\n   * The CSS `background-repeat` property\n   */\n  bgRepeat?: Token<CSS.Property.BackgroundRepeat>\n  /**\n   * The CSS `background-repeat` property\n   */\n  backgroundRepeat?: Token<CSS.Property.BackgroundRepeat>\n  /**\n   * The CSS `background-size` property\n   */\n  bgSize?: Token<CSS.Property.BackgroundSize | number>\n  /**\n   * The CSS `background-attachment` property\n   */\n  bgAttachment?: Token<CSS.Property.BackgroundAttachment>\n  /**\n   * The CSS `background-attachment` property\n   */\n  backgroundAttachment?: Token<CSS.Property.BackgroundAttachment>\n  /**\n   * The CSS `background-position` property\n   */\n  bgPosition?: Token<CSS.Property.BackgroundPosition | number>\n}\n\nexport const background = system(config)\nexport const backgroundParser = createParser(config)\n"]},"metadata":{},"sourceType":"module"}