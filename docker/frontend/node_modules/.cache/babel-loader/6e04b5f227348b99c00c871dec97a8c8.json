{"ast":null,"code":"import { isBrowser, noop } from \"@chakra-ui/utils\";\nvar classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\"\n};\n/**\n * SSR: Graceful fallback for the `body` element\n */\n\nvar mockBody = {\n  classList: {\n    add: noop,\n    remove: noop\n  }\n};\n\nvar getBody = () => isBrowser ? document.body : mockBody;\n/**\n * Function to add/remove class from `body` based on color mode\n */\n\n\nexport function syncBodyClassName(isDark) {\n  var body = getBody();\n  body.classList.add(isDark ? classNames.dark : classNames.light);\n  body.classList.remove(isDark ? classNames.light : classNames.dark);\n}\n/**\n * Check if JS media query matches the query string passed\n */\n\nfunction getMediaQuery(query) {\n  var mediaQueryList = window.matchMedia == null ? void 0 : window.matchMedia(query);\n\n  if (!mediaQueryList) {\n    return undefined;\n  }\n\n  return !!mediaQueryList.media === mediaQueryList.matches;\n}\n\nexport var queries = {\n  light: \"(prefers-color-scheme: light)\",\n  dark: \"(prefers-color-scheme: dark)\"\n};\nexport var lightQuery = queries.light;\nexport var darkQuery = queries.dark;\nexport function getColorScheme(fallback) {\n  var _getMediaQuery;\n\n  var isDark = (_getMediaQuery = getMediaQuery(queries.dark)) != null ? _getMediaQuery : fallback === \"dark\";\n  return isDark ? \"dark\" : \"light\";\n}\n/**\n * Adds system os color mode listener, and run the callback\n * once preference changes\n */\n\nexport function addListener(fn) {\n  if (!(\"matchMedia\" in window)) {\n    return noop;\n  }\n\n  var mediaQueryList = window.matchMedia(queries.dark);\n\n  var listener = () => {\n    fn(mediaQueryList.matches ? \"dark\" : \"light\");\n  };\n\n  listener();\n  mediaQueryList.addListener(listener);\n  return () => {\n    mediaQueryList.removeListener(listener);\n  };\n}\nexport var root = {\n  get: () => document.documentElement.style.getPropertyValue(\"--chakra-ui-color-mode\"),\n  set: mode => {\n    if (isBrowser) {\n      document.documentElement.style.setProperty(\"--chakra-ui-color-mode\", mode);\n    }\n  }\n};","map":{"version":3,"sources":["../../src/color-mode.utils.ts"],"names":["classNames","light","dark","mockBody","classList","add","remove","noop","getBody","isBrowser","document","body","isDark","mediaQueryList","window","queries","lightQuery","darkQuery","getMediaQuery","fallback","listener","fn","root","get","set","mode"],"mappings":"AAAA,SAAA,SAAA,EAAA,IAAA,QAAA,kBAAA;AAEA,IAAMA,UAAU,GAAG;EACjBC,KAAK,EADY,iBAAA;EAEjBC,IAAI,EAAE;AAFW,CAAnB;AAOA;AACA;AACA;;AACA,IAAMC,QAAQ,GAAG;EACfC,SAAS,EAAE;IAAEC,GAAG,EAAL,IAAA;IAAaC,MAAM,EAAEC;EAArB;AADI,CAAjB;;AAIA,IAAMC,OAAO,GAAG,MAAOC,SAAS,GAAGC,QAAQ,CAAX,IAAA,GAAhC,QAAA;AAEA;AACA;AACA;;;AACA,OAAO,SAAA,iBAAA,CAAA,MAAA,EAA4C;EACjD,IAAMC,IAAI,GAAGH,OAAb,EAAA;EACAG,IAAI,CAAJA,SAAAA,CAAAA,GAAAA,CAAmBC,MAAM,GAAGZ,UAAU,CAAb,IAAA,GAAqBA,UAAU,CAAxDW,KAAAA;EACAA,IAAI,CAAJA,SAAAA,CAAAA,MAAAA,CAAsBC,MAAM,GAAGZ,UAAU,CAAb,KAAA,GAAsBA,UAAU,CAA5DW,IAAAA;AACD;AAED;AACA;AACA;;AACA,SAAA,aAAA,CAAA,KAAA,EAAsC;EACpC,IAAME,cAAc,GAAGC,MAAM,CAAT,UAAGA,IAAH,IAAGA,GAAH,KAAA,CAAGA,GAAAA,MAAM,CAANA,UAAAA,CAAvB,KAAuBA,CAAvB;;EACA,IAAI,CAAJ,cAAA,EAAqB;IACnB,OAAA,SAAA;EACD;;EACD,OAAO,CAAC,CAACD,cAAc,CAAhB,KAAA,KAA2BA,cAAc,CAAhD,OAAA;AACD;;AAED,OAAO,IAAME,OAAO,GAAG;EACrBd,KAAK,EADgB,+BAAA;EAErBC,IAAI,EAAE;AAFe,CAAhB;AAKP,OAAO,IAAMc,UAAU,GAAGD,OAAO,CAA1B,KAAA;AACP,OAAO,IAAME,SAAS,GAAGF,OAAO,CAAzB,IAAA;AAEP,OAAO,SAAA,cAAA,CAAA,QAAA,EAA8C;EAAA,IAAA,cAAA;;EACnD,IAAMH,MAAM,GAAA,CAAA,cAAA,GAAGM,aAAa,CAACH,OAAO,CAAxB,IAAgB,CAAhB,KAAA,IAAA,GAAA,cAAA,GAAkCI,QAAQ,KAAtD,MAAA;EACA,OAAOP,MAAM,GAAA,MAAA,GAAb,OAAA;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAAA,WAAA,CAAA,EAAA,EAAmC;EACxC,IAAI,EAAE,gBAAN,MAAI,CAAJ,EAA+B;IAC7B,OAAA,IAAA;EACD;;EAED,IAAMC,cAAc,GAAGC,MAAM,CAANA,UAAAA,CAAkBC,OAAO,CAAhD,IAAuBD,CAAvB;;EAEA,IAAMM,QAAQ,GAAG,MAAM;IACrBC,EAAE,CAACR,cAAc,CAAdA,OAAAA,GAAAA,MAAAA,GAAHQ,OAAE,CAAFA;EADF,CAAA;;EAIAD,QAAQ;EACRP,cAAc,CAAdA,WAAAA,CAAAA,QAAAA;EAEA,OAAO,MAAM;IACXA,cAAc,CAAdA,cAAAA,CAAAA,QAAAA;EADF,CAAA;AAGD;AAED,OAAO,IAAMS,IAAI,GAAG;EAClBC,GAAG,EAAE,MACHb,QAAQ,CAARA,eAAAA,CAAAA,KAAAA,CAAAA,gBAAAA,CAFgB,wBAEhBA,CAFgB;EAKlBc,GAAG,EAAGC,IAAD,IAAqB;IACxB,IAAA,SAAA,EAAe;MACbf,QAAQ,CAARA,eAAAA,CAAAA,KAAAA,CAAAA,WAAAA,CAAAA,wBAAAA,EAAAA,IAAAA;IACD;EACF;AATiB,CAAb","sourcesContent":["import { isBrowser, noop } from \"@chakra-ui/utils\"\n\nconst classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\",\n}\n\nexport type ColorMode = \"light\" | \"dark\"\n\n/**\n * SSR: Graceful fallback for the `body` element\n */\nconst mockBody = {\n  classList: { add: noop, remove: noop },\n}\n\nconst getBody = () => (isBrowser ? document.body : mockBody)\n\n/**\n * Function to add/remove class from `body` based on color mode\n */\nexport function syncBodyClassName(isDark: boolean) {\n  const body = getBody()\n  body.classList.add(isDark ? classNames.dark : classNames.light)\n  body.classList.remove(isDark ? classNames.light : classNames.dark)\n}\n\n/**\n * Check if JS media query matches the query string passed\n */\nfunction getMediaQuery(query: string) {\n  const mediaQueryList = window.matchMedia?.(query)\n  if (!mediaQueryList) {\n    return undefined\n  }\n  return !!mediaQueryList.media === mediaQueryList.matches\n}\n\nexport const queries = {\n  light: \"(prefers-color-scheme: light)\",\n  dark: \"(prefers-color-scheme: dark)\",\n}\n\nexport const lightQuery = queries.light\nexport const darkQuery = queries.dark\n\nexport function getColorScheme(fallback?: ColorMode) {\n  const isDark = getMediaQuery(queries.dark) ?? fallback === \"dark\"\n  return isDark ? \"dark\" : \"light\"\n}\n\n/**\n * Adds system os color mode listener, and run the callback\n * once preference changes\n */\nexport function addListener(fn: Function) {\n  if (!(\"matchMedia\" in window)) {\n    return noop\n  }\n\n  const mediaQueryList = window.matchMedia(queries.dark)\n\n  const listener = () => {\n    fn(mediaQueryList.matches ? \"dark\" : \"light\")\n  }\n\n  listener()\n  mediaQueryList.addListener(listener)\n\n  return () => {\n    mediaQueryList.removeListener(listener)\n  }\n}\n\nexport const root = {\n  get: () =>\n    document.documentElement.style.getPropertyValue(\n      \"--chakra-ui-color-mode\",\n    ) as ColorMode,\n  set: (mode: ColorMode) => {\n    if (isBrowser) {\n      document.documentElement.style.setProperty(\"--chakra-ui-color-mode\", mode)\n    }\n  },\n}\n"]},"metadata":{},"sourceType":"module"}