{"ast":null,"code":"import { useControllableProp } from \"@chakra-ui/hooks\";\nimport { countDecimalPlaces, clampValue, maxSafeInteger, minSafeInteger, toPrecision } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\nexport function useCounter(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    keepWithinRange = true\n  } = props;\n  var [valueState, setValue] = useState(() => {\n    if (defaultValue == null) return \"\";\n    return cast(defaultValue, stepProp, precisionProp);\n  });\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n\n  var [isControlled, value] = useControllableProp(valueProp, valueState);\n  var decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  var precision = precisionProp != null ? precisionProp : decimalPlaces;\n  var update = useCallback(next => {\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n\n    onChange == null ? void 0 : onChange(next.toString(), parse(next));\n  }, [onChange, isControlled]); // Function to clamp the value and round it to the precision\n\n  var clamp = useCallback(value => {\n    var nextValue = value;\n\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  var increment = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    var next;\n    /**\n     * Let's follow the native browser behavior for\n     * scenarios where the input starts empty (\"\")\n     */\n\n    if (value === \"\") {\n      /**\n       * If `min` is set, native input, starts at the `min`.\n       * Else, it starts at `step`\n       */\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  var decrement = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    var next; // Same thing here. We'll follow native implementation\n\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  var reset = useCallback(() => {\n    var next;\n\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp);\n    }\n\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update]);\n  var castValue = useCallback(value => {\n    update(cast(value, stepProp, precision));\n  }, [precision, stepProp, update]);\n  var valueAsNumber = parse(value);\n  /**\n   * Common range checks\n   */\n\n  var isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  var isAtMax = valueAsNumber === max;\n  var isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue\n  };\n}\n\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\n\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\n\nfunction cast(value, step, precision) {\n  var decimalPlaces = getDecimalPlaces(parse(value), step);\n  return toPrecision(parse(value), precision != null ? precision : decimalPlaces);\n}","map":{"version":3,"sources":["../../src/use-counter.ts"],"names":["props","precision","value","step","stepProp","min","max","keepWithinRange","useState","defaultValue","cast","useControllableProp","decimalPlaces","getDecimalPlaces","parse","precisionProp","update","useCallback","next","setValue","onChange","clamp","nextValue","clampValue","toPrecision","increment","decrement","reset","castValue","valueAsNumber","isOutOfRange","isAtMax","isAtMin","parseFloat","Math","countDecimalPlaces"],"mappings":"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","sourcesContent":["import { useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  countDecimalPlaces,\n  clampValue,\n  maxSafeInteger,\n  minSafeInteger,\n  toPrecision,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseCounterProps {\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?(valueAsString: string, valueAsNumber: number): void\n  /**\n   * The number of decimal points used to round the value\n   */\n  precision?: number\n  /**\n   * The initial value of the counter. Should be less than `max` and greater than `min`\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * The value of the counter. Should be less than `max` and greater than `min`\n   */\n  value?: StringOrNumber\n  /**\n   * The step used to increment or decrement the value\n   * @default 1\n   */\n  step?: number\n  /**\n   * The minimum value of the counter\n   * @default -Infinity\n   */\n  min?: number\n  /**\n   * The maximum value of the counter\n   * @default Infinity\n   */\n  max?: number\n  /**\n   * This controls the value update behavior in general.\n   *\n   * - If `true` and you use the stepper or up/down arrow keys,\n   *  the value will not exceed the `max` or go lower than `min`\n   *\n   * - If `false`, the value will be allowed to go out of range.\n   *\n   * @default true\n   */\n  keepWithinRange?: boolean\n}\n\nexport function useCounter(props: UseCounterProps = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    keepWithinRange = true,\n  } = props\n\n  const [valueState, setValue] = useState<StringOrNumber>(() => {\n    if (defaultValue == null) return \"\"\n    return cast(defaultValue, stepProp, precisionProp)\n  })\n\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp)\n\n  const precision = precisionProp ?? decimalPlaces\n\n  const update = useCallback(\n    (next: StringOrNumber) => {\n      if (!isControlled) {\n        setValue(next.toString())\n      }\n      onChange?.(next.toString(), parse(next))\n    },\n    [onChange, isControlled],\n  )\n\n  // Function to clamp the value and round it to the precision\n  const clamp = useCallback(\n    (value: number) => {\n      let nextValue = value\n\n      if (keepWithinRange) {\n        nextValue = clampValue(nextValue, min, max)\n      }\n\n      return toPrecision(nextValue, precision)\n    },\n    [precision, keepWithinRange, max, min],\n  )\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      let next: StringOrNumber\n\n      /**\n       * Let's follow the native browser behavior for\n       * scenarios where the input starts empty (\"\")\n       */\n      if (value === \"\") {\n        /**\n         * If `min` is set, native input, starts at the `min`.\n         * Else, it starts at `step`\n         */\n        next = parse(step)\n      } else {\n        next = parse(value) + step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      let next: StringOrNumber\n\n      // Same thing here. We'll follow native implementation\n      if (value === \"\") {\n        next = parse(-step)\n      } else {\n        next = parse(value) - step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const reset = useCallback(() => {\n    let next: StringOrNumber\n    if (defaultValue == null) {\n      next = \"\"\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp)\n    }\n    update(next)\n  }, [defaultValue, precisionProp, stepProp, update])\n\n  const castValue = useCallback(\n    (value: StringOrNumber) => {\n      update(cast(value, stepProp, precision))\n    },\n    [precision, stepProp, update],\n  )\n\n  const valueAsNumber = parse(value)\n\n  /**\n   * Common range checks\n   */\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min\n  const isAtMax = valueAsNumber === max\n  const isAtMin = valueAsNumber === min\n\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n  }\n}\n\nexport type UseCounterReturn = ReturnType<typeof useCounter>\n\nfunction parse(value: StringOrNumber) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"))\n}\n\nfunction getDecimalPlaces(value: number, step: number) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value))\n}\n\nfunction cast(value: StringOrNumber, step: number, precision?: number) {\n  const decimalPlaces = getDecimalPlaces(parse(value), step)\n  return toPrecision(parse(value), precision ?? decimalPlaces)\n}\n"]},"metadata":{},"sourceType":"module"}