{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useControllableState, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, isEmpty, mergeRefs, normalizeEventKey } from \"@chakra-ui/utils\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/docs/editable\n */\n\nexport function useEditable(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditProp\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onChange\", \"onCancel\", \"onSubmit\", \"value\", \"isDisabled\", \"defaultValue\", \"startWithEditView\", \"isPreviewFocusable\", \"submitOnBlur\", \"selectAllOnFocus\", \"placeholder\", \"onEdit\"]);\n\n  var defaultIsEditing = Boolean(startWithEditView && !isDisabled);\n  var [isEditing, setIsEditing] = useState(defaultIsEditing);\n  var [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n\n  var [prevValue, setPrevValue] = useState(value);\n  /**\n   * Ref to help focus the input in edit mode\n   */\n\n  var inputRef = useRef(null);\n  var previewRef = useRef(null);\n  var editButtonRef = useRef(null);\n  var isInteractive = !isEditing || !isDisabled;\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      var _editButtonRef$curren;\n\n      (_editButtonRef$curren = editButtonRef.current) == null ? void 0 : _editButtonRef$curren.focus();\n      return;\n    }\n\n    if (selectAllOnFocus) {\n      var _inputRef$current;\n\n      (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.select();\n    } else {\n      var _inputRef$current2;\n\n      (_inputRef$current2 = inputRef.current) == null ? void 0 : _inputRef$current2.focus();\n    }\n\n    onEditProp == null ? void 0 : onEditProp();\n  }, [isEditing, onEditProp, selectAllOnFocus]);\n  var onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true);\n    }\n  }, [isInteractive]);\n  var onCancel = useCallback(() => {\n    setIsEditing(false);\n    setValue(prevValue);\n    onCancelProp == null ? void 0 : onCancelProp(prevValue);\n  }, [onCancelProp, setValue, prevValue]);\n  var onSubmit = useCallback(() => {\n    setIsEditing(false);\n    setPrevValue(value);\n    onSubmitProp == null ? void 0 : onSubmitProp(value);\n  }, [value, onSubmitProp]);\n  var onChange = useCallback(event => {\n    setValue(event.target.value);\n  }, [setValue]);\n  var onKeyDown = useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Escape: onCancel,\n      Enter: event => {\n        if (!event.shiftKey && !event.metaKey) {\n          onSubmit();\n        }\n      }\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel, onSubmit]);\n  var isValueEmpty = isEmpty(value);\n\n  var getTabIndex = () => {\n    var shouldHaveTabIndex = isInteractive && isPreviewFocusable;\n    return shouldHaveTabIndex ? 0 : undefined;\n  };\n\n  var onBlur = useCallback(() => {\n    if (submitOnBlur) {\n      onSubmit();\n    }\n  }, [submitOnBlur, onSubmit]);\n\n  var getPreviewProps = function getPreviewProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, previewRef),\n      children: isValueEmpty ? placeholder : value,\n      hidden: isEditing,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      tabIndex: getTabIndex(),\n      onFocus: callAllHandlers(props.onFocus, onEdit)\n    });\n  };\n\n  var getInputProps = function getInputProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n    });\n  };\n\n  var getEditButtonProps = function getEditButtonProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      \"aria-label\": \"Edit\"\n    }, props, {\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef)\n    });\n  };\n\n  var getSubmitButtonProps = function getSubmitButtonProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      \"aria-label\": \"Submit\",\n      ref,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit)\n    });\n  };\n\n  var getCancelButtonProps = function getCancelButtonProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      \"aria-label\": \"Cancel\"\n    }, props, {\n      ref,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel)\n    });\n  };\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps\n  };\n}","map":{"version":3,"sources":["../../src/use-editable.ts"],"names":["props","onChange","onCancel","onSubmit","value","isPreviewFocusable","submitOnBlur","selectAllOnFocus","onEdit","onEditProp","htmlProps","defaultIsEditing","Boolean","startWithEditView","useState","useControllableState","defaultValue","onChangeProp","inputRef","useRef","previewRef","editButtonRef","isInteractive","useUpdateEffect","useCallback","setIsEditing","setValue","onCancelProp","setPrevValue","onSubmitProp","event","onKeyDown","eventKey","normalizeEventKey","keyMap","Escape","Enter","action","isValueEmpty","isEmpty","getTabIndex","shouldHaveTabIndex","onBlur","getPreviewProps","ref","mergeRefs","children","hidden","ariaAttr","tabIndex","onFocus","callAllHandlers","getInputProps","disabled","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,oBAAA,EAAA,eAAA,QAAA,kBAAA;AACA,SAAA,QAAA,EAAA,eAAA,EAAA,OAAA,EAAA,SAAA,EAAA,iBAAA,QAAA,kBAAA;AASA,SAAA,WAAA,EAAA,MAAA,EAAA,QAAA,QAAA,OAAA;AA0DA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,WAAA,CAAA,KAAA,EAAmD;EAAA,IAA9BA,KAA8B,KAAA,KAAA,CAAA,EAAA;IAA9BA,KAA8B,GAAJ,EAA1BA;EAA8B;;EACxD,IAAM;IACJC,QAAQ,EADJ,YAAA;IAEJC,QAAQ,EAFJ,YAAA;IAGJC,QAAQ,EAHJ,YAAA;IAIJC,KAAK,EAJD,SAAA;IAAA,UAAA;IAAA,YAAA;IAAA,iBAAA;IAQJC,kBAAkB,GARd,IAAA;IASJC,YAAY,GATR,IAAA;IAUJC,gBAAgB,GAVZ,IAAA;IAAA,WAAA;IAYJC,MAAM,EAAEC;EAZJ,IAAN,KAAA;EAAA,IAaKC,SAbL,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,OAAA,EAAA,YAAA,EAAA,cAAA,EAAA,mBAAA,EAAA,oBAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,QAAA,CAAA,CAAA;;EAgBA,IAAMC,gBAAgB,GAAGC,OAAO,CAACC,iBAAiB,IAAI,CAAtD,UAAgC,CAAhC;EAEA,IAAM,CAAA,SAAA,EAAA,YAAA,IAA4BC,QAAQ,CAA1C,gBAA0C,CAA1C;EAEA,IAAM,CAAA,KAAA,EAAA,QAAA,IAAoBC,oBAAoB,CAAC;IAC7CC,YAAY,EAAEA,YAAY,IADmB,EAAA;IAE7CZ,KAAK,EAFwC,SAAA;IAG7CH,QAAQ,EAAEgB;EAHmC,CAAD,CAA9C;EAMA;AACF;AACA;AACA;;EACE,IAAM,CAAA,SAAA,EAAA,YAAA,IAA4BH,QAAQ,CAA1C,KAA0C,CAA1C;EAEA;AACF;AACA;;EACE,IAAMI,QAAQ,GAAGC,MAAM,CAAvB,IAAuB,CAAvB;EACA,IAAMC,UAAU,GAAGD,MAAM,CAAzB,IAAyB,CAAzB;EAEA,IAAME,aAAa,GAAGF,MAAM,CAA5B,IAA4B,CAA5B;EAEA,IAAMG,aAAa,GAAG,CAAA,SAAA,IAAc,CAApC,UAAA;EAEAC,eAAe,CAAC,MAAM;IACpB,IAAI,CAAJ,SAAA,EAAgB;MAAA,IAAA,qBAAA;;MACd,CAAA,qBAAA,GAAA,aAAa,CAAb,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,KAAA,EAAA;MACA;IACD;;IAED,IAAA,gBAAA,EAAsB;MAAA,IAAA,iBAAA;;MACpB,CAAA,iBAAA,GAAA,QAAQ,CAAR,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAA,MAAA,EAAA;IADF,CAAA,MAEO;MAAA,IAAA,kBAAA;;MACL,CAAA,kBAAA,GAAA,QAAQ,CAAR,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,kBAAA,CAAA,KAAA,EAAA;IACD;;IAEDd,UAAU,IAAVA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,EAAVA;EAZa,CAAA,EAaZ,CAAA,SAAA,EAAA,UAAA,EAbHc,gBAaG,CAbY,CAAfA;EAeA,IAAMf,MAAM,GAAGgB,WAAW,CAAC,MAAM;IAC/B,IAAA,aAAA,EAAmB;MACjBC,YAAY,CAAZA,IAAY,CAAZA;IACD;EAHuB,CAAA,EAIvB,CAJH,aAIG,CAJuB,CAA1B;EAMA,IAAMvB,QAAQ,GAAGsB,WAAW,CAAC,MAAM;IACjCC,YAAY,CAAZA,KAAY,CAAZA;IACAC,QAAQ,CAARA,SAAQ,CAARA;IACAC,YAAY,IAAZA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAZA,SAAY,CAAZA;EAH0B,CAAA,EAIzB,CAAA,YAAA,EAAA,QAAA,EAJH,SAIG,CAJyB,CAA5B;EAMA,IAAMxB,QAAQ,GAAGqB,WAAW,CAAC,MAAM;IACjCC,YAAY,CAAZA,KAAY,CAAZA;IACAG,YAAY,CAAZA,KAAY,CAAZA;IACAC,YAAY,IAAZA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAZA,KAAY,CAAZA;EAH0B,CAAA,EAIzB,CAAA,KAAA,EAJH,YAIG,CAJyB,CAA5B;EAMA,IAAM5B,QAAQ,GAAGuB,WAAW,CACzBM,KAAD,IAA0C;IACxCJ,QAAQ,CAACI,KAAK,CAALA,MAAAA,CAATJ,KAAQ,CAARA;EAFwB,CAAA,EAI1B,CAJF,QAIE,CAJ0B,CAA5B;EAOA,IAAMK,SAAS,GAAGP,WAAW,CAC1BM,KAAD,IAAgC;IAC9B,IAAME,QAAQ,GAAGC,iBAAiB,CAAlC,KAAkC,CAAlC;IAEA,IAAMC,MAAmB,GAAG;MAC1BC,MAAM,EADoB,QAAA;MAE1BC,KAAK,EAAGN,KAAD,IAAW;QAChB,IAAI,CAACA,KAAK,CAAN,QAAA,IAAmB,CAACA,KAAK,CAA7B,OAAA,EAAuC;UACrC3B,QAAQ;QACT;MACF;IANyB,CAA5B;IASA,IAAMkC,MAAM,GAAGH,MAAM,CAArB,QAAqB,CAArB;;IACA,IAAA,MAAA,EAAY;MACVJ,KAAK,CAALA,cAAAA;MACAO,MAAM,CAANA,KAAM,CAANA;IACD;EAjBwB,CAAA,EAmB3B,CAAA,QAAA,EAnBF,QAmBE,CAnB2B,CAA7B;EAsBA,IAAMC,YAAY,GAAGC,OAAO,CAA5B,KAA4B,CAA5B;;EAEA,IAAMC,WAAW,GAAG,MAAM;IACxB,IAAMC,kBAAkB,GAAGnB,aAAa,IAAxC,kBAAA;IACA,OAAOmB,kBAAkB,GAAA,CAAA,GAAzB,SAAA;EAFF,CAAA;;EAKA,IAAMC,MAAM,GAAGlB,WAAW,CAAC,MAAM;IAC/B,IAAA,YAAA,EAAkB;MAChBrB,QAAQ;IACT;EAHuB,CAAA,EAIvB,CAAA,YAAA,EAJH,QAIG,CAJuB,CAA1B;;EAMA,IAAMwC,eAA2B,GAAG,SAA9BA,eAA8B,CAAA,KAAA,EAAA,GAAA,EAAA;IAAA,IAAC3C,KAAD,KAAA,KAAA,CAAA,EAAA;MAACA,KAAD,GAAA,EAACA;IAAD;;IAAA,IAAa4C,GAAb,KAAA,KAAA,CAAA,EAAA;MAAaA,GAAb,GAAA,IAAaA;IAAb;;IAAA,OAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;MAElCA,GAAG,EAAEC,SAAS,CAAA,GAAA,EAFoB,UAEpB,CAFoB;MAGlCC,QAAQ,EAAER,YAAY,GAAA,WAAA,GAHY,KAAA;MAIlCS,MAAM,EAJ4B,SAAA;MAKlC,iBAAiBC,QAAQ,CALS,UAKT,CALS;MAMlCC,QAAQ,EAAET,WANwB,EAAA;MAOlCU,OAAO,EAAEC,eAAe,CAACnD,KAAK,CAAN,OAAA,EAAA,MAAA;IAPU,CAAA,CAAA;EAApC,CAAA;;EAUA,IAAMoD,aAAyB,GAAG,SAA5BA,aAA4B,CAAA,KAAA,EAAA,GAAA,EAAA;IAAA,IAACpD,KAAD,KAAA,KAAA,CAAA,EAAA;MAACA,KAAD,GAAA,EAACA;IAAD;;IAAA,IAAa4C,GAAb,KAAA,KAAA,CAAA,EAAA;MAAaA,GAAb,GAAA,IAAaA;IAAb;;IAAA,OAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;MAEhCG,MAAM,EAAE,CAFwB,SAAA;MAAA,WAAA;MAIhCH,GAAG,EAAEC,SAAS,CAAA,GAAA,EAJkB,QAIlB,CAJkB;MAKhCQ,QAAQ,EALwB,UAAA;MAMhC,iBAAiBL,QAAQ,CANO,UAMP,CANO;MAAA,KAAA;MAQhCN,MAAM,EAAES,eAAe,CAACnD,KAAK,CAAN,MAAA,EARS,MAQT,CARS;MAShCC,QAAQ,EAAEkD,eAAe,CAACnD,KAAK,CAAN,QAAA,EATO,QASP,CATO;MAUhC+B,SAAS,EAAEoB,eAAe,CAACnD,KAAK,CAAN,SAAA,EAAA,SAAA;IAVM,CAAA,CAAA;EAAlC,CAAA;;EAaA,IAAMsD,kBAA8B,GAAG,SAAjCA,kBAAiC,CAAA,KAAA,EAAA,GAAA,EAAA;IAAA,IAACtD,KAAD,KAAA,KAAA,CAAA,EAAA;MAACA,KAAD,GAAA,EAACA;IAAD;;IAAA,IAAa4C,GAAb,KAAA,KAAA,CAAA,EAAA;MAAaA,GAAb,GAAA,IAAaA;IAAb;;IAAA,OAAA,QAAA,CAAA;MACrC,cAAc;IADuB,CAAA,EAAA,KAAA,EAAA;MAGrCW,IAAI,EAHiC,QAAA;MAIrCC,OAAO,EAAEL,eAAe,CAACnD,KAAK,CAAN,OAAA,EAJa,MAIb,CAJa;MAKrC4C,GAAG,EAAEC,SAAS,CAAA,GAAA,EAAA,aAAA;IALuB,CAAA,CAAA;EAAvC,CAAA;;EAQA,IAAMY,oBAAgC,GAAG,SAAnCA,oBAAmC,CAAA,KAAA,EAAA,GAAA,EAAA;IAAA,IAACzD,KAAD,KAAA,KAAA,CAAA,EAAA;MAACA,KAAD,GAAA,EAACA;IAAD;;IAAA,IAAa4C,GAAb,KAAA,KAAA,CAAA,EAAA;MAAaA,GAAb,GAAA,IAAaA;IAAb;;IAAA,OAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;MAEvC,cAFuC,QAAA;MAAA,GAAA;MAIvCW,IAAI,EAJmC,QAAA;MAKvCC,OAAO,EAAEL,eAAe,CAACnD,KAAK,CAAN,OAAA,EAAA,QAAA;IALe,CAAA,CAAA;EAAzC,CAAA;;EAQA,IAAM0D,oBAAgC,GAAG,SAAnCA,oBAAmC,CAAA,KAAA,EAAA,GAAA,EAAA;IAAA,IAAC1D,KAAD,KAAA,KAAA,CAAA,EAAA;MAACA,KAAD,GAAA,EAACA;IAAD;;IAAA,IAAa4C,GAAb,KAAA,KAAA,CAAA,EAAA;MAAaA,GAAb,GAAA,IAAaA;IAAb;;IAAA,OAAA,QAAA,CAAA;MACvC,cAAc;IADyB,CAAA,EAAA,KAAA,EAAA;MAAA,GAAA;MAIvCW,IAAI,EAJmC,QAAA;MAKvCC,OAAO,EAAEL,eAAe,CAACnD,KAAK,CAAN,OAAA,EAAA,QAAA;IALe,CAAA,CAAA;EAAzC,CAAA;;EAQA,OAAO;IAAA,SAAA;IAAA,UAAA;IAAA,YAAA;IAAA,KAAA;IAAA,MAAA;IAAA,QAAA;IAAA,QAAA;IAAA,eAAA;IAAA,aAAA;IAAA,kBAAA;IAAA,oBAAA;IAAA,oBAAA;IAaLU;EAbK,CAAP;AAeD","sourcesContent":["import { useControllableState, useUpdateEffect } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  EventKeyMap,\n  isEmpty,\n  mergeRefs,\n  normalizeEventKey,\n  PropGetter,\n} from \"@chakra-ui/utils\"\nimport { ChangeEvent, useCallback, useRef, useState } from \"react\"\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can recieve focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/docs/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditProp,\n    ...htmlProps\n  } = props\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n\n  const isInteractive = !isEditing || !isDisabled\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      editButtonRef.current?.focus()\n      return\n    }\n\n    if (selectAllOnFocus) {\n      inputRef.current?.select()\n    } else {\n      inputRef.current?.focus()\n    }\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n  }, [onCancelProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n  }, [value, onSubmitProp])\n\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      setValue(event.target.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const isValueEmpty = isEmpty(value)\n\n  const getTabIndex = () => {\n    const shouldHaveTabIndex = isInteractive && isPreviewFocusable\n    return shouldHaveTabIndex ? 0 : undefined\n  }\n\n  const onBlur = useCallback(() => {\n    if (submitOnBlur) {\n      onSubmit()\n    }\n  }, [submitOnBlur, onSubmit])\n\n  const getPreviewProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref: mergeRefs(ref, previewRef),\n    children: isValueEmpty ? placeholder : value,\n    hidden: isEditing,\n    \"aria-disabled\": ariaAttr(isDisabled),\n    tabIndex: getTabIndex(),\n    onFocus: callAllHandlers(props.onFocus, onEdit),\n  })\n\n  const getInputProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    hidden: !isEditing,\n    placeholder,\n    ref: mergeRefs(ref, inputRef),\n    disabled: isDisabled,\n    \"aria-disabled\": ariaAttr(isDisabled),\n    value,\n    onBlur: callAllHandlers(props.onBlur, onBlur),\n    onChange: callAllHandlers(props.onChange, onChange),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  })\n\n  const getEditButtonProps: PropGetter = (props = {}, ref = null) => ({\n    \"aria-label\": \"Edit\",\n    ...props,\n    type: \"button\",\n    onClick: callAllHandlers(props.onClick, onEdit),\n    ref: mergeRefs(ref, editButtonRef),\n  })\n\n  const getSubmitButtonProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    \"aria-label\": \"Submit\",\n    ref,\n    type: \"button\",\n    onClick: callAllHandlers(props.onClick, onSubmit),\n  })\n\n  const getCancelButtonProps: PropGetter = (props = {}, ref = null) => ({\n    \"aria-label\": \"Cancel\",\n    ...props,\n    ref,\n    type: \"button\",\n    onClick: callAllHandlers(props.onClick, onCancel),\n  })\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"]},"metadata":{},"sourceType":"module"}