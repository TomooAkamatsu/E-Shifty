{"ast":null,"code":"import { isArray, isObject } from \"./assertion\";\nimport { objectKeys } from \"./object\";\nimport { getLastItem } from \"./array\";\nexport var breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\"]);\nexport function mapResponsive(prop, mapper) {\n  if (isArray(prop)) {\n    return prop.map(item => {\n      if (item === null) {\n        return null;\n      }\n\n      return mapper(item);\n    });\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n\n  if (prop != null) {\n    return mapper(prop);\n  }\n\n  return null;\n}\nexport function objectToArrayNotation(obj, bps) {\n  if (bps === void 0) {\n    bps = breakpoints;\n  }\n\n  var result = bps.map(br => {\n    var _obj$br;\n\n    return (_obj$br = obj[br]) != null ? _obj$br : null;\n  });\n\n  while (getLastItem(result) === null) {\n    result.pop();\n  }\n\n  return result;\n}\nexport function arrayToObjectNotation(values, bps) {\n  if (bps === void 0) {\n    bps = breakpoints;\n  }\n\n  var result = {};\n  values.forEach((value, index) => {\n    var key = bps[index];\n    if (value == null) return;\n    result[key] = value;\n  });\n  return result;\n}\nexport function isResponsiveObjectLike(obj, bps) {\n  if (bps === void 0) {\n    bps = breakpoints;\n  }\n\n  var keys = Object.keys(obj);\n  return keys.length > 0 && keys.every(key => bps.includes(key));\n}","map":{"version":3,"sources":["../../src/responsive.ts"],"names":["breakpoints","Object","isArray","item","mapper","isObject","result","prop","bps","br","obj","getLastItem","values","key","value","keys"],"mappings":"AAAA,SAAA,OAAA,EAAA,QAAA,QAAA,aAAA;AAEA,SAAA,UAAA,QAAA,UAAA;AACA,SAAA,WAAA,QAAA,SAAA;AAEA,OAAO,IAAMA,WAAW,GAAGC,MAAM,CAANA,MAAAA,CAAc,CAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAlC,IAAkC,CAAdA,CAApB;AAEP,OAAO,SAAA,aAAA,CAAA,IAAA,EAAA,MAAA,EAA6D;EAClE,IAAIC,OAAO,CAAX,IAAW,CAAX,EAAmB;IACjB,OAAO,IAAI,CAAJ,GAAA,CAAUC,IAAD,IAAU;MACxB,IAAIA,IAAI,KAAR,IAAA,EAAmB;QACjB,OAAA,IAAA;MACD;;MACD,OAAOC,MAAM,CAAb,IAAa,CAAb;IAJF,CAAO,CAAP;EAMD;;EAED,IAAIC,QAAQ,CAAZ,IAAY,CAAZ,EAAoB;IAClB,OAAO,UAAU,CAAV,IAAU,CAAV,CAAA,MAAA,CAAwB,CAAA,MAAA,EAAA,GAAA,KAAuB;MACpDC,MAAM,CAANA,GAAM,CAANA,GAAcF,MAAM,CAACG,IAAI,CAAzBD,GAAyB,CAAL,CAApBA;MACA,OAAA,MAAA;IAFK,CAAA,EAAP,EAAO,CAAP;EAID;;EAED,IAAIC,IAAI,IAAR,IAAA,EAAkB;IAChB,OAAOH,MAAM,CAAb,IAAa,CAAb;EACD;;EAED,OAAA,IAAA;AACD;AAED,OAAO,SAAA,qBAAA,CAAA,GAAA,EAAA,GAAA,EAA6D;EAAA,IAAnBI,GAAmB,KAAA,KAAA,CAAA,EAAA;IAAnBA,GAAmB,GAAbR,WAANQ;EAAmB;;EAClE,IAAMF,MAAM,GAAG,GAAG,CAAH,GAAA,CAASG,EAAD,IAAA;IAAA,IAAA,OAAA;;IAAA,OAAA,CAAA,OAAA,GAAQC,GAAG,CAAX,EAAW,CAAX,KAAA,IAAA,GAAA,OAAA,GAAA,IAAA;EAAvB,CAAe,CAAf;;EACA,OAAOC,WAAW,CAAXA,MAAW,CAAXA,KAAP,IAAA,EAAqC;IACnCL,MAAM,CAANA,GAAAA;EACD;;EACD,OAAA,MAAA;AACD;AAED,OAAO,SAAA,qBAAA,CAAA,MAAA,EAAA,GAAA,EAAiE;EAAA,IAAnBE,GAAmB,KAAA,KAAA,CAAA,EAAA;IAAnBA,GAAmB,GAAbR,WAANQ;EAAmB;;EACtE,IAAMF,MAAM,GAAZ,EAAA;EACAM,MAAM,CAANA,OAAAA,CAAe,CAAA,KAAA,EAAA,KAAA,KAAkB;IAC/B,IAAMC,GAAG,GAAGL,GAAG,CAAf,KAAe,CAAf;IACA,IAAIM,KAAK,IAAT,IAAA,EAAmB;IACnBR,MAAM,CAANA,GAAM,CAANA,GAAAA,KAAAA;EAHFM,CAAAA;EAKA,OAAA,MAAA;AACD;AAED,OAAO,SAAA,sBAAA,CAAA,GAAA,EAAA,GAAA,EAA8D;EAAA,IAAnBJ,GAAmB,KAAA,KAAA,CAAA,EAAA;IAAnBA,GAAmB,GAAbR,WAANQ;EAAmB;;EACnE,IAAMO,IAAI,GAAGd,MAAM,CAANA,IAAAA,CAAb,GAAaA,CAAb;EACA,OAAOc,IAAI,CAAJA,MAAAA,GAAAA,CAAAA,IAAmBA,IAAI,CAAJA,KAAAA,CAAYF,GAAD,IAASL,GAAG,CAAHA,QAAAA,CAA9C,GAA8CA,CAApBO,CAA1B;AACD","sourcesContent":["import { isArray, isObject } from \"./assertion\"\nimport { Dict } from \"./types\"\nimport { objectKeys } from \"./object\"\nimport { getLastItem } from \"./array\"\n\nexport const breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\"])\n\nexport function mapResponsive(prop: any, mapper: (val: any) => any) {\n  if (isArray(prop)) {\n    return prop.map((item) => {\n      if (item === null) {\n        return null\n      }\n      return mapper(item)\n    })\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result: Dict, key) => {\n      result[key] = mapper(prop[key])\n      return result\n    }, {})\n  }\n\n  if (prop != null) {\n    return mapper(prop)\n  }\n\n  return null\n}\n\nexport function objectToArrayNotation(obj: Dict, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null)\n  while (getLastItem(result) === null) {\n    result.pop()\n  }\n  return result\n}\n\nexport function arrayToObjectNotation(values: any[], bps = breakpoints) {\n  const result = {} as Dict\n  values.forEach((value, index) => {\n    const key = bps[index]\n    if (value == null) return\n    result[key] = value\n  })\n  return result\n}\n\nexport function isResponsiveObjectLike(obj: Dict, bps = breakpoints) {\n  const keys = Object.keys(obj)\n  return keys.length > 0 && keys.every((key) => bps.includes(key))\n}\n"]},"metadata":{},"sourceType":"module"}