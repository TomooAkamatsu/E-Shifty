{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useForceUpdate, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { createContext, isBrowser, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { usePortalManager } from \"./portal-manager\";\nvar [PortalContextProvider, usePortalContext] = createContext({\n  strict: false,\n  name: \"PortalContext\"\n});\nvar PORTAL_CLASSNAME = \"chakra-portal\";\nvar PORTAL_SELECTOR = \".chakra-portal\";\n\nvar Container = props => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"chakra-portal-zIndex\",\n  style: {\n    position: \"absolute\",\n    zIndex: props.zIndex,\n    top: 0,\n    left: 0,\n    right: 0 // NB: Don't add `bottom: 0`, it makes the entire app unusable\n    // @see https://github.com/chakra-ui/chakra-ui/issues/3201\n\n  }\n}, props.children);\n/**\n * Portal that uses `document.body` as container\n */\n\n\nvar DefaultPortal = props => {\n  var {\n    appendToParentPortal,\n    children\n  } = props;\n  var tempNode = React.useRef(null);\n  var portal = React.useRef(null);\n  var forceUpdate = useForceUpdate();\n  var parentPortal = usePortalContext();\n  var manager = usePortalManager();\n  useSafeLayoutEffect(() => {\n    if (!tempNode.current) return;\n    var doc = tempNode.current.ownerDocument;\n    var host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;\n    if (!host) return;\n    portal.current = doc.createElement(\"div\");\n    portal.current.className = PORTAL_CLASSNAME;\n    host.appendChild(portal.current);\n    forceUpdate();\n    var portalNode = portal.current;\n    return () => {\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode);\n      }\n    };\n  }, []);\n\n  var _children = manager != null && manager.zIndex ? /*#__PURE__*/React.createElement(Container, {\n    zIndex: manager == null ? void 0 : manager.zIndex\n  }, children) : children;\n\n  return portal.current ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(PortalContextProvider, {\n    value: portal.current\n  }, _children), portal.current) : /*#__PURE__*/React.createElement(\"span\", {\n    ref: tempNode\n  });\n};\n/**\n * Portal that uses a custom container\n */\n\n\nvar ContainerPortal = props => {\n  var {\n    children,\n    containerRef,\n    appendToParentPortal\n  } = props;\n  var containerEl = containerRef.current;\n  var host = containerEl != null ? containerEl : isBrowser ? document.body : undefined;\n  var portal = React.useMemo(() => {\n    var node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement(\"div\");\n    if (node) node.className = PORTAL_CLASSNAME;\n    return node;\n  }, [containerEl]);\n  var forceUpdate = useForceUpdate();\n  useSafeLayoutEffect(() => {\n    forceUpdate();\n  }, []);\n  useSafeLayoutEffect(() => {\n    if (!portal || !host) return;\n    host.appendChild(portal);\n    return () => {\n      host.removeChild(portal);\n    };\n  }, [portal, host]);\n\n  if (host && portal) {\n    return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(PortalContextProvider, {\n      value: appendToParentPortal ? portal : null\n    }, children), portal);\n  }\n\n  return null;\n};\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/docs/components/portal\n */\n\n\nexport function Portal(props) {\n  var {\n    containerRef\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"containerRef\"]);\n\n  return containerRef ? /*#__PURE__*/React.createElement(ContainerPortal, _extends({\n    containerRef: containerRef\n  }, rest)) : /*#__PURE__*/React.createElement(DefaultPortal, rest);\n}\nPortal.defaultProps = {\n  appendToParentPortal: true\n};\nPortal.className = PORTAL_CLASSNAME;\nPortal.selector = PORTAL_SELECTOR;\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\";\n}","map":{"version":3,"sources":["../../src/portal.tsx"],"names":["createContext","strict","name","PORTAL_CLASSNAME","PORTAL_SELECTOR","Container","props","position","zIndex","top","left","right","DefaultPortal","children","tempNode","React","portal","forceUpdate","useForceUpdate","parentPortal","usePortalContext","manager","usePortalManager","useSafeLayoutEffect","doc","host","appendToParentPortal","portalNode","_children","createPortal","current","ContainerPortal","containerEl","containerRef","isBrowser","document","node","rest","Portal"],"mappings":"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","sourcesContent":["import { useForceUpdate, useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport { createContext, isBrowser, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { createPortal } from \"react-dom\"\nimport { usePortalManager } from \"./portal-manager\"\n\ntype PortalContext = HTMLDivElement | null\n\nconst [PortalContextProvider, usePortalContext] = createContext<PortalContext>({\n  strict: false,\n  name: \"PortalContext\",\n})\n\nconst PORTAL_CLASSNAME = \"chakra-portal\"\nconst PORTAL_SELECTOR = `.chakra-portal`\n\nconst Container: React.FC<{ zIndex: number }> = (props) => (\n  <div\n    className=\"chakra-portal-zIndex\"\n    style={{\n      position: \"absolute\",\n      zIndex: props.zIndex,\n      top: 0,\n      left: 0,\n      right: 0,\n      // NB: Don't add `bottom: 0`, it makes the entire app unusable\n      // @see https://github.com/chakra-ui/chakra-ui/issues/3201\n    }}\n  >\n    {props.children}\n  </div>\n)\n\n/**\n * Portal that uses `document.body` as container\n */\nconst DefaultPortal: React.FC<{ appendToParentPortal?: boolean }> = (props) => {\n  const { appendToParentPortal, children } = props\n\n  const tempNode = React.useRef<HTMLDivElement | null>(null)\n  const portal = React.useRef<HTMLDivElement | null>(null)\n\n  const forceUpdate = useForceUpdate()\n\n  const parentPortal = usePortalContext()\n  const manager = usePortalManager()\n\n  useSafeLayoutEffect(() => {\n    if (!tempNode.current) return\n\n    const doc = tempNode.current!.ownerDocument\n    const host = appendToParentPortal ? parentPortal ?? doc.body : doc.body\n\n    if (!host) return\n\n    portal.current = doc.createElement(\"div\")\n    portal.current.className = PORTAL_CLASSNAME\n\n    host.appendChild(portal.current)\n    forceUpdate()\n\n    const portalNode = portal.current\n    return () => {\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode)\n      }\n    }\n  }, [])\n\n  const _children = manager?.zIndex ? (\n    <Container zIndex={manager?.zIndex}>{children}</Container>\n  ) : (\n    children\n  )\n\n  return portal.current ? (\n    createPortal(\n      <PortalContextProvider value={portal.current}>\n        {_children}\n      </PortalContextProvider>,\n      portal.current,\n    )\n  ) : (\n    <span ref={tempNode} />\n  )\n}\n\ninterface ContainerPortalProps {\n  containerRef: React.RefObject<HTMLElement | null>\n  appendToParentPortal?: boolean\n}\n\n/**\n * Portal that uses a custom container\n */\nconst ContainerPortal: React.FC<ContainerPortalProps> = (props) => {\n  const { children, containerRef, appendToParentPortal } = props\n  const containerEl = containerRef.current\n  const host = containerEl ?? (isBrowser ? document.body : undefined)\n\n  const portal = React.useMemo(() => {\n    const node = containerEl?.ownerDocument.createElement(\"div\")\n    if (node) node.className = PORTAL_CLASSNAME\n    return node\n  }, [containerEl])\n\n  const forceUpdate = useForceUpdate()\n\n  useSafeLayoutEffect(() => {\n    forceUpdate()\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (!portal || !host) return\n    host.appendChild(portal)\n    return () => {\n      host.removeChild(portal)\n    }\n  }, [portal, host])\n\n  if (host && portal) {\n    return createPortal(\n      <PortalContextProvider value={appendToParentPortal ? portal : null}>\n        {children}\n      </PortalContextProvider>,\n      portal,\n    )\n  }\n\n  return null\n}\n\nexport interface PortalProps {\n  /**\n   * The `ref` to the component where the portal will be attached to.\n   */\n  containerRef?: React.RefObject<HTMLElement | null>\n  /**\n   * The content or node you'll like to portal\n   */\n  children: React.ReactNode\n  /**\n   * If `true`, the portal will check if it is within a parent portal\n   * and append itself to the parent's portal node.\n   * This provides nesting for portals.\n   *\n   * If `false`, the portal will always append to `document.body`\n   * regardless of nesting. It is used to opt out of portal nesting.\n   */\n  appendToParentPortal?: boolean\n}\n\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/docs/components/portal\n */\n\nexport function Portal(props: PortalProps) {\n  const { containerRef, ...rest } = props\n  return containerRef ? (\n    <ContainerPortal containerRef={containerRef} {...rest} />\n  ) : (\n    <DefaultPortal {...rest} />\n  )\n}\n\nPortal.defaultProps = {\n  appendToParentPortal: true,\n}\n\nPortal.className = PORTAL_CLASSNAME\nPortal.selector = PORTAL_SELECTOR\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\"\n}\n"]},"metadata":{},"sourceType":"module"}