{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport { motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { usePopover } from \"./use-popover\";\nvar motionVariants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1]\n    },\n    transitionEnd: {\n      visibility: \"hidden\"\n    }\n  },\n  enter: {\n    visibility: \"visible\",\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1]\n    }\n  }\n};\nvar [PopoverProvider, usePopoverContext] = createContext({\n  name: \"PopoverContext\",\n  errorMessage: \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\"\n});\nexport { usePopoverContext };\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\n\nexport var Popover = props => {\n  var styles = useMultiStyleConfig(\"Popover\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    children\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\"]);\n\n  var context = usePopover(rest);\n  return /*#__PURE__*/React.createElement(PopoverProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, runIfFn(children, {\n    isOpen: context.isOpen,\n    onClose: context.onClose,\n    forceUpdate: context.forceUpdate\n  })));\n};\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\";\n}\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\n\n\nexport var PopoverTrigger = props => {\n  // enforce a single child\n  var child = React.Children.only(props.children);\n  var {\n    getTriggerProps\n  } = usePopoverContext();\n  return /*#__PURE__*/React.cloneElement(child, getTriggerProps(child.props, child.ref));\n};\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\";\n}\n\nvar Motion = chakra(motion.section);\nexport var PopoverContent = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    isOpen,\n    getPopoverProps,\n    onTransitionEnd,\n    getPopoverPositionerProps\n  } = usePopoverContext();\n  var styles = useStyles();\n\n  var contentStyles = _extends({\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  }, styles.content);\n\n  var popoverProps = getPopoverProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    __css: styles.popper\n  }, getPopoverPositionerProps()), /*#__PURE__*/React.createElement(Motion, _extends({}, popoverProps, {\n    onUpdate: onTransitionEnd,\n    className: cx(\"chakra-popover__content\", props.className),\n    __css: contentStyles,\n    variants: motionVariants,\n    initial: false,\n    animate: isOpen ? \"enter\" : \"exit\"\n  })));\n});\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\";\n}\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\n\n\nexport var PopoverHeader = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    headerId,\n    setHasHeader\n  } = usePopoverContext();\n  React.useEffect(() => {\n    setHasHeader.on();\n    return () => setHasHeader.off();\n  }, [setHasHeader]);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.header, _extends({}, props, {\n    className: cx(\"chakra-popover__header\", props.className),\n    id: headerId,\n    ref: ref,\n    __css: styles.header\n  }));\n});\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\";\n}\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\n\n\nexport var PopoverBody = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    bodyId,\n    setHasBody\n  } = usePopoverContext();\n  React.useEffect(() => {\n    setHasBody.on();\n    return () => setHasBody.off();\n  }, [setHasBody]);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, props, {\n    className: cx(\"chakra-popover__body\", props.className),\n    id: bodyId,\n    ref: ref,\n    __css: styles.body\n  }));\n});\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\";\n}\n\nexport var PopoverFooter = props => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.footer, _extends({}, props, {\n    className: cx(\"chakra-popover__footer\", props.className),\n    __css: styles.footer\n  }));\n};\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\";\n}\n\nexport var PopoverCloseButton = props => {\n  var {\n    onClose\n  } = usePopoverContext();\n  return /*#__PURE__*/React.createElement(CloseButton, _extends({\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    borderRadius: \"md\",\n    top: \"0.25rem\",\n    right: \"0.5rem\",\n    padding: \"0.5rem\"\n  }, props));\n};\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\";\n}\n\nexport var PopoverArrow = props => {\n  var {\n    getArrowProps,\n    getArrowPositionerProps\n  } = usePopoverContext();\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, getArrowPositionerProps(), {\n    className: cx(\"chakra-popover__arrow-positioner\", props.className)\n  }), /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: cx(\"chakra-popover__arrow\", props.className)\n  }, getArrowProps(props), {\n    __css: styles.arrow\n  })));\n};\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\";\n}","map":{"version":3,"sources":["../../src/popover.tsx"],"names":["motionVariants","exit","opacity","scale","transition","duration","ease","transitionEnd","visibility","enter","createContext","name","errorMessage","Popover","props","styles","useMultiStyleConfig","children","rest","omitThemingProps","context","usePopover","runIfFn","isOpen","onClose","forceUpdate","PopoverTrigger","child","React","getTriggerProps","usePopoverContext","Motion","chakra","motion","PopoverContent","forwardRef","getPopoverPositionerProps","useStyles","contentStyles","position","display","flexDirection","popoverProps","getPopoverProps","popper","cx","PopoverHeader","setHasHeader","header","PopoverBody","setHasBody","body","PopoverFooter","footer","PopoverCloseButton","PopoverArrow","getArrowPositionerProps","getArrowProps","arrow"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  createContext,\n  cx,\n  MaybeRenderProp,\n  runIfFn,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport { motion, Variants } from \"framer-motion\"\nimport * as React from \"react\"\nimport { usePopover, UsePopoverProps, UsePopoverReturn } from \"./use-popover\"\n\nconst motionVariants: Variants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1],\n    },\n    transitionEnd: {\n      visibility: \"hidden\",\n    },\n  },\n  enter: {\n    visibility: \"visible\",\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1],\n    },\n  },\n}\n\nconst [PopoverProvider, usePopoverContext] = createContext<UsePopoverReturn>({\n  name: \"PopoverContext\",\n  errorMessage:\n    \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\",\n})\n\nexport { usePopoverContext }\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps<\"Popover\"> {\n  /**\n   * The content of the popover. It is usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | null\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\nexport const Popover: React.FC<PopoverProps> = (props) => {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const context = usePopover(rest)\n\n  return (\n    <PopoverProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n          forceUpdate: context.forceUpdate,\n        })}\n      </StylesProvider>\n    </PopoverProvider>\n  )\n}\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\"\n}\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\nexport const PopoverTrigger: React.FC = (props) => {\n  // enforce a single child\n  const child: any = React.Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return React.cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\"\n}\n\nexport interface PopoverContentProps extends HTMLChakraProps<\"section\"> {}\n\nconst Motion = chakra(motion.section)\n\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  (props, ref) => {\n    const {\n      isOpen,\n      getPopoverProps,\n      onTransitionEnd,\n      getPopoverPositionerProps,\n    } = usePopoverContext()\n\n    const styles = useStyles()\n    const contentStyles: SystemStyleObject = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    const popoverProps: any = getPopoverProps(props, ref)\n\n    return (\n      <chakra.div __css={styles.popper} {...getPopoverPositionerProps()}>\n        <Motion\n          {...popoverProps}\n          onUpdate={onTransitionEnd}\n          className={cx(\"chakra-popover__content\", props.className)}\n          __css={contentStyles}\n          variants={motionVariants}\n          initial={false}\n          animate={isOpen ? \"enter\" : \"exit\"}\n        />\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\"\n}\n\nexport interface PopoverHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  (props, ref) => {\n    const { headerId, setHasHeader } = usePopoverContext()\n\n    React.useEffect(() => {\n      setHasHeader.on()\n      return () => setHasHeader.off()\n    }, [setHasHeader])\n\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        {...props}\n        className={cx(\"chakra-popover__header\", props.className)}\n        id={headerId}\n        ref={ref}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\"\n}\n\nexport interface PopoverBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">((props, ref) => {\n  const { bodyId, setHasBody } = usePopoverContext()\n\n  React.useEffect(() => {\n    setHasBody.on()\n    return () => setHasBody.off()\n  }, [setHasBody])\n\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...props}\n      className={cx(\"chakra-popover__body\", props.className)}\n      id={bodyId}\n      ref={ref}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\"\n}\nexport interface PopoverFooterProps extends HTMLChakraProps<\"footer\"> {}\n\nexport const PopoverFooter: React.FC<PopoverFooterProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\"\n}\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton: React.FC<CloseButtonProps> = (props) => {\n  const { onClose } = usePopoverContext()\n  return (\n    <CloseButton\n      size=\"sm\"\n      onClick={onClose}\n      position=\"absolute\"\n      borderRadius=\"md\"\n      top=\"0.25rem\"\n      right=\"0.5rem\"\n      padding=\"0.5rem\"\n      {...props}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\"\n}\n\nexport interface PopoverArrowProps extends HTMLChakraProps<\"div\"> {}\n\nexport const PopoverArrow: React.FC<PopoverArrowProps> = (props) => {\n  const { getArrowProps, getArrowPositionerProps } = usePopoverContext()\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...getArrowPositionerProps()}\n      className={cx(\"chakra-popover__arrow-positioner\", props.className)}\n    >\n      <chakra.div\n        className={cx(\"chakra-popover__arrow\", props.className)}\n        {...getArrowProps(props)}\n        __css={styles.arrow}\n      />\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\"\n}\n"]},"metadata":{},"sourceType":"module"}