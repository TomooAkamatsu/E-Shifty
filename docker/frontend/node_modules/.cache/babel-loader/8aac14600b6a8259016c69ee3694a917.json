{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { FocusLock } from \"@chakra-ui/focus-lock\";\nimport { Portal } from \"@chakra-ui/portal\";\nimport { chakra, forwardRef, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { fadeConfig } from \"@chakra-ui/transition\";\nimport { callAllHandlers, createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { AnimatePresence, motion, usePresence } from \"framer-motion\";\nimport * as React from \"react\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { ModalTransition } from \"./modal-transition\";\nimport { useModal } from \"./use-modal\";\nvar [ModalContextProvider, useModalContext] = createContext({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage: \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\"\n});\nexport { ModalContextProvider, useModalContext };\n/**\n * Modal provides context, theming, and accessibility properties\n * to all other modal components.\n *\n * It doesn't render any DOM node.\n */\n\nexport var Modal = props => {\n  var {\n    portalProps,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames\n  } = props;\n  var styles = useMultiStyleConfig(\"Modal\", props);\n  var modal = useModal(props);\n\n  var context = _extends({}, modal, {\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames\n  });\n\n  return /*#__PURE__*/React.createElement(ModalContextProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(AnimatePresence, null, context.isOpen && /*#__PURE__*/React.createElement(Portal, portalProps, children))));\n};\nModal.defaultProps = {\n  lockFocusAcrossFrames: true,\n  returnFocusOnClose: true,\n  scrollBehavior: \"outside\",\n  trapFocus: true,\n  autoFocus: true,\n  blockScrollOnMount: true,\n  allowPinchZoom: false,\n  motionPreset: \"scale\"\n};\n\nif (__DEV__) {\n  Modal.displayName = \"Modal\";\n}\n\nvar Motion = chakra(motion.div);\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\n\nexport var ModalContent = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    className,\n    children,\n    containerProps: rootProps\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\", \"containerProps\"]);\n\n  var {\n    getDialogProps,\n    getDialogContainerProps\n  } = useModalContext();\n  var dialogProps = getDialogProps(rest, ref);\n  var containerProps = getDialogContainerProps(rootProps);\n\n  var _className = cx(\"chakra-modal__content\", className);\n\n  var styles = useStyles();\n\n  var dialogStyles = _extends({\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0\n  }, styles.dialog);\n\n  var dialogContainerStyles = _extends({\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0\n  }, styles.dialogContainer);\n\n  var {\n    motionPreset\n  } = useModalContext();\n  return /*#__PURE__*/React.createElement(ModalFocusScope, null, /*#__PURE__*/React.createElement(chakra.div, _extends({}, containerProps, {\n    className: \"chakra-modal__content-container\",\n    __css: dialogContainerStyles\n  }), /*#__PURE__*/React.createElement(ModalTransition, _extends({\n    preset: motionPreset,\n    className: _className\n  }, dialogProps, {\n    __css: dialogStyles\n  }), children)));\n});\n\nif (__DEV__) {\n  ModalContent.displayName = \"ModalContent\";\n}\n\nexport function ModalFocusScope(props) {\n  var {\n    autoFocus,\n    trapFocus,\n    dialogRef,\n    initialFocusRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    finalFocusRef,\n    returnFocusOnClose,\n    preserveScrollBarGap,\n    lockFocusAcrossFrames\n  } = useModalContext();\n  var [isPresent, safeToRemove] = usePresence();\n  React.useEffect(() => {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove);\n    }\n  }, [isPresent, safeToRemove]);\n  return /*#__PURE__*/React.createElement(FocusLock, {\n    autoFocus: autoFocus,\n    isDisabled: !trapFocus,\n    initialFocusRef: initialFocusRef,\n    finalFocusRef: finalFocusRef,\n    restoreFocus: returnFocusOnClose,\n    contentRef: dialogRef,\n    lockFocusAcrossFrames: lockFocusAcrossFrames\n  }, /*#__PURE__*/React.createElement(RemoveScroll, {\n    removeScrollBar: !preserveScrollBarGap,\n    allowPinchZoom: allowPinchZoom,\n    enabled: blockScrollOnMount,\n    forwardProps: true\n  }, props.children));\n}\n/**\n * ModalOverlay renders a backdrop behind the modal. It is\n * also used as a wrapper for the modal content for better positioning.\n *\n * @see Docs https://chakra-ui.com/docs/overlay/modal\n */\n\nexport var ModalOverlay = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"transition\"]);\n\n  var _className = cx(\"chakra-modal__overlay\", className);\n\n  var styles = useStyles();\n\n  var overlayStyle = _extends({\n    pos: \"fixed\",\n    left: \"0\",\n    top: \"0\",\n    w: \"100vw\",\n    h: \"100vh\"\n  }, styles.overlay);\n\n  var {\n    motionPreset\n  } = useModalContext();\n  var motionProps = motionPreset === \"none\" ? {} : fadeConfig;\n  return /*#__PURE__*/React.createElement(Motion, _extends({}, motionProps, {\n    __css: overlayStyle,\n    ref: ref,\n    className: _className\n  }, rest));\n});\n\nif (__DEV__) {\n  ModalOverlay.displayName = \"ModalOverlay\";\n}\n/**\n * ModalHeader\n *\n * React component that houses the title of the modal.\n *\n * @see Docs https://chakra-ui.com/docs/components/modal\n */\n\n\nexport var ModalHeader = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var {\n    headerId,\n    setHeaderMounted\n  } = useModalContext();\n  /**\n   * Notify us if this component was rendered or used\n   * so we can append `aria-labelledby` automatically\n   */\n\n  React.useEffect(() => {\n    setHeaderMounted(true);\n    return () => setHeaderMounted(false);\n  }, [setHeaderMounted]);\n\n  var _className = cx(\"chakra-modal__header\", className);\n\n  var styles = useStyles();\n\n  var headerStyles = _extends({\n    flex: 0\n  }, styles.header);\n\n  return /*#__PURE__*/React.createElement(chakra.header, _extends({\n    ref: ref,\n    className: _className,\n    id: headerId\n  }, rest, {\n    __css: headerStyles\n  }));\n});\n\nif (__DEV__) {\n  ModalHeader.displayName = \"ModalHeader\";\n}\n/**\n * ModalBody\n *\n * React component that houses the main content of the modal.\n *\n * @see Docs https://chakra-ui.com/docs/components/modal\n */\n\n\nexport var ModalBody = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var {\n    bodyId,\n    setBodyMounted\n  } = useModalContext();\n  /**\n   * Notify us if this component was rendered or used\n   * so we can append `aria-describedby` automatically\n   */\n\n  React.useEffect(() => {\n    setBodyMounted(true);\n    return () => setBodyMounted(false);\n  }, [setBodyMounted]);\n\n  var _className = cx(\"chakra-modal__body\", className);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    className: _className,\n    id: bodyId\n  }, rest, {\n    __css: styles.body\n  }));\n});\n\nif (__DEV__) {\n  ModalBody.displayName = \"ModalBody\";\n}\n/**\n * ModalFooter houses the action buttons of the modal.\n * @see Docs https://chakra-ui.com/docs/components/modal\n */\n\n\nexport var ModalFooter = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var _className = cx(\"chakra-modal__footer\", className);\n\n  var styles = useStyles();\n\n  var footerStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\"\n  }, styles.footer);\n\n  return /*#__PURE__*/React.createElement(chakra.footer, _extends({\n    ref: ref\n  }, rest, {\n    __css: footerStyles,\n    className: _className\n  }));\n});\n\nif (__DEV__) {\n  ModalFooter.displayName = \"ModalFooter\";\n}\n/**\n * ModalCloseButton is used closes the modal.\n *\n * You don't need to pass the `onClick` to it, it reads the\n * `onClose` action from the modal context.\n */\n\n\nexport var ModalCloseButton = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    onClick,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"onClick\", \"className\"]);\n\n  var {\n    onClose\n  } = useModalContext();\n\n  var _className = cx(\"chakra-modal__close-btn\", className);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(CloseButton, _extends({\n    ref: ref,\n    __css: styles.closeButton,\n    className: _className,\n    onClick: callAllHandlers(onClick, event => {\n      event.stopPropagation();\n      onClose();\n    })\n  }, rest));\n});\n\nif (__DEV__) {\n  ModalCloseButton.displayName = \"ModalCloseButton\";\n}","map":{"version":3,"sources":["../../src/modal.tsx"],"names":["createContext","strict","name","errorMessage","Modal","props","lockFocusAcrossFrames","styles","useMultiStyleConfig","modal","useModal","context","returnFocusOnClose","scrollBehavior","trapFocus","autoFocus","blockScrollOnMount","allowPinchZoom","motionPreset","Motion","chakra","motion","ModalContent","forwardRef","containerProps","rootProps","rest","getDialogContainerProps","useModalContext","dialogProps","getDialogProps","_className","cx","useStyles","dialogStyles","display","flexDirection","position","width","outline","dialogContainerStyles","height","left","top","usePresence","React","setTimeout","ModalOverlay","className","overlayStyle","pos","w","h","motionProps","ModalHeader","setHeaderMounted","headerStyles","flex","headerId","ModalBody","setBodyMounted","bodyId","body","ModalFooter","footerStyles","alignItems","justifyContent","ref","ModalCloseButton","onClose","callAllHandlers","event"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport { FocusLock, FocusLockProps } from \"@chakra-ui/focus-lock\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport {\n  chakra,\n  ChakraProps,\n  forwardRef,\n  HTMLChakraProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { fadeConfig } from \"@chakra-ui/transition\"\nimport {\n  callAllHandlers,\n  createContext,\n  cx,\n  FocusableElement,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport {\n  AnimatePresence,\n  HTMLMotionProps,\n  motion,\n  usePresence,\n} from \"framer-motion\"\nimport * as React from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\nimport { MouseEvent } from \"react\"\nimport { ModalTransition } from \"./modal-transition\"\nimport { useModal, UseModalProps, UseModalReturn } from \"./use-modal\"\n\ninterface ModalOptions extends Pick<FocusLockProps, \"lockFocusAcrossFrames\"> {\n  /**\n   * If `false`, focus lock will be disabled completely.\n   *\n   * This is useful in situations where you still need to interact with\n   * other surrounding elements.\n   *\n   * 🚨Warning: We don't recommend doing this because it hurts the\n   * accessibility of the modal, based on WAI-ARIA specifications.\n   *\n   * @default true\n   */\n  trapFocus?: boolean\n  /**\n   * If `true`, the modal will autofocus the first enabled and interactive\n   * element within the `ModalContent`\n   *\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * The `ref` of element to receive focus when the modal opens.\n   */\n  initialFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * If `true`, the modal will return focus to the element that triggered it when it closes.\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, scrolling will be disabled on the `body` when the modal opens.\n   *  @default true\n   */\n  blockScrollOnMount?: boolean\n  /**\n   * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.\n   * Defaults to `false`.\n   */\n  allowPinchZoom?: boolean\n  /**\n   * If `true`, a `padding-right` will be applied to the body element\n   * that's equal to the width of the scrollbar.\n   *\n   * This can help prevent some unpleasant flickering effect\n   * and content adjustment when the modal opens\n   */\n  preserveScrollBarGap?: boolean\n}\n\ntype ScrollBehavior = \"inside\" | \"outside\"\n\ntype MotionPreset = \"slideInBottom\" | \"slideInRight\" | \"scale\" | \"none\"\n\nexport interface ModalProps\n  extends UseModalProps,\n    ModalOptions,\n    ThemingProps<\"Modal\"> {\n  children: React.ReactNode\n  /**\n   *  If `true`, the modal will be centered on screen.\n   * @default false\n   */\n  isCentered?: boolean\n  /**\n   * Where scroll behavior should originate.\n   * - If set to `inside`, scroll only occurs within the `ModalBody`.\n   * - If set to `outside`, the entire `ModalContent` will scroll within the viewport.\n   *\n   * @default \"outside\"\n   */\n  scrollBehavior?: ScrollBehavior\n  /**\n   * Props to be forwarded to the portal component\n   */\n  portalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">\n  /**\n   * The transition that should be used for the modal\n   */\n  motionPreset?: MotionPreset\n}\n\ninterface ModalContext extends ModalOptions, UseModalReturn {\n  /**\n   * The transition that should be used for the modal\n   */\n  motionPreset?: MotionPreset\n}\n\nconst [ModalContextProvider, useModalContext] = createContext<ModalContext>({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage:\n    \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\",\n})\n\nexport { ModalContextProvider, useModalContext }\n\n/**\n * Modal provides context, theming, and accessibility properties\n * to all other modal components.\n *\n * It doesn't render any DOM node.\n */\nexport const Modal: React.FC<ModalProps> = (props) => {\n  const {\n    portalProps,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n  } = props\n\n  const styles = useMultiStyleConfig(\"Modal\", props)\n  const modal = useModal(props)\n\n  const context = {\n    ...modal,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n  }\n\n  return (\n    <ModalContextProvider value={context}>\n      <StylesProvider value={styles}>\n        <AnimatePresence>\n          {context.isOpen && <Portal {...portalProps}>{children}</Portal>}\n        </AnimatePresence>\n      </StylesProvider>\n    </ModalContextProvider>\n  )\n}\n\nModal.defaultProps = {\n  lockFocusAcrossFrames: true,\n  returnFocusOnClose: true,\n  scrollBehavior: \"outside\",\n  trapFocus: true,\n  autoFocus: true,\n  blockScrollOnMount: true,\n  allowPinchZoom: false,\n  motionPreset: \"scale\",\n}\n\nif (__DEV__) {\n  Modal.displayName = \"Modal\"\n}\n\nexport interface ModalContentProps extends HTMLChakraProps<\"section\"> {\n  /**\n   * The props to forward to the modal's content wrapper\n   */\n  containerProps?: HTMLChakraProps<\"div\">\n}\n\nconst Motion = chakra(motion.div)\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const ModalContent = forwardRef<ModalContentProps, \"section\">(\n  (props, ref) => {\n    const { className, children, containerProps: rootProps, ...rest } = props\n\n    const { getDialogProps, getDialogContainerProps } = useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps(rootProps)\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { motionPreset } = useModalContext()\n\n    return (\n      <ModalFocusScope>\n        <chakra.div\n          {...containerProps}\n          className=\"chakra-modal__content-container\"\n          __css={dialogContainerStyles}\n        >\n          <ModalTransition\n            preset={motionPreset}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </ModalTransition>\n        </chakra.div>\n      </ModalFocusScope>\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalContent.displayName = \"ModalContent\"\n}\n\ninterface ModalFocusScopeProps {\n  /**\n   * @type React.ReactElement\n   */\n  children: React.ReactElement\n}\n\nexport function ModalFocusScope(props: ModalFocusScopeProps) {\n  const {\n    autoFocus,\n    trapFocus,\n    dialogRef,\n    initialFocusRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    finalFocusRef,\n    returnFocusOnClose,\n    preserveScrollBarGap,\n    lockFocusAcrossFrames,\n  } = useModalContext()\n\n  const [isPresent, safeToRemove] = usePresence()\n\n  React.useEffect(() => {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove)\n    }\n  }, [isPresent, safeToRemove])\n\n  return (\n    <FocusLock\n      autoFocus={autoFocus}\n      isDisabled={!trapFocus}\n      initialFocusRef={initialFocusRef}\n      finalFocusRef={finalFocusRef}\n      restoreFocus={returnFocusOnClose}\n      contentRef={dialogRef}\n      lockFocusAcrossFrames={lockFocusAcrossFrames}\n    >\n      <RemoveScroll\n        removeScrollBar={!preserveScrollBarGap}\n        allowPinchZoom={allowPinchZoom}\n        enabled={blockScrollOnMount}\n        forwardProps\n      >\n        {props.children}\n      </RemoveScroll>\n    </FocusLock>\n  )\n}\n\nexport interface ModalOverlayProps\n  extends Omit<HTMLMotionProps<\"div\">, \"color\" | \"transition\">,\n    ChakraProps {\n  children?: React.ReactNode\n}\n\n/**\n * ModalOverlay renders a backdrop behind the modal. It is\n * also used as a wrapper for the modal content for better positioning.\n *\n * @see Docs https://chakra-ui.com/docs/overlay/modal\n */\nexport const ModalOverlay = forwardRef<ModalOverlayProps, \"div\">(\n  (props, ref) => {\n    const { className, transition, ...rest } = props\n    const _className = cx(\"chakra-modal__overlay\", className)\n\n    const styles = useStyles()\n    const overlayStyle: SystemStyleObject = {\n      pos: \"fixed\",\n      left: \"0\",\n      top: \"0\",\n      w: \"100vw\",\n      h: \"100vh\",\n      ...styles.overlay,\n    }\n\n    const { motionPreset } = useModalContext()\n    const motionProps = motionPreset === \"none\" ? {} : fadeConfig\n\n    return (\n      <Motion\n        {...motionProps}\n        __css={overlayStyle}\n        ref={ref}\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalOverlay.displayName = \"ModalOverlay\"\n}\n\nexport interface ModalHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * ModalHeader\n *\n * React component that houses the title of the modal.\n *\n * @see Docs https://chakra-ui.com/docs/components/modal\n */\nexport const ModalHeader = forwardRef<ModalHeaderProps, \"header\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n\n    const { headerId, setHeaderMounted } = useModalContext()\n\n    /**\n     * Notify us if this component was rendered or used\n     * so we can append `aria-labelledby` automatically\n     */\n    React.useEffect(() => {\n      setHeaderMounted(true)\n      return () => setHeaderMounted(false)\n    }, [setHeaderMounted])\n\n    const _className = cx(\"chakra-modal__header\", className)\n\n    const styles = useStyles()\n    const headerStyles: SystemStyleObject = {\n      flex: 0,\n      ...styles.header,\n    }\n\n    return (\n      <chakra.header\n        ref={ref}\n        className={_className}\n        id={headerId}\n        {...rest}\n        __css={headerStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalHeader.displayName = \"ModalHeader\"\n}\n\nexport interface ModalBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * ModalBody\n *\n * React component that houses the main content of the modal.\n *\n * @see Docs https://chakra-ui.com/docs/components/modal\n */\nexport const ModalBody = forwardRef<ModalBodyProps, \"div\">((props, ref) => {\n  const { className, ...rest } = props\n  const { bodyId, setBodyMounted } = useModalContext()\n\n  /**\n   * Notify us if this component was rendered or used\n   * so we can append `aria-describedby` automatically\n   */\n  React.useEffect(() => {\n    setBodyMounted(true)\n    return () => setBodyMounted(false)\n  }, [setBodyMounted])\n\n  const _className = cx(\"chakra-modal__body\", className)\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={_className}\n      id={bodyId}\n      {...rest}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  ModalBody.displayName = \"ModalBody\"\n}\n\nexport interface ModalFooterProps extends HTMLChakraProps<\"footer\"> {}\n\n/**\n * ModalFooter houses the action buttons of the modal.\n * @see Docs https://chakra-ui.com/docs/components/modal\n */\nexport const ModalFooter = forwardRef<ModalFooterProps, \"footer\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-modal__footer\", className)\n\n    const styles = useStyles()\n    const footerStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      ...styles.footer,\n    }\n\n    return (\n      <chakra.footer\n        ref={ref}\n        {...rest}\n        __css={footerStyles}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalFooter.displayName = \"ModalFooter\"\n}\n\n/**\n * ModalCloseButton is used closes the modal.\n *\n * You don't need to pass the `onClick` to it, it reads the\n * `onClose` action from the modal context.\n */\nexport const ModalCloseButton = forwardRef<CloseButtonProps, \"button\">(\n  (props, ref) => {\n    const { onClick, className, ...rest } = props\n    const { onClose } = useModalContext()\n\n    const _className = cx(\"chakra-modal__close-btn\", className)\n\n    const styles = useStyles()\n\n    return (\n      <CloseButton\n        ref={ref}\n        __css={styles.closeButton}\n        className={_className}\n        onClick={callAllHandlers(onClick, (event: MouseEvent) => {\n          event.stopPropagation()\n          onClose()\n        })}\n        {...rest}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalCloseButton.displayName = \"ModalCloseButton\"\n}\n"]},"metadata":{},"sourceType":"module"}