{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { ToastManager } from \"./toast-manager\";\nvar portalId = \"chakra-toast-portal\";\n\nclass Toaster {\n  /**\n   * Initialize the manager and mount it in the DOM\n   * inside the portal node.\n   *\n   * @todo\n   *\n   * Update toast constructor to use `PortalManager`'s node or document.body.\n   * Once done, we can remove the `zIndex` in `toast.manager.tsx`\n   */\n  constructor() {\n    var _this = this;\n\n    _defineProperty(this, \"createToast\", void 0);\n\n    _defineProperty(this, \"removeAll\", void 0);\n\n    _defineProperty(this, \"closeToast\", void 0);\n\n    _defineProperty(this, \"updateToast\", void 0);\n\n    _defineProperty(this, \"isToastActive\", void 0);\n\n    _defineProperty(this, \"bindFunctions\", methods => {\n      this.createToast = methods.notify;\n      this.removeAll = methods.closeAll;\n      this.closeToast = methods.close;\n      this.updateToast = methods.update;\n      this.isToastActive = methods.isActive;\n    });\n\n    _defineProperty(this, \"notify\", function (message, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      return _this.createToast == null ? void 0 : _this.createToast(message, options);\n    });\n\n    _defineProperty(this, \"close\", id => {\n      var _this$closeToast;\n\n      (_this$closeToast = this.closeToast) == null ? void 0 : _this$closeToast.call(this, id);\n    });\n\n    _defineProperty(this, \"closeAll\", options => {\n      var _this$removeAll;\n\n      (_this$removeAll = this.removeAll) == null ? void 0 : _this$removeAll.call(this, options);\n    });\n\n    _defineProperty(this, \"update\", function (id, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      _this.updateToast == null ? void 0 : _this.updateToast(id, options);\n    });\n\n    _defineProperty(this, \"isActive\", id => {\n      var _this$isToastActive;\n\n      return (_this$isToastActive = this.isToastActive) == null ? void 0 : _this$isToastActive.call(this, id);\n    });\n\n    if (!isBrowser) return;\n    var portal;\n    var existingPortal = document.getElementById(portalId);\n\n    if (existingPortal) {\n      portal = existingPortal;\n    } else {\n      var _document$body;\n\n      var div = document.createElement(\"div\");\n      div.id = portalId;\n      (_document$body = document.body) == null ? void 0 : _document$body.appendChild(div);\n      portal = div;\n    }\n\n    render( /*#__PURE__*/React.createElement(ToastManager, {\n      notify: this.bindFunctions\n    }), portal);\n  }\n\n}\n\nexport var toast = new Toaster();","map":{"version":3,"sources":["../../src/toast.class.tsx"],"names":["portalId","constructor","existingPortal","document","portal","div","render","bindFunctions","methods","options","id","toast"],"mappings":"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","sourcesContent":["import { isBrowser } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { render } from \"react-dom\"\nimport { ToastMethods, ToastManager } from \"./toast-manager\"\nimport type {\n  CloseAllToastsOptions,\n  ToastId,\n  ToastMessage,\n  ToastOptions,\n} from \"./toast.types\"\n\nconst portalId = \"chakra-toast-portal\"\n\nclass Toaster {\n  private createToast?: ToastMethods[\"notify\"]\n  private removeAll?: ToastMethods[\"closeAll\"]\n  private closeToast?: ToastMethods[\"close\"]\n  private updateToast?: ToastMethods[\"update\"]\n  private isToastActive?: ToastMethods[\"isActive\"]\n\n  /**\n   * Initialize the manager and mount it in the DOM\n   * inside the portal node.\n   *\n   * @todo\n   *\n   * Update toast constructor to use `PortalManager`'s node or document.body.\n   * Once done, we can remove the `zIndex` in `toast.manager.tsx`\n   */\n  constructor() {\n    if (!isBrowser) return\n\n    let portal: HTMLElement\n    const existingPortal = document.getElementById(portalId)\n\n    if (existingPortal) {\n      portal = existingPortal\n    } else {\n      const div = document.createElement(\"div\")\n      div.id = portalId\n      document.body?.appendChild(div)\n      portal = div\n    }\n\n    render(<ToastManager notify={this.bindFunctions} />, portal)\n  }\n\n  private bindFunctions = (methods: ToastMethods) => {\n    this.createToast = methods.notify\n    this.removeAll = methods.closeAll\n    this.closeToast = methods.close\n    this.updateToast = methods.update\n    this.isToastActive = methods.isActive\n  }\n\n  notify = (message: ToastMessage, options: Partial<ToastOptions> = {}) =>\n    this.createToast?.(message, options)\n\n  close = (id: ToastId) => {\n    this.closeToast?.(id)\n  }\n\n  closeAll = (options?: CloseAllToastsOptions) => {\n    this.removeAll?.(options)\n  }\n\n  update = (id: ToastId, options: Partial<ToastOptions> = {}) => {\n    this.updateToast?.(id, options)\n  }\n\n  isActive = (id: ToastId) => this.isToastActive?.(id)\n}\n\nexport const toast = new Toaster()\n"]},"metadata":{},"sourceType":"module"}