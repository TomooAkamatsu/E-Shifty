{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { compose, getWithDefault } from \"@chakra-ui/utils\";\nimport directional from \"./directionality\";\n/**\n * Polyfill for border-{start|end}-radius properties.\n * We'll remove this once css logical properties is supported in major browsers\n */\n\nfunction logicalTransform(opts) {\n  var {\n    transform,\n    ltr,\n    rtl\n  } = opts;\n\n  var rtlTransform = (value, scale, props) => {\n    var {\n      getLogicalStyle\n    } = directional(props);\n    var raw = getWithDefault(value, scale);\n    return getLogicalStyle({\n      rtl,\n      ltr,\n      value: raw\n    });\n  };\n\n  return transform ? compose(transform, rtlTransform) : rtlTransform;\n}\n\nexport function logical(opts) {\n  var {\n    property,\n    scale,\n    transform\n  } = opts;\n  return {\n    property: \"&\",\n    scale,\n    transform: logicalTransform(_extends({}, property, {\n      transform\n    }))\n  };\n}","map":{"version":3,"sources":["../../../src/utils/logical-prop.ts"],"names":["rtl","rtlTransform","getLogicalStyle","directional","raw","getWithDefault","value","transform","compose","property","logicalTransform"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,OAAA,EAAA,cAAA,QAAA,kBAAA;AAGA,OAAA,WAAA,MAAA,kBAAA;AAUA;AACA;AACA;AACA;;AACA,SAAA,gBAAA,CAAA,IAAA,EAA+E;EAC7E,IAAM;IAAA,SAAA;IAAA,GAAA;IAAkBA;EAAlB,IAAN,IAAA;;EAEA,IAAMC,YAAqC,GAAG,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,KAAyB;IACrE,IAAM;MAAEC;IAAF,IAAsBC,WAAW,CAAvC,KAAuC,CAAvC;IACA,IAAMC,GAAG,GAAGC,cAAc,CAAA,KAAA,EAA1B,KAA0B,CAA1B;IACA,OAAOH,eAAe,CAAC;MAAA,GAAA;MAAA,GAAA;MAAYI,KAAK,EAAEF;IAAnB,CAAD,CAAtB;EAHF,CAAA;;EAMA,OAAOG,SAAS,GAAGC,OAAO,CAAA,SAAA,EAAV,YAAU,CAAV,GAAhB,YAAA;AACD;;AAQD,OAAO,SAAA,OAAA,CAAA,IAAA,EAEO;EACZ,IAAM;IAAA,QAAA;IAAA,KAAA;IAAmBD;EAAnB,IAAN,IAAA;EACA,OAAO;IACLE,QAAQ,EADH,GAAA;IAAA,KAAA;IAGLF,SAAS,EAAEG,gBAAgB,CAAA,QAAA,CAAA,EAAA,EAAA,QAAA,EAAA;MAEzBH;IAFyB,CAAA,CAAA;EAHtB,CAAP;AAQD","sourcesContent":["import { compose, getWithDefault } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { PropConfig } from \"../core\"\nimport directional from \"./directionality\"\n\ntype CSSProp = keyof CSS.Properties\n\ninterface LogicalTransformOptions<T> {\n  ltr: T | T[]\n  rtl: T | T[]\n  transform?: PropConfig[\"transform\"]\n}\n\n/**\n * Polyfill for border-{start|end}-radius properties.\n * We'll remove this once css logical properties is supported in major browsers\n */\nfunction logicalTransform<T extends CSSProp>(opts: LogicalTransformOptions<T>) {\n  const { transform, ltr, rtl } = opts\n\n  const rtlTransform: PropConfig[\"transform\"] = (value, scale, props) => {\n    const { getLogicalStyle } = directional(props)\n    const raw = getWithDefault(value, scale)\n    return getLogicalStyle({ rtl, ltr, value: raw })\n  }\n\n  return transform ? compose(transform, rtlTransform) : rtlTransform\n}\n\ninterface LogicalOptions<T> {\n  scale?: string\n  property: { ltr: T | T[]; rtl: T | T[] }\n  transform?: PropConfig[\"transform\"]\n}\n\nexport function logical<T extends CSSProp>(\n  opts: LogicalOptions<T>,\n): PropConfig {\n  const { property, scale, transform } = opts\n  return {\n    property: \"&\",\n    scale,\n    transform: logicalTransform({\n      ...property,\n      transform,\n    }),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}