{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { useEffect } from \"react\";\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\n\nclass ModalManager {\n  constructor() {\n    _defineProperty(this, \"modals\", void 0);\n\n    this.modals = [];\n  }\n\n  add(modal) {\n    this.modals.push(modal);\n  }\n\n  remove(modal) {\n    this.modals = this.modals.filter(_modal => _modal !== modal);\n  }\n\n  isTopModal(modal) {\n    var topmostModal = this.modals[this.modals.length - 1];\n    return topmostModal === modal;\n  }\n\n}\n\nexport var manager = new ModalManager();\nexport function useModalManager(ref, isOpen) {\n  useEffect(() => {\n    if (isOpen) {\n      manager.add(ref);\n    }\n\n    return () => {\n      manager.remove(ref);\n    };\n  }, [isOpen, ref]);\n}","map":{"version":3,"sources":["../../src/modal-manager.ts"],"names":["constructor","add","remove","_modal","isTopModal","topmostModal","manager","useEffect"],"mappings":";;;;;;;;;;;;;;;AAAA,SAAA,SAAA,QAAA,OAAA;AAEA;AACA;AACA;AACA;;AACA,MAAA,YAAA,CAAmB;EAEjBA,WAAW,GAAG;IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;IACZ,KAAA,MAAA,GAAA,EAAA;EACD;;EAEDC,GAAG,CAAA,KAAA,EAAa;IACd,KAAA,MAAA,CAAA,IAAA,CAAA,KAAA;EACD;;EAEDC,MAAM,CAAA,KAAA,EAAa;IACjB,KAAA,MAAA,GAAc,KAAA,MAAA,CAAA,MAAA,CAAoBC,MAAD,IAAYA,MAAM,KAAnD,KAAc,CAAd;EACD;;EAEDC,UAAU,CAAA,KAAA,EAAa;IACrB,IAAMC,YAAY,GAAG,KAAA,MAAA,CAAY,KAAA,MAAA,CAAA,MAAA,GAAjC,CAAqB,CAArB;IACA,OAAOA,YAAY,KAAnB,KAAA;EACD;;AAjBgB;;AAoBnB,OAAO,IAAMC,OAAO,GAAG,IAAhB,YAAgB,EAAhB;AAEP,OAAO,SAAA,eAAA,CAAA,GAAA,EAAA,MAAA,EAA0D;EAC/DC,SAAS,CAAC,MAAM;IACd,IAAA,MAAA,EAAY;MACVD,OAAO,CAAPA,GAAAA,CAAAA,GAAAA;IACD;;IACD,OAAO,MAAM;MACXA,OAAO,CAAPA,MAAAA,CAAAA,GAAAA;IADF,CAAA;EAJO,CAAA,EAON,CAAA,MAAA,EAPHC,GAOG,CAPM,CAATA;AAQD","sourcesContent":["import { useEffect, Ref } from \"react\"\n\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\nclass ModalManager {\n  modals: any[]\n  constructor() {\n    this.modals = []\n  }\n\n  add(modal: any) {\n    this.modals.push(modal)\n  }\n\n  remove(modal: any) {\n    this.modals = this.modals.filter((_modal) => _modal !== modal)\n  }\n\n  isTopModal(modal: any) {\n    const topmostModal = this.modals[this.modals.length - 1]\n    return topmostModal === modal\n  }\n}\n\nexport const manager = new ModalManager()\n\nexport function useModalManager(ref: Ref<any>, isOpen?: boolean) {\n  useEffect(() => {\n    if (isOpen) {\n      manager.add(ref)\n    }\n    return () => {\n      manager.remove(ref)\n    }\n  }, [isOpen, ref])\n}\n"]},"metadata":{},"sourceType":"module"}