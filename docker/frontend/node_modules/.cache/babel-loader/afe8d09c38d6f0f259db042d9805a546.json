{"ast":null,"code":"// Really great work done by Diego Haz on this one\n// https://github.com/reakit/reakit/blob/master/packages/reakit-utils/src/tabbable.ts\nexport var hasDisplayNone = element => window.getComputedStyle(element).display === \"none\";\nexport var hasTabIndex = element => element.hasAttribute(\"tabindex\");\nexport var hasNegativeTabIndex = element => hasTabIndex(element) && element.tabIndex === -1;\nexport function isDisabled(element) {\n  return Boolean(element.getAttribute(\"disabled\")) === true || Boolean(element.getAttribute(\"aria-disabled\")) === true;\n}\nexport function hasFocusWithin(element) {\n  if (!document.activeElement) return false;\n  return element.contains(document.activeElement);\n}\nexport function isHTMLElement(element) {\n  return element instanceof HTMLElement;\n}\nexport function isHidden(element) {\n  if (element.parentElement && isHidden(element.parentElement)) return true;\n  return element.hidden;\n}\nexport function isContentEditable(element) {\n  var value = element.getAttribute(\"contenteditable\");\n  return value !== \"false\" && value != null;\n}\nexport function isFocusable(element) {\n  if (!isHTMLElement(element) || isHidden(element) || isDisabled(element)) {\n    return false;\n  }\n\n  var {\n    localName\n  } = element;\n  var focusableTags = [\"input\", \"select\", \"textarea\", \"button\"];\n  if (focusableTags.indexOf(localName) >= 0) return true;\n  var others = {\n    a: () => element.hasAttribute(\"href\"),\n    audio: () => element.hasAttribute(\"controls\"),\n    video: () => element.hasAttribute(\"controls\")\n  };\n\n  if (localName in others) {\n    return others[localName]();\n  }\n\n  if (isContentEditable(element)) return true;\n  return hasTabIndex(element);\n}\nexport function isTabbable(element) {\n  if (!element) return false;\n  return isHTMLElement(element) && isFocusable(element) && !hasNegativeTabIndex(element);\n}\n\nvar isActiveElement = element => document.activeElement === element;\n\nfunction isInputElement(element) {\n  return isHTMLElement(element) && element.tagName.toLowerCase() === \"input\" && \"select\" in element;\n}\n\nexport function focus(element, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var {\n    isActive = isActiveElement,\n    preventScroll\n  } = options;\n  if (isActive(element)) return -1;\n  return requestAnimationFrame(() => {\n    element.focus({\n      preventScroll\n    });\n\n    if (isInputElement(element)) {\n      element.select();\n    }\n  });\n}","map":{"version":3,"sources":["../../src/tabbable.ts"],"names":["hasDisplayNone","element","window","hasTabIndex","hasNegativeTabIndex","Boolean","document","isHidden","value","isHTMLElement","isDisabled","localName","focusableTags","others","a","audio","video","isContentEditable","isFocusable","isActiveElement","options","isActive","preventScroll","requestAnimationFrame","isInputElement"],"mappings":"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","sourcesContent":["// Really great work done by Diego Haz on this one\n// https://github.com/reakit/reakit/blob/master/packages/reakit-utils/src/tabbable.ts\n\nexport const hasDisplayNone = (element: HTMLElement) =>\n  window.getComputedStyle(element).display === \"none\"\n\nexport const hasTabIndex = (element: HTMLElement) =>\n  element.hasAttribute(\"tabindex\")\n\nexport const hasNegativeTabIndex = (element: HTMLElement) =>\n  hasTabIndex(element) && element.tabIndex === -1\n\nexport function isDisabled(element: HTMLElement) {\n  return (\n    Boolean(element.getAttribute(\"disabled\")) === true ||\n    Boolean(element.getAttribute(\"aria-disabled\")) === true\n  )\n}\n\nexport function hasFocusWithin(element: HTMLElement) {\n  if (!document.activeElement) return false\n  return element.contains(document.activeElement)\n}\n\nexport function isHTMLElement(element: any): element is HTMLElement {\n  return element instanceof HTMLElement\n}\n\nexport function isHidden(element: HTMLElement) {\n  if (element.parentElement && isHidden(element.parentElement)) return true\n  return element.hidden\n}\n\nexport function isContentEditable(element: HTMLElement) {\n  const value = element.getAttribute(\"contenteditable\")\n  return value !== \"false\" && value != null\n}\n\nexport function isFocusable(element: HTMLElement) {\n  if (!isHTMLElement(element) || isHidden(element) || isDisabled(element)) {\n    return false\n  }\n\n  const { localName } = element\n  const focusableTags = [\"input\", \"select\", \"textarea\", \"button\"]\n  if (focusableTags.indexOf(localName) >= 0) return true\n\n  const others = {\n    a: () => element.hasAttribute(\"href\"),\n    audio: () => element.hasAttribute(\"controls\"),\n    video: () => element.hasAttribute(\"controls\"),\n  }\n\n  if (localName in others) {\n    return others[localName as keyof typeof others]()\n  }\n\n  if (isContentEditable(element)) return true\n\n  return hasTabIndex(element)\n}\n\nexport function isTabbable(element?: HTMLElement | null) {\n  if (!element) return false\n  return (\n    isHTMLElement(element) &&\n    isFocusable(element) &&\n    !hasNegativeTabIndex(element)\n  )\n}\n\nconst isActiveElement = (element: FocusableElement) =>\n  document.activeElement === (element as HTMLElement)\n\nfunction isInputElement(\n  element: FocusableElement,\n): element is HTMLInputElement {\n  return (\n    isHTMLElement(element) &&\n    element.tagName.toLowerCase() === \"input\" &&\n    \"select\" in element\n  )\n}\n\nexport interface FocusableElement {\n  focus(options?: FocusOptions): void\n}\n\ninterface FocusProps extends FocusOptions {\n  isActive?: typeof isActiveElement\n}\n\nexport function focus(element: FocusableElement, options: FocusProps = {}) {\n  const { isActive = isActiveElement, preventScroll } = options\n\n  if (isActive(element)) return -1\n\n  return requestAnimationFrame(() => {\n    element.focus({ preventScroll })\n\n    if (isInputElement(element)) {\n      element.select()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}