{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { objectKeys } from \"@chakra-ui/utils\";\nimport { AnimatePresence } from \"framer-motion\";\nimport * as React from \"react\";\nimport { Toast } from \"./toast\";\nimport { findToast, getToastPosition } from \"./toast.utils\";\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\n\nexport class ToastManager extends React.Component {\n  /**\n   * Static id counter to create unique ids\n   * for each toast\n   */\n\n  /**\n   * State to track all the toast across all positions\n   */\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    _defineProperty(this, \"state\", {\n      top: [],\n      \"top-left\": [],\n      \"top-right\": [],\n      \"bottom-left\": [],\n      bottom: [],\n      \"bottom-right\": []\n    });\n\n    _defineProperty(this, \"notify\", (message, options) => {\n      var toast = this.createToast(message, options);\n      var {\n        position,\n        id\n      } = toast;\n      this.setState(prevToasts => {\n        var isTop = position.includes(\"top\");\n        /**\n         * - If the toast is positioned at the top edges, the\n         * recent toast stacks on top of the other toasts.\n         *\n         * - If the toast is positioned at the bottom edges, the recent\n         * toast stacks below the other toasts.\n         */\n\n        var toasts = isTop ? [toast, ...prevToasts[position]] : [...prevToasts[position], toast];\n        return _extends({}, prevToasts, {\n          [position]: toasts\n        });\n      });\n      return id;\n    });\n\n    _defineProperty(this, \"updateToast\", (id, options) => {\n      this.setState(prevState => {\n        var nextState = _extends({}, prevState);\n\n        var {\n          position,\n          index\n        } = findToast(nextState, id);\n\n        if (position && index !== -1) {\n          nextState[position][index] = _extends({}, nextState[position][index], options);\n        }\n\n        return nextState;\n      });\n    });\n\n    _defineProperty(this, \"closeAll\", function (_temp) {\n      var {\n        positions\n      } = _temp === void 0 ? {} : _temp; // only one setState here for perf reasons\n      // instead of spamming this.closeToast\n\n      _this.setState(prev => {\n        var allPositions = [\"bottom\", \"bottom-right\", \"bottom-left\", \"top\", \"top-left\", \"top-right\"];\n        var positionsToClose = positions != null ? positions : allPositions;\n        return positionsToClose.reduce((acc, position) => {\n          acc[position] = prev[position].map(toast => _extends({}, toast, {\n            requestClose: true\n          }));\n          return acc;\n        }, {});\n      });\n    });\n\n    _defineProperty(this, \"createToast\", (message, options) => {\n      var _options$id, _options$position;\n\n      ToastManager.counter += 1;\n      var id = (_options$id = options.id) != null ? _options$id : ToastManager.counter;\n      var position = (_options$position = options.position) != null ? _options$position : \"top\";\n      return {\n        id,\n        message,\n        position,\n        duration: options.duration,\n        onCloseComplete: options.onCloseComplete,\n        onRequestRemove: () => this.removeToast(String(id), position),\n        status: options.status,\n        requestClose: false\n      };\n    });\n\n    _defineProperty(this, \"closeToast\", id => {\n      this.setState(prevState => {\n        var position = getToastPosition(prevState, id);\n        if (!position) return prevState;\n        return _extends({}, prevState, {\n          [position]: prevState[position].map(toast => {\n            // id may be string or number\n            // eslint-disable-next-line eqeqeq\n            if (toast.id == id) {\n              return _extends({}, toast, {\n                requestClose: true\n              });\n            }\n\n            return toast;\n          })\n        });\n      });\n    });\n\n    _defineProperty(this, \"removeToast\", (id, position) => {\n      this.setState(prevState => _extends({}, prevState, {\n        // id may be string or number\n        // eslint-disable-next-line eqeqeq\n        [position]: prevState[position].filter(toast => toast.id != id)\n      }));\n    });\n\n    _defineProperty(this, \"isVisible\", id => {\n      var {\n        position\n      } = findToast(this.state, id);\n      return Boolean(position);\n    });\n\n    _defineProperty(this, \"getStyle\", position => {\n      var isTopOrBottom = position === \"top\" || position === \"bottom\";\n      var margin = isTopOrBottom ? \"0 auto\" : undefined;\n      var top = position.includes(\"top\") ? 0 : undefined;\n      var bottom = position.includes(\"bottom\") ? 0 : undefined;\n      var right = !position.includes(\"left\") ? 0 : undefined;\n      var left = !position.includes(\"right\") ? 0 : undefined;\n      return {\n        position: \"fixed\",\n        zIndex: 5500,\n        pointerEvents: \"none\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        margin,\n        top,\n        bottom,\n        right,\n        left\n      };\n    });\n\n    var methods = {\n      notify: this.notify,\n      closeAll: this.closeAll,\n      close: this.closeToast,\n      update: this.updateToast,\n      isActive: this.isVisible\n    };\n    props.notify(methods);\n  }\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n\n\n  render() {\n    return objectKeys(this.state).map(position => {\n      var toasts = this.state[position];\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        key: position,\n        id: \"chakra-toast-manager-\" + position,\n        style: this.getStyle(position)\n      }, /*#__PURE__*/React.createElement(AnimatePresence, {\n        initial: false\n      }, toasts.map(toast => /*#__PURE__*/React.createElement(Toast, _extends({\n        key: toast.id\n      }, toast)))));\n    });\n  }\n\n}\n\n_defineProperty(ToastManager, \"counter\", 0);","map":{"version":3,"sources":["../../src/toast-manager.tsx"],"names":["ToastManager","React","top","bottom","constructor","methods","notify","closeAll","close","update","isActive","isVisible","props","toast","id","prevToasts","isTop","position","toasts","prevState","nextState","index","findToast","positions","prev","allPositions","positionsToClose","acc","requestClose","options","duration","onCloseComplete","onRequestRemove","String","status","getToastPosition","Boolean","isTopOrBottom","margin","right","left","zIndex","pointerEvents","display","flexDirection","render"],"mappings":"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","sourcesContent":["import { objectKeys } from \"@chakra-ui/utils\"\nimport { AnimatePresence } from \"framer-motion\"\nimport * as React from \"react\"\nimport { Toast } from \"./toast\"\nimport type {\n  CloseAllToastsOptions,\n  ToastId,\n  ToastMessage,\n  ToastOptions,\n  ToastPosition,\n} from \"./toast.types\"\nimport { findToast, getToastPosition } from \"./toast.utils\"\n\nexport interface ToastMethods {\n  notify: (message: ToastMessage, options: CreateToastOptions) => ToastId\n  closeAll: (options?: CloseAllToastsOptions) => void\n  close: (id: ToastId) => void\n  update: (id: ToastId, options: CreateToastOptions) => void\n  isActive: (id: ToastId) => boolean\n}\n\ninterface Props {\n  notify: (methods: ToastMethods) => void\n}\n\ntype State = { [K in ToastPosition]: ToastOptions[] }\n\ntype CreateToastOptions = Partial<\n  Pick<\n    ToastOptions,\n    \"status\" | \"duration\" | \"position\" | \"id\" | \"onCloseComplete\"\n  >\n>\n\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\nexport class ToastManager extends React.Component<Props, State> {\n  /**\n   * Static id counter to create unique ids\n   * for each toast\n   */\n  static counter = 0\n\n  /**\n   * State to track all the toast across all positions\n   */\n  state: State = {\n    top: [],\n    \"top-left\": [],\n    \"top-right\": [],\n    \"bottom-left\": [],\n    bottom: [],\n    \"bottom-right\": [],\n  }\n\n  constructor(props: Props) {\n    super(props)\n\n    const methods = {\n      notify: this.notify,\n      closeAll: this.closeAll,\n      close: this.closeToast,\n      update: this.updateToast,\n      isActive: this.isVisible,\n    }\n\n    props.notify(methods)\n  }\n\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n  notify = (message: ToastMessage, options: CreateToastOptions) => {\n    const toast = this.createToast(message, options)\n    const { position, id } = toast\n\n    this.setState((prevToasts) => {\n      const isTop = position.includes(\"top\")\n\n      /**\n       * - If the toast is positioned at the top edges, the\n       * recent toast stacks on top of the other toasts.\n       *\n       * - If the toast is positioned at the bottom edges, the recent\n       * toast stacks below the other toasts.\n       */\n      const toasts = isTop\n        ? [toast, ...prevToasts[position]]\n        : [...prevToasts[position], toast]\n\n      return {\n        ...prevToasts,\n        [position]: toasts,\n      }\n    })\n\n    return id\n  }\n\n  /**\n   * Update a specific toast with new options based on the\n   * passed `id`\n   */\n  updateToast = (id: ToastId, options: CreateToastOptions) => {\n    this.setState((prevState) => {\n      const nextState = { ...prevState }\n      const { position, index } = findToast(nextState, id)\n\n      if (position && index !== -1) {\n        nextState[position][index] = {\n          ...nextState[position][index],\n          ...options,\n        }\n      }\n\n      return nextState\n    })\n  }\n\n  /**\n   * Close all toasts at once.\n   * If given positions, will only close those.\n   */\n  closeAll = ({ positions }: CloseAllToastsOptions = {}) => {\n    // only one setState here for perf reasons\n    // instead of spamming this.closeToast\n    this.setState((prev) => {\n      const allPositions: ToastPosition[] = [\n        \"bottom\",\n        \"bottom-right\",\n        \"bottom-left\",\n        \"top\",\n        \"top-left\",\n        \"top-right\",\n      ]\n\n      const positionsToClose = positions ?? allPositions\n\n      return positionsToClose.reduce((acc, position) => {\n        acc[position] = prev[position].map((toast) => ({\n          ...toast,\n          requestClose: true,\n        }))\n\n        return acc\n      }, {})\n    })\n  }\n\n  /**\n   * Create properties for a new toast\n   */\n  createToast = (message: ToastMessage, options: CreateToastOptions) => {\n    ToastManager.counter += 1\n    const id = options.id ?? ToastManager.counter\n\n    const position = options.position ?? \"top\"\n\n    return {\n      id,\n      message,\n      position,\n      duration: options.duration,\n      onCloseComplete: options.onCloseComplete,\n      onRequestRemove: () => this.removeToast(String(id), position),\n      status: options.status,\n      requestClose: false,\n    }\n  }\n\n  /**\n   * Requests to close a toast based on its id and position\n   */\n  closeToast = (id: ToastId) => {\n    this.setState((prevState) => {\n      const position = getToastPosition(prevState, id)\n\n      if (!position) return prevState\n\n      return {\n        ...prevState,\n        [position]: prevState[position].map((toast) => {\n          // id may be string or number\n          // eslint-disable-next-line eqeqeq\n          if (toast.id == id) {\n            return {\n              ...toast,\n              requestClose: true,\n            }\n          }\n\n          return toast\n        }),\n      }\n    })\n  }\n\n  /**\n   * Delete a toast record at its position\n   */\n  removeToast = (id: ToastId, position: ToastPosition) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      // id may be string or number\n      // eslint-disable-next-line eqeqeq\n      [position]: prevState[position].filter((toast) => toast.id != id),\n    }))\n  }\n\n  isVisible = (id: ToastId) => {\n    const { position } = findToast(this.state, id)\n    return Boolean(position)\n  }\n\n  /**\n   * Compute the style of a toast based on its position\n   */\n  getStyle = (position: ToastPosition): React.CSSProperties => {\n    const isTopOrBottom = position === \"top\" || position === \"bottom\"\n    const margin = isTopOrBottom ? \"0 auto\" : undefined\n\n    const top = position.includes(\"top\") ? 0 : undefined\n    const bottom = position.includes(\"bottom\") ? 0 : undefined\n    const right = !position.includes(\"left\") ? 0 : undefined\n    const left = !position.includes(\"right\") ? 0 : undefined\n\n    return {\n      position: \"fixed\",\n      zIndex: 5500,\n      pointerEvents: \"none\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      margin,\n      top,\n      bottom,\n      right,\n      left,\n    }\n  }\n\n  render() {\n    return objectKeys(this.state).map((position) => {\n      const toasts = this.state[position]\n      return (\n        <ul\n          key={position}\n          id={`chakra-toast-manager-${position}`}\n          style={this.getStyle(position)}\n        >\n          <AnimatePresence initial={false}>\n            {toasts.map((toast) => (\n              <Toast key={toast.id} {...toast} />\n            ))}\n          </AnimatePresence>\n        </ul>\n      )\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}