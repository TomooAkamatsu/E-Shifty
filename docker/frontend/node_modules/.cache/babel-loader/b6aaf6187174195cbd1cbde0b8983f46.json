{"ast":null,"code":"import defaultTheme from \"@chakra-ui/theme\";\nimport { isFunction, mergeWith } from \"@chakra-ui/utils\";\n/**\n * Function to override or customize the Chakra UI theme conveniently\n * @param overrides - Your custom theme object overrides\n * @param baseTheme - theme to customize\n */\n\nexport function extendTheme(overrides, baseTheme) {\n  if (baseTheme === void 0) {\n    baseTheme = defaultTheme;\n  }\n\n  function customizer(source, override, key, object) {\n    if (isFunction(source) && Object.prototype.hasOwnProperty.call(object, key)) {\n      return function () {\n        var sourceValue = source(...arguments);\n        var overrideValue = isFunction(override) ? override(...arguments) : override;\n        return mergeWith({}, sourceValue, overrideValue, customizer);\n      };\n    } // fallback to default behaviour\n\n\n    return undefined;\n  }\n\n  return mergeWith({}, baseTheme, overrides, customizer);\n}","map":{"version":3,"sources":["../../src/extend-theme.ts"],"names":["baseTheme","defaultTheme","isFunction","Object","sourceValue","source","overrideValue","override","mergeWith"],"mappings":"AAAA,OAAA,YAAA,MAAA,kBAAA;AACA,SAAA,UAAA,EAAA,SAAA,QAAA,kBAAA;AA6BA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,WAAA,CAAA,SAAA,EAAA,SAAA,EAGL;EAAA,IADAA,SACA,KAAA,KAAA,CAAA,EAAA;IADAA,SACA,GADiBC,YAAjBD;EACA;;EACA,SAAA,UAAA,CAAA,MAAA,EAAA,QAAA,EAAA,GAAA,EAAA,MAAA,EAKE;IACA,IACEE,UAAU,CAAVA,MAAU,CAAVA,IACAC,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAFF,GAEEA,CAFF,EAGE;MACA,OAAO,YAAwB;QAC7B,IAAMC,WAAW,GAAGC,MAAM,CAAC,GAA3B,SAA0B,CAA1B;QAEA,IAAMC,aAAa,GAAGJ,UAAU,CAAVA,QAAU,CAAVA,GAClBK,QAAQ,CAAC,GADSL,SACV,CADUA,GAAtB,QAAA;QAIA,OAAOM,SAAS,CAAA,EAAA,EAAA,WAAA,EAAA,aAAA,EAAhB,UAAgB,CAAhB;MAPF,CAAA;IALF,CAAA,CAgBA;;;IACA,OAAA,SAAA;EACD;;EAED,OAAOA,SAAS,CAAA,EAAA,EAAA,SAAA,EAAA,SAAA,EAAhB,UAAgB,CAAhB;AACD","sourcesContent":["import defaultTheme, { Theme } from \"@chakra-ui/theme\"\nimport { isFunction, mergeWith } from \"@chakra-ui/utils\"\nimport { ColorHues } from \"@chakra-ui/theme/dist/types/foundations/colors\"\n\n// recursive color object type\ntype ThemeColors = string | ColorObject | Record<string, ColorHues>\ninterface ColorObject {\n  [property: string]: ThemeColors\n}\n\ntype ThemeExtensionTypeHints = {\n  colors: ThemeColors // typehints for color definitions\n}\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<ThemeObject, TypeHints> = {\n  [Key in keyof ThemeObject]?:\n    | Omit<DeepThemeExtension<ThemeObject[Key], TypeHints>, keyof TypeHints> // recursive type clone\n    | (ThemeObject[Key] extends (...args: any[]) => any\n        ? Partial<ReturnType<ThemeObject[Key]>>\n        : Partial<ThemeObject[Key]>) // allow function or object\n} &\n  Partial<TypeHints> &\n  Record<string, any> // escape hatch\n\nexport type ThemeOverride = DeepThemeExtension<Theme, ThemeExtensionTypeHints>\n\n/**\n * Function to override or customize the Chakra UI theme conveniently\n * @param overrides - Your custom theme object overrides\n * @param baseTheme - theme to customize\n */\nexport function extendTheme<T extends ThemeOverride>(\n  overrides: T,\n  baseTheme: any = defaultTheme,\n) {\n  function customizer(\n    source: unknown,\n    override: unknown,\n    key: string,\n    object: any,\n  ) {\n    if (\n      isFunction(source) &&\n      Object.prototype.hasOwnProperty.call(object, key)\n    ) {\n      return (...args: unknown[]) => {\n        const sourceValue = source(...args)\n\n        const overrideValue = isFunction(override)\n          ? override(...args)\n          : override\n\n        return mergeWith({}, sourceValue, overrideValue, customizer)\n      }\n    }\n\n    // fallback to default behaviour\n    return undefined\n  }\n\n  return mergeWith({}, baseTheme, overrides, customizer)\n}\n"]},"metadata":{},"sourceType":"module"}