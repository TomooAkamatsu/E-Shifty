{"ast":null,"code":"import { isDark, mode, randomColor } from \"@chakra-ui/theme-tools\";\nimport themeSizes from \"../foundations/sizes\";\nvar parts = [\"container\", \"excessLabel\", \"badge\", \"label\"];\n\nfunction baseStyleBadge(props) {\n  return {\n    transform: \"translate(25%, 25%)\",\n    borderRadius: \"full\",\n    border: \"0.2em solid\",\n    borderColor: mode(\"white\", \"gray.800\")(props)\n  };\n}\n\nfunction baseStyleExcessLabel(props) {\n  return {\n    bg: mode(\"gray.200\", \"whiteAlpha.400\")(props)\n  };\n}\n\nfunction baseStyleContainer(props) {\n  var {\n    name,\n    theme\n  } = props;\n  var bg = name ? randomColor({\n    string: name\n  }) : \"gray.400\";\n  var isBgDark = isDark(bg)(theme);\n  var color = \"white\";\n  if (!isBgDark) color = \"gray.800\";\n  var borderColor = mode(\"white\", \"gray.800\")(props);\n  return {\n    bg,\n    color,\n    borderColor,\n    verticalAlign: \"top\"\n  };\n}\n\nvar baseStyle = props => ({\n  badge: baseStyleBadge(props),\n  excessLabel: baseStyleExcessLabel(props),\n  container: baseStyleContainer(props)\n});\n\nfunction getSize(size) {\n  var themeSize = themeSizes[size];\n  return {\n    container: {\n      width: size,\n      height: size,\n      fontSize: \"calc(\" + (themeSize != null ? themeSize : size) + \" / 2.5)\"\n    },\n    excessLabel: {\n      width: size,\n      height: size\n    },\n    label: {\n      fontSize: \"calc(\" + (themeSize != null ? themeSize : size) + \" / 2.5)\",\n      lineHeight: size !== \"100%\" ? themeSize != null ? themeSize : size : undefined\n    }\n  };\n}\n\nvar sizes = {\n  \"2xs\": getSize(\"4\"),\n  xs: getSize(\"6\"),\n  sm: getSize(\"8\"),\n  md: getSize(\"12\"),\n  lg: getSize(\"16\"),\n  xl: getSize(\"24\"),\n  \"2xl\": getSize(\"32\"),\n  full: getSize(\"100%\")\n};\nvar defaultProps = {\n  size: \"md\"\n};\nexport default {\n  parts,\n  baseStyle,\n  sizes,\n  defaultProps\n};","map":{"version":3,"sources":["../../../src/components/avatar.ts"],"names":["parts","transform","borderRadius","border","borderColor","mode","bg","theme","name","randomColor","string","isBgDark","isDark","color","verticalAlign","baseStyle","props","badge","baseStyleBadge","excessLabel","baseStyleExcessLabel","container","baseStyleContainer","themeSize","themeSizes","width","height","fontSize","size","label","lineHeight","undefined","sizes","getSize","xs","sm","md","lg","xl","full","defaultProps"],"mappings":"AAAA,SAAA,MAAA,EAAA,IAAA,EAAA,WAAA,QAAA,wBAAA;AACA,OAAA,UAAA,MAAA,sBAAA;AAEA,IAAMA,KAAK,GAAG,CAAA,WAAA,EAAA,aAAA,EAAA,OAAA,EAAd,OAAc,CAAd;;AAEA,SAAA,cAAA,CAAA,KAAA,EAAoD;EAClD,OAAO;IACLC,SAAS,EADJ,qBAAA;IAELC,YAAY,EAFP,MAAA;IAGLC,MAAM,EAHD,aAAA;IAILC,WAAW,EAAEC,IAAI,CAAA,OAAA,EAAJA,UAAI,CAAJA,CAAAA,KAAAA;EAJR,CAAP;AAMD;;AAED,SAAA,oBAAA,CAAA,KAAA,EAA0D;EACxD,OAAO;IACLC,EAAE,EAAED,IAAI,CAAA,UAAA,EAAJA,gBAAI,CAAJA,CAAAA,KAAAA;EADC,CAAP;AAGD;;AAED,SAAA,kBAAA,CAAA,KAAA,EAAwD;EACtD,IAAM;IAAA,IAAA;IAAQE;EAAR,IAAN,KAAA;EACA,IAAMD,EAAE,GAAGE,IAAI,GAAGC,WAAW,CAAC;IAAEC,MAAM,EAAEF;EAAV,CAAD,CAAd,GAAf,UAAA;EACA,IAAMG,QAAQ,GAAGC,MAAM,CAANA,EAAM,CAANA,CAAjB,KAAiBA,CAAjB;EAEA,IAAIC,KAAK,GAAT,OAAA;EACA,IAAI,CAAJ,QAAA,EAAeA,KAAK,GAALA,UAAAA;EAEf,IAAMT,WAAW,GAAGC,IAAI,CAAA,OAAA,EAAJA,UAAI,CAAJA,CAApB,KAAoBA,CAApB;EAEA,OAAO;IAAA,EAAA;IAAA,KAAA;IAAA,WAAA;IAILS,aAAa,EAAE;EAJV,CAAP;AAMD;;AAED,IAAMC,SAAS,GAAIC,KAAD,KAAiC;EACjDC,KAAK,EAAEC,cAAc,CAD4B,KAC5B,CAD4B;EAEjDC,WAAW,EAAEC,oBAAoB,CAFgB,KAEhB,CAFgB;EAGjDC,SAAS,EAAEC,kBAAkB,CAAA,KAAA;AAHoB,CAAjC,CAAlB;;AAMA,SAAA,OAAA,CAAA,IAAA,EAA+B;EAC7B,IAAMC,SAAS,GAAGC,UAAU,CAA5B,IAA4B,CAA5B;EACA,OAAO;IACLH,SAAS,EAAE;MACTI,KAAK,EADI,IAAA;MAETC,MAAM,EAFG,IAAA;MAGTC,QAAQ,EAAA,WAAUJ,SAAV,IAAA,IAAUA,GAAV,SAAUA,GAAV,IAAA,IAAA;IAHC,CADN;IAMLJ,WAAW,EAAE;MACXM,KAAK,EADM,IAAA;MAEXC,MAAM,EAAEE;IAFG,CANR;IAULC,KAAK,EAAE;MACLF,QAAQ,EAAA,WAAUJ,SAAV,IAAA,IAAUA,GAAV,SAAUA,GAAV,IAAA,IADH,SAAA;MAELO,UAAU,EAAEF,IAAI,KAAJA,MAAAA,GAAkBL,SAAlBK,IAAAA,IAAkBL,GAAlBK,SAAkBL,GAAlBK,IAAAA,GAAsCG;IAF7C;EAVF,CAAP;AAeD;;AAED,IAAMC,KAAK,GAAG;EACZ,OAAOC,OAAO,CADF,GACE,CADF;EAEZC,EAAE,EAAED,OAAO,CAFC,GAED,CAFC;EAGZE,EAAE,EAAEF,OAAO,CAHC,GAGD,CAHC;EAIZG,EAAE,EAAEH,OAAO,CAJC,IAID,CAJC;EAKZI,EAAE,EAAEJ,OAAO,CALC,IAKD,CALC;EAMZK,EAAE,EAAEL,OAAO,CANC,IAMD,CANC;EAOZ,OAAOA,OAAO,CAPF,IAOE,CAPF;EAQZM,IAAI,EAAEN,OAAO,CAAA,MAAA;AARD,CAAd;AAWA,IAAMO,YAAY,GAAG;EACnBZ,IAAI,EAAE;AADa,CAArB;AAIA,eAAe;EAAA,KAAA;EAAA,SAAA;EAAA,KAAA;EAIbY;AAJa,CAAf","sourcesContent":["import { isDark, mode, randomColor } from \"@chakra-ui/theme-tools\"\nimport themeSizes from \"../foundations/sizes\"\n\nconst parts = [\"container\", \"excessLabel\", \"badge\", \"label\"]\n\nfunction baseStyleBadge(props: Record<string, any>) {\n  return {\n    transform: \"translate(25%, 25%)\",\n    borderRadius: \"full\",\n    border: \"0.2em solid\",\n    borderColor: mode(\"white\", \"gray.800\")(props),\n  }\n}\n\nfunction baseStyleExcessLabel(props: Record<string, any>) {\n  return {\n    bg: mode(\"gray.200\", \"whiteAlpha.400\")(props),\n  }\n}\n\nfunction baseStyleContainer(props: Record<string, any>) {\n  const { name, theme } = props\n  const bg = name ? randomColor({ string: name }) : \"gray.400\"\n  const isBgDark = isDark(bg)(theme)\n\n  let color = \"white\"\n  if (!isBgDark) color = \"gray.800\"\n\n  const borderColor = mode(\"white\", \"gray.800\")(props)\n\n  return {\n    bg,\n    color,\n    borderColor,\n    verticalAlign: \"top\",\n  }\n}\n\nconst baseStyle = (props: Record<string, any>) => ({\n  badge: baseStyleBadge(props),\n  excessLabel: baseStyleExcessLabel(props),\n  container: baseStyleContainer(props),\n})\n\nfunction getSize(size: string) {\n  const themeSize = themeSizes[size]\n  return {\n    container: {\n      width: size,\n      height: size,\n      fontSize: `calc(${themeSize ?? size} / 2.5)`,\n    },\n    excessLabel: {\n      width: size,\n      height: size,\n    },\n    label: {\n      fontSize: `calc(${themeSize ?? size} / 2.5)`,\n      lineHeight: size !== \"100%\" ? themeSize ?? size : undefined,\n    },\n  }\n}\n\nconst sizes = {\n  \"2xs\": getSize(\"4\"),\n  xs: getSize(\"6\"),\n  sm: getSize(\"8\"),\n  md: getSize(\"12\"),\n  lg: getSize(\"16\"),\n  xl: getSize(\"24\"),\n  \"2xl\": getSize(\"32\"),\n  full: getSize(\"100%\"),\n}\n\nconst defaultProps = {\n  size: \"md\",\n}\n\nexport default {\n  parts,\n  baseStyle,\n  sizes,\n  defaultProps,\n}\n"]},"metadata":{},"sourceType":"module"}