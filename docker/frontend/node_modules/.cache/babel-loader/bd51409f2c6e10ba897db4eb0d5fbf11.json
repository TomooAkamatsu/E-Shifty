{"ast":null,"code":"import { contains, focus, getAllFocusable } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useEventListener } from \"./use-event-listener\";\nimport { useUpdateEffect } from \"./use-update-effect\";\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\nexport function useFocusOnShow(target, options) {\n  if (options === void 0) {\n    options = defaultOptions;\n  }\n\n  var {\n    focusRef,\n    preventScroll,\n    shouldFocus,\n    visible\n  } = options;\n  var element = target && \"current\" in target ? target.current : target;\n  var autoFocus = shouldFocus && visible;\n  var onFocus = React.useCallback(() => {\n    if (!element || !autoFocus) return;\n    if (contains(element, document.activeElement)) return;\n\n    if (focusRef != null && focusRef.current) {\n      focus(focusRef.current, {\n        preventScroll\n      });\n    } else {\n      var tabbableEls = getAllFocusable(element);\n\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], {\n          preventScroll\n        });\n      }\n    }\n  }, [autoFocus, preventScroll, element, focusRef]);\n  useUpdateEffect(() => {\n    onFocus();\n  }, [onFocus]);\n  useEventListener(\"transitionend\", onFocus, element);\n}","map":{"version":3,"sources":["../../src/use-focus-on-show.ts"],"names":["defaultOptions","preventScroll","shouldFocus","options","visible","element","target","autoFocus","onFocus","contains","document","focusRef","focus","tabbableEls","getAllFocusable","useUpdateEffect","useEventListener"],"mappings":"AAAA,SAAA,QAAA,EAAA,KAAA,EAAA,eAAA,QAAA,kBAAA;AAMA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,gBAAA,QAAA,sBAAA;AACA,SAAA,eAAA,QAAA,qBAAA;AASA,IAAMA,cAAqC,GAAG;EAC5CC,aAAa,EAD+B,IAAA;EAE5CC,WAAW,EAAE;AAF+B,CAA9C;AAKA,OAAO,SAAA,cAAA,CAAA,MAAA,EAAA,OAAA,EAGL;EAAA,IADAC,OACA,KAAA,KAAA,CAAA,EAAA;IADAA,OACA,GADUH,cAAVG;EACA;;EACA,IAAM;IAAA,QAAA;IAAA,aAAA;IAAA,WAAA;IAAwCC;EAAxC,IAAN,OAAA;EACA,IAAMC,OAAO,GAAGC,MAAM,IAAI,aAAVA,MAAAA,GAAgCA,MAAM,CAAtCA,OAAAA,GAAhB,MAAA;EAEA,IAAMC,SAAS,GAAGL,WAAW,IAA7B,OAAA;EAEA,IAAMM,OAAO,GAAG,KAAK,CAAL,WAAA,CAAkB,MAAM;IACtC,IAAI,CAAA,OAAA,IAAY,CAAhB,SAAA,EAA4B;IAE5B,IAAIC,QAAQ,CAAA,OAAA,EAAUC,QAAQ,CAA9B,aAAY,CAAZ,EAA8D;;IAE9D,IAAIC,QAAJ,IAAA,IAAIA,IAAAA,QAAQ,CAAZ,OAAA,EAAuB;MACrBC,KAAK,CAACD,QAAQ,CAAT,OAAA,EAAmB;QAAEV;MAAF,CAAnB,CAALW;IADF,CAAA,MAEO;MACL,IAAMC,WAAW,GAAGC,eAAe,CAAnC,OAAmC,CAAnC;;MACA,IAAID,WAAW,CAAXA,MAAAA,GAAJ,CAAA,EAA4B;QAC1BD,KAAK,CAACC,WAAW,CAAZ,CAAY,CAAZ,EAAiB;UAAEZ;QAAF,CAAjB,CAALW;MACD;IACF;EAZa,CAAA,EAab,CAAA,SAAA,EAAA,aAAA,EAAA,OAAA,EAbH,QAaG,CAba,CAAhB;EAeAG,eAAe,CAAC,MAAM;IACpBP,OAAO;EADM,CAAA,EAEZ,CAFHO,OAEG,CAFY,CAAfA;EAIAC,gBAAgB,CAAA,eAAA,EAAA,OAAA,EAAhBA,OAAgB,CAAhBA;AACD","sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getAllFocusable,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnShowOptions {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nconst defaultOptions: UseFocusOnShowOptions = {\n  preventScroll: true,\n  shouldFocus: false,\n}\n\nexport function useFocusOnShow<T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  options = defaultOptions,\n) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options\n  const element = target && \"current\" in target ? target.current : target\n\n  const autoFocus = shouldFocus && visible\n\n  const onFocus = React.useCallback(() => {\n    if (!element || !autoFocus) return\n\n    if (contains(element, document.activeElement as HTMLElement)) return\n\n    if (focusRef?.current) {\n      focus(focusRef.current, { preventScroll })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], { preventScroll })\n      }\n    }\n  }, [autoFocus, preventScroll, element, focusRef])\n\n  useUpdateEffect(() => {\n    onFocus()\n  }, [onFocus])\n\n  useEventListener(\"transitionend\", onFocus, element)\n}\n"]},"metadata":{},"sourceType":"module"}