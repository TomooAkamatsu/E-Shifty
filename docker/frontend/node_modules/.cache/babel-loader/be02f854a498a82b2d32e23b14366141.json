{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nexport function getBoxShadow(placement, color) {\n  if (!color) return undefined;\n\n  if (placement.includes(\"top\")) {\n    return \"2px 2px 2px 0 \" + color;\n  }\n\n  if (placement.includes(\"bottom\")) {\n    return \"-1px -1px 1px 0 \" + color;\n  }\n\n  if (placement.includes(\"right\")) {\n    return \"-1px 1px 1px 0 \" + color;\n  }\n\n  if (placement.includes(\"left\")) {\n    return \"1px -1px 1px 0 \" + color;\n  }\n\n  return undefined;\n}\nvar transformEnum = {\n  top: \"bottom center\",\n  \"top-start\": \"bottom left\",\n  \"top-end\": \"bottom right\",\n  bottom: \"top center\",\n  \"bottom-start\": \"top left\",\n  \"bottom-end\": \"top right\",\n  left: \"right center\",\n  \"left-start\": \"right top\",\n  \"left-end\": \"right bottom\",\n  right: \"left center\",\n  \"right-start\": \"left top\",\n  \"right-end\": \"left bottom\"\n};\nexport var toTransformOrigin = placement => transformEnum[placement];\nexport var getArrowStyles = options => {\n  var {\n    arrowSize,\n    popperArrowStyles = {},\n    placement\n  } = options;\n\n  var styles = _extends({}, popperArrowStyles, {\n    width: arrowSize,\n    height: arrowSize,\n    zIndex: -1\n  });\n\n  var offsetAdjust = -(arrowSize / 2);\n  if (placement.startsWith(\"top\")) styles.bottom = offsetAdjust;\n  if (placement.startsWith(\"bottom\")) styles.top = offsetAdjust;\n  if (placement.startsWith(\"left\")) styles.right = offsetAdjust;\n  if (placement.startsWith(\"right\")) styles.left = offsetAdjust;\n  return styles;\n};","map":{"version":3,"sources":["../../src/popper.utils.ts"],"names":["placement","transformEnum","top","bottom","left","right","toTransformOrigin","getArrowStyles","options","popperArrowStyles","styles","width","height","zIndex","offsetAdjust","arrowSize"],"mappings":";;;;;;;;;;;;;;;;;;AAGA,OAAO,SAAA,YAAA,CAAA,SAAA,EAAA,KAAA,EAA4D;EACjE,IAAI,CAAJ,KAAA,EAAY,OAAA,SAAA;;EAEZ,IAAIA,SAAS,CAATA,QAAAA,CAAJ,KAAIA,CAAJ,EAA+B;IAC7B,OAAA,mBAAA,KAAA;EACD;;EAED,IAAIA,SAAS,CAATA,QAAAA,CAAJ,QAAIA,CAAJ,EAAkC;IAChC,OAAA,qBAAA,KAAA;EACD;;EAED,IAAIA,SAAS,CAATA,QAAAA,CAAJ,OAAIA,CAAJ,EAAiC;IAC/B,OAAA,oBAAA,KAAA;EACD;;EAED,IAAIA,SAAS,CAATA,QAAAA,CAAJ,MAAIA,CAAJ,EAAgC;IAC9B,OAAA,oBAAA,KAAA;EACD;;EAED,OAAA,SAAA;AACD;AAED,IAAMC,aAAa,GAAG;EACpBC,GAAG,EADiB,eAAA;EAEpB,aAFoB,aAAA;EAGpB,WAHoB,cAAA;EAKpBC,MAAM,EALc,YAAA;EAMpB,gBANoB,UAAA;EAOpB,cAPoB,WAAA;EASpBC,IAAI,EATgB,cAAA;EAUpB,cAVoB,WAAA;EAWpB,YAXoB,cAAA;EAapBC,KAAK,EAbe,aAAA;EAcpB,eAdoB,UAAA;EAepB,aAAa;AAfO,CAAtB;AAkBA,OAAO,IAAMC,iBAAiB,GAAIN,SAAD,IAC/BC,aAAa,CADR,SACQ,CADR;AASP,OAAO,IAAMM,cAAc,GAAIC,OAAD,IAAmC;EAC/D,IAAM;IAAA,SAAA;IAAaC,iBAAiB,GAA9B,EAAA;IAAqCT;EAArC,IAAN,OAAA;;EAEA,IAAMU,MAAqB,GAAA,QAAA,CAAA,EAAA,EAAA,iBAAA,EAAA;IAEzBC,KAAK,EAFoB,SAAA;IAGzBC,MAAM,EAHmB,SAAA;IAIzBC,MAAM,EAAE,CAAC;EAJgB,CAAA,CAA3B;;EAOA,IAAMC,YAAY,GAAG,EAAEC,SAAS,GAAhC,CAAqB,CAArB;EAEA,IAAIf,SAAS,CAATA,UAAAA,CAAJ,KAAIA,CAAJ,EAAiCU,MAAM,CAANA,MAAAA,GAAAA,YAAAA;EACjC,IAAIV,SAAS,CAATA,UAAAA,CAAJ,QAAIA,CAAJ,EAAoCU,MAAM,CAANA,GAAAA,GAAAA,YAAAA;EACpC,IAAIV,SAAS,CAATA,UAAAA,CAAJ,MAAIA,CAAJ,EAAkCU,MAAM,CAANA,KAAAA,GAAAA,YAAAA;EAClC,IAAIV,SAAS,CAATA,UAAAA,CAAJ,OAAIA,CAAJ,EAAmCU,MAAM,CAANA,IAAAA,GAAAA,YAAAA;EAEnC,OAAA,MAAA;AAjBK,CAAA","sourcesContent":["import type { CSSProperties } from \"react\"\nimport { Placement } from \"@popperjs/core\"\n\nexport function getBoxShadow(placement: Placement, color?: string) {\n  if (!color) return undefined\n\n  if (placement.includes(\"top\")) {\n    return `2px 2px 2px 0 ${color}`\n  }\n\n  if (placement.includes(\"bottom\")) {\n    return `-1px -1px 1px 0 ${color}`\n  }\n\n  if (placement.includes(\"right\")) {\n    return `-1px 1px 1px 0 ${color}`\n  }\n\n  if (placement.includes(\"left\")) {\n    return `1px -1px 1px 0 ${color}`\n  }\n\n  return undefined\n}\n\nconst transformEnum = {\n  top: \"bottom center\",\n  \"top-start\": \"bottom left\",\n  \"top-end\": \"bottom right\",\n\n  bottom: \"top center\",\n  \"bottom-start\": \"top left\",\n  \"bottom-end\": \"top right\",\n\n  left: \"right center\",\n  \"left-start\": \"right top\",\n  \"left-end\": \"right bottom\",\n\n  right: \"left center\",\n  \"right-start\": \"left top\",\n  \"right-end\": \"left bottom\",\n}\n\nexport const toTransformOrigin = (placement: Placement) =>\n  transformEnum[placement]\n\ninterface GetArrowStyleOptions {\n  arrowSize: number\n  popperArrowStyles?: CSSProperties\n  placement: Placement\n}\n\nexport const getArrowStyles = (options: GetArrowStyleOptions) => {\n  const { arrowSize, popperArrowStyles = {}, placement } = options\n\n  const styles: CSSProperties = {\n    ...popperArrowStyles,\n    width: arrowSize,\n    height: arrowSize,\n    zIndex: -1,\n  }\n\n  const offsetAdjust = -(arrowSize / 2)\n\n  if (placement.startsWith(\"top\")) styles.bottom = offsetAdjust\n  if (placement.startsWith(\"bottom\")) styles.top = offsetAdjust\n  if (placement.startsWith(\"left\")) styles.right = offsetAdjust\n  if (placement.startsWith(\"right\")) styles.left = offsetAdjust\n\n  return styles\n}\n"]},"metadata":{},"sourceType":"module"}