{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var Switch = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Switch\", props);\n  var ownProps = omitThemingProps(props);\n  var {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    htmlProps\n  } = useCheckbox(ownProps);\n  var inputProps = getInputProps({}, ref);\n  var checkboxProps = getCheckboxProps();\n  var labelStyles = {\n    display: \"inline-block\",\n    verticalAlign: \"middle\",\n    lineHeight: \"normal\"\n  };\n\n  var trackStyles = _extends({\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"flex-start\",\n    boxSizing: \"content-box\",\n    cursor: \"pointer\"\n  }, styles.track);\n\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({}, htmlProps, {\n    className: cx(\"chakra-switch\", props.className),\n    __css: labelStyles\n  }), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-switch__input\"\n  }, inputProps)), /*#__PURE__*/React.createElement(chakra.span, _extends({}, checkboxProps, {\n    className: \"chakra-switch__track\",\n    __css: trackStyles\n  }), /*#__PURE__*/React.createElement(chakra.span, {\n    __css: styles.thumb,\n    className: \"chakra-switch__thumb\",\n    \"data-checked\": dataAttr(state.isChecked),\n    \"data-hover\": dataAttr(state.isHovered)\n  })));\n});\n\nif (__DEV__) {\n  Switch.displayName = \"Switch\";\n}","map":{"version":3,"sources":["../../src/switch.tsx"],"names":["Switch","forwardRef","styles","useMultiStyleConfig","ownProps","omitThemingProps","htmlProps","useCheckbox","inputProps","getInputProps","checkboxProps","getCheckboxProps","labelStyles","display","verticalAlign","lineHeight","trackStyles","flexShrink","justifyContent","boxSizing","cursor","cx","props","dataAttr","state"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,WAAA,QAAA,qBAAA;AACA,SAAA,MAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,mBAAA,QAAA,mBAAA;AASA,SAAA,EAAA,EAAA,QAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AASA,OAAO,IAAMA,MAAM,GAAA,aAAGC,UAAU,CAAuB,CAAA,KAAA,EAAA,GAAA,KAAgB;EACrE,IAAMC,MAAM,GAAGC,mBAAmB,CAAA,QAAA,EAAlC,KAAkC,CAAlC;EAEA,IAAMC,QAAQ,GAAGC,gBAAgB,CAAjC,KAAiC,CAAjC;EACA,IAAM;IAAA,KAAA;IAAA,aAAA;IAAA,gBAAA;IAA0CC;EAA1C,IAAwDC,WAAW,CAAzE,QAAyE,CAAzE;EAIA,IAAMC,UAAU,GAAGC,aAAa,CAAA,EAAA,EAAhC,GAAgC,CAAhC;EACA,IAAMC,aAAa,GAAGC,gBAAtB,EAAA;EAEA,IAAMC,WAA8B,GAAG;IACrCC,OAAO,EAD8B,cAAA;IAErCC,aAAa,EAFwB,QAAA;IAGrCC,UAAU,EAAE;EAHyB,CAAvC;;EAMA,IAAMC,WAA8B,GAAA,QAAA,CAAA;IAClCH,OAAO,EAD2B,aAAA;IAElCI,UAAU,EAFwB,CAAA;IAGlCC,cAAc,EAHoB,YAAA;IAIlCC,SAAS,EAJyB,aAAA;IAKlCC,MAAM,EAAE;EAL0B,CAAA,EAM/BlB,MAAM,CANX,KAAoC,CAApC;;EASA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;IAEE,SAAS,EAAEmB,EAAE,CAAA,eAAA,EAAkBC,KAAK,CAFtC,SAEe,CAFf;IAGE,KAAK,EAAEV;EAHT,CAAA,CAAA,EAAA,aAKE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;IAAO,SAAS,EAAC;EAAjB,CAAA,EALF,UAKE,CAAA,CALF,EAAA,aAME,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA;IAEE,SAAS,EAFX,sBAAA;IAGE,KAAK,EAAEI;EAHT,CAAA,CAAA,EAAA,aAKE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,IAAA,EAAA;IACE,KAAK,EAAEd,MAAM,CADf,KAAA;IAEE,SAAS,EAFX,sBAAA;IAGE,gBAAcqB,QAAQ,CAACC,KAAK,CAH9B,SAGwB,CAHxB;IAIE,cAAYD,QAAQ,CAACC,KAAK,CAAN,SAAA;EAJtB,CAAA,CALF,CANF,CADF;AA1BK,CAAyB,CAAzB;;AAiDP,IAAA,OAAA,EAAa;EACXxB,MAAM,CAANA,WAAAA,GAAAA,QAAAA;AACD","sourcesContent":["import { useCheckbox, UseCheckboxProps } from \"@chakra-ui/checkbox\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype Omitted = \"defaultChecked\" | \"checked\" | \"onChange\"\n\nexport interface SwitchProps\n  extends Omit<UseCheckboxProps, \"isIndeterminate\">,\n    Omit<HTMLChakraProps<\"label\">, Omitted>,\n    ThemingProps<\"Switch\"> {}\n\nexport const Switch = forwardRef<SwitchProps, \"input\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Switch\", props)\n\n  const ownProps = omitThemingProps(props)\n  const { state, getInputProps, getCheckboxProps, htmlProps } = useCheckbox(\n    ownProps,\n  )\n\n  const inputProps = getInputProps({}, ref)\n  const checkboxProps = getCheckboxProps()\n\n  const labelStyles: SystemStyleObject = {\n    display: \"inline-block\",\n    verticalAlign: \"middle\",\n    lineHeight: \"normal\",\n  }\n\n  const trackStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"flex-start\",\n    boxSizing: \"content-box\",\n    cursor: \"pointer\",\n    ...styles.track,\n  }\n\n  return (\n    <chakra.label\n      {...htmlProps}\n      className={cx(\"chakra-switch\", props.className)}\n      __css={labelStyles}\n    >\n      <input className=\"chakra-switch__input\" {...inputProps} />\n      <chakra.span\n        {...checkboxProps}\n        className=\"chakra-switch__track\"\n        __css={trackStyles}\n      >\n        <chakra.span\n          __css={styles.thumb}\n          className=\"chakra-switch__thumb\"\n          data-checked={dataAttr(state.isChecked)}\n          data-hover={dataAttr(state.isHovered)}\n        />\n      </chakra.span>\n    </chakra.label>\n  )\n})\n\nif (__DEV__) {\n  Switch.displayName = \"Switch\"\n}\n"]},"metadata":{},"sourceType":"module"}