{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport { motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { MenuProvider, useMenu, useMenuButton, useMenuContext, useMenuItem, useMenuList, useMenuOption, useMenuOptionGroup, useMenuPositioner } from \"./use-menu\";\n/**\n * Menu provides context, state, and focus management\n * to its sub-components. It doesn't render any DOM node.\n */\n\nexport var Menu = props => {\n  var {\n    children\n  } = props;\n  var styles = useMultiStyleConfig(\"Menu\", props);\n  var ownProps = omitThemingProps(props);\n  var ctx = useMenu(ownProps);\n  var context = React.useMemo(() => ctx, [ctx]);\n  var {\n    isOpen,\n    onClose,\n    forceUpdate\n  } = context;\n  return /*#__PURE__*/React.createElement(MenuProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, runIfFn(children, {\n    isOpen,\n    onClose,\n    forceUpdate\n  })));\n};\n\nif (__DEV__) {\n  Menu.displayName = \"Menu\";\n}\n\nvar StyledMenuButton = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({\n    ref: ref\n  }, props, {\n    __css: _extends({\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      outline: 0,\n      transition: \"all 250ms\"\n    }, styles.button)\n  }));\n});\n/**\n * The trigger for the menu list. Must be a direct child of `Menu`.\n */\n\nexport var MenuButton = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    as: As\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"as\"]);\n\n  var buttonProps = useMenuButton(rest, ref);\n  var Element = As || StyledMenuButton;\n  return /*#__PURE__*/React.createElement(Element, _extends({}, buttonProps, {\n    className: cx(\"chakra-menu__menu-button\", props.className)\n  }), /*#__PURE__*/React.createElement(chakra.span, {\n    __css: {\n      pointerEvents: \"none\",\n      flex: \"1 1 auto\"\n    }\n  }, props.children));\n});\n\nif (__DEV__) {\n  MenuButton.displayName = \"MenuButton\";\n}\n\nvar motionVariants = {\n  enter: {\n    visibility: \"visible\",\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 0.2, 1]\n    }\n  },\n  exit: {\n    transitionEnd: {\n      visibility: \"hidden\"\n    },\n    opacity: 0,\n    scale: 0.8,\n    transition: {\n      duration: 0.1,\n      easings: \"easeOut\"\n    }\n  }\n};\nvar Motion = chakra(motion.div);\nexport var MenuList = /*#__PURE__*/forwardRef((props, ref) => {\n  var _props$zIndex, _styles$list;\n\n  var {\n    rootProps\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"rootProps\"]);\n\n  var {\n    isOpen,\n    onTransitionEnd\n  } = useMenuContext();\n  var listProps = useMenuList(rest, ref);\n  var positionerProps = useMenuPositioner(rootProps);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, positionerProps, {\n    __css: {\n      zIndex: (_props$zIndex = props.zIndex) != null ? _props$zIndex : (_styles$list = styles.list) == null ? void 0 : _styles$list.zIndex\n    }\n  }), /*#__PURE__*/React.createElement(Motion, _extends({}, listProps, {\n    /**\n     * We could call this on either `onAnimationComplete` or `onUpdate`.\n     * It seems the re-focusing works better with the `onUpdate`\n     */\n    onUpdate: onTransitionEnd,\n    className: cx(\"chakra-menu__menu-list\", listProps.className),\n    variants: motionVariants,\n    initial: false,\n    animate: isOpen ? \"enter\" : \"exit\",\n    __css: _extends({\n      outline: 0\n    }, styles.list)\n  })));\n});\n\nif (__DEV__) {\n  MenuList.displayName = \"MenuList\";\n}\n\nvar StyledMenuItem = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    type\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"type\"]);\n\n  var styles = useStyles();\n  /**\n   * Given another component, use its type if present\n   * Else, use no type to avoid invalid html, e.g. <a type=\"button\" />\n   * Else, fall back to \"button\"\n   */\n\n  var btnType = rest.as ? type != null ? type : undefined : \"button\";\n\n  var buttonStyles = _extends({\n    textDecoration: \"none\",\n    color: \"inherit\",\n    userSelect: \"none\",\n    display: \"flex\",\n    width: \"100%\",\n    alignItems: \"center\",\n    textAlign: \"left\",\n    flex: \"0 0 auto\",\n    outline: 0\n  }, styles.item);\n\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({\n    ref: ref,\n    type: btnType\n  }, rest, {\n    __css: buttonStyles\n  }));\n});\nexport var MenuItem = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    icon,\n    iconSpacing = \"0.75rem\",\n    command,\n    commandSpacing = \"0.75rem\",\n    children\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"icon\", \"iconSpacing\", \"command\", \"commandSpacing\", \"children\"]);\n\n  var menuItemProps = useMenuItem(rest, ref);\n  var shouldWrap = icon || command;\n\n  var _children = shouldWrap ? /*#__PURE__*/React.createElement(chakra.span, {\n    pointerEvents: \"none\",\n    flex: \"1\"\n  }, children) : children;\n\n  return /*#__PURE__*/React.createElement(StyledMenuItem, _extends({}, menuItemProps, {\n    className: cx(\"chakra-menu__menuitem\", menuItemProps.className)\n  }), icon && /*#__PURE__*/React.createElement(MenuIcon, {\n    fontSize: \"0.8em\",\n    marginEnd: iconSpacing\n  }, icon), _children, command && /*#__PURE__*/React.createElement(MenuCommand, {\n    marginStart: commandSpacing\n  }, command));\n});\n\nif (__DEV__) {\n  MenuItem.displayName = \"MenuItem\";\n}\n\nvar CheckIcon = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 14 14\",\n  width: \"1em\",\n  height: \"1em\"\n}, props), /*#__PURE__*/React.createElement(\"polygon\", {\n  fill: \"currentColor\",\n  points: \"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n}));\n\nexport var MenuItemOption = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    icon,\n    iconSpacing = \"0.75rem\"\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"icon\", \"iconSpacing\"]);\n\n  var optionProps = useMenuOption(rest, ref);\n  return /*#__PURE__*/React.createElement(StyledMenuItem, _extends({}, optionProps, {\n    className: cx(\"chakra-menu__menuitem-option\", rest.className)\n  }), /*#__PURE__*/React.createElement(MenuIcon, {\n    fontSize: \"0.8em\",\n    marginEnd: iconSpacing,\n    opacity: props.isChecked ? 1 : 0\n  }, icon || /*#__PURE__*/React.createElement(CheckIcon, null)), /*#__PURE__*/React.createElement(chakra.span, {\n    flex: \"1\"\n  }, optionProps.children));\n});\nMenuItemOption.id = \"MenuItemOption\";\n\nif (__DEV__) {\n  MenuItemOption.displayName = \"MenuItemOption\";\n}\n\nexport var MenuOptionGroup = props => {\n  var {\n    className,\n    title\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"title\"]);\n\n  var ownProps = useMenuOptionGroup(rest);\n  return /*#__PURE__*/React.createElement(MenuGroup, _extends({\n    title: title,\n    className: cx(\"chakra-menu__option-group\", className)\n  }, ownProps));\n};\n\nif (__DEV__) {\n  MenuOptionGroup.displayName = \"MenuOptionGroup\";\n}\n\nexport var MenuGroup = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    title,\n    children,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"title\", \"children\", \"className\"]);\n\n  var _className = cx(\"chakra-menu__group__title\", className);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, {\n    ref: ref,\n    className: \"chakra-menu__group\",\n    role: \"group\"\n  }, title && /*#__PURE__*/React.createElement(chakra.p, _extends({\n    className: _className\n  }, rest, {\n    __css: styles.groupTitle\n  }), title), children);\n});\n\nif (__DEV__) {\n  MenuGroup.displayName = \"MenuGroup\";\n}\n\nexport var MenuCommand = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    ref: ref\n  }, props, {\n    __css: styles.command,\n    className: \"chakra-menu__command\"\n  }));\n});\n\nif (__DEV__) {\n  MenuCommand.displayName = \"MenuCommand\";\n}\n\nexport var MenuIcon = props => {\n  var {\n    className,\n    children\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\"]);\n\n  var child = React.Children.only(children);\n  var clone = /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {\n    focusable: \"false\",\n    \"aria-hidden\": true,\n    className: cx(\"chakra-menu__icon\", child.props.className)\n  }) : null;\n\n  var _className = cx(\"chakra-menu__icon-wrapper\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: _className\n  }, rest, {\n    __css: {\n      flexShrink: 0\n    }\n  }), clone);\n};\n\nif (__DEV__) {\n  MenuIcon.displayName = \"MenuIcon\";\n}\n\nexport var MenuDivider = props => {\n  var {\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.hr, _extends({\n    role: \"separator\",\n    \"aria-orientation\": \"horizontal\",\n    className: cx(\"chakra-menu__divider\", className)\n  }, rest, {\n    __css: styles.divider\n  }));\n};\n\nif (__DEV__) {\n  MenuDivider.displayName = \"MenuDivider\";\n}","map":{"version":3,"sources":["../../src/menu.tsx"],"names":["Menu","props","children","styles","useMultiStyleConfig","ownProps","omitThemingProps","ctx","useMenu","context","React","forceUpdate","runIfFn","StyledMenuButton","forwardRef","useStyles","ref","display","appearance","alignItems","outline","transition","MenuButton","as","As","rest","buttonProps","useMenuButton","Element","cx","pointerEvents","flex","motionVariants","enter","visibility","opacity","scale","duration","ease","exit","transitionEnd","easings","Motion","chakra","motion","MenuList","rootProps","onTransitionEnd","useMenuContext","listProps","useMenuList","positionerProps","useMenuPositioner","zIndex","isOpen","StyledMenuItem","type","btnType","buttonStyles","textDecoration","color","userSelect","width","textAlign","MenuItem","iconSpacing","commandSpacing","menuItemProps","useMenuItem","shouldWrap","icon","_children","command","CheckIcon","MenuItemOption","optionProps","useMenuOption","MenuOptionGroup","title","useMenuOptionGroup","MenuGroup","className","_className","groupTitle","MenuCommand","MenuIcon","child","clone","focusable","flexShrink","MenuDivider","divider"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  PropsOf,\n  StylesProvider,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, MaybeRenderProp, runIfFn, __DEV__ } from \"@chakra-ui/utils\"\nimport { motion, Variants } from \"framer-motion\"\nimport * as React from \"react\"\nimport {\n  MenuProvider,\n  useMenu,\n  useMenuButton,\n  useMenuContext,\n  useMenuItem,\n  UseMenuItemProps,\n  useMenuList,\n  useMenuOption,\n  useMenuOptionGroup,\n  UseMenuOptionGroupProps,\n  UseMenuOptionOptions,\n  useMenuPositioner,\n  UseMenuProps,\n} from \"./use-menu\"\n\nexport interface MenuProps extends UseMenuProps, ThemingProps<\"Menu\"> {\n  children: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | null\n  }>\n}\n\n/**\n * Menu provides context, state, and focus management\n * to its sub-components. It doesn't render any DOM node.\n */\nexport const Menu: React.FC<MenuProps> = (props) => {\n  const { children } = props\n\n  const styles = useMultiStyleConfig(\"Menu\", props)\n  const ownProps = omitThemingProps(props)\n\n  const ctx = useMenu(ownProps)\n  const context = React.useMemo(() => ctx, [ctx])\n\n  const { isOpen, onClose, forceUpdate } = context\n\n  return (\n    <MenuProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, { isOpen, onClose, forceUpdate })}\n      </StylesProvider>\n    </MenuProvider>\n  )\n}\n\nif (__DEV__) {\n  Menu.displayName = \"Menu\"\n}\n\nexport interface MenuButtonProps extends HTMLChakraProps<\"button\"> {}\n\nconst StyledMenuButton = forwardRef<MenuButtonProps, \"button\">((props, ref) => {\n  const styles = useStyles()\n  return (\n    <chakra.button\n      ref={ref}\n      {...props}\n      __css={{\n        display: \"inline-flex\",\n        appearance: \"none\",\n        alignItems: \"center\",\n        outline: 0,\n        transition: \"all 250ms\",\n        ...styles.button,\n      }}\n    />\n  )\n})\n\n/**\n * The trigger for the menu list. Must be a direct child of `Menu`.\n */\nexport const MenuButton = forwardRef<MenuButtonProps, \"button\">(\n  (props, ref) => {\n    const { children, as: As, ...rest } = props\n\n    const buttonProps = useMenuButton(rest, ref)\n\n    const Element = As || StyledMenuButton\n\n    return (\n      <Element\n        {...buttonProps}\n        className={cx(\"chakra-menu__menu-button\", props.className)}\n      >\n        <chakra.span __css={{ pointerEvents: \"none\", flex: \"1 1 auto\" }}>\n          {props.children}\n        </chakra.span>\n      </Element>\n    )\n  },\n)\n\nif (__DEV__) {\n  MenuButton.displayName = \"MenuButton\"\n}\n\nexport interface MenuListProps extends HTMLChakraProps<\"div\"> {\n  rootProps?: HTMLChakraProps<\"div\">\n}\n\nconst motionVariants: Variants = {\n  enter: {\n    visibility: \"visible\",\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  exit: {\n    transitionEnd: {\n      visibility: \"hidden\",\n    },\n    opacity: 0,\n    scale: 0.8,\n    transition: {\n      duration: 0.1,\n      easings: \"easeOut\",\n    },\n  },\n}\n\nconst Motion = chakra(motion.div)\n\nexport const MenuList = forwardRef<MenuListProps, \"div\">((props, ref) => {\n  const { rootProps, ...rest } = props\n  const { isOpen, onTransitionEnd } = useMenuContext()\n\n  const listProps = useMenuList(rest, ref)\n  const positionerProps = useMenuPositioner(rootProps)\n\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...positionerProps}\n      __css={{ zIndex: props.zIndex ?? styles.list?.zIndex }}\n    >\n      <Motion\n        {...listProps}\n        /**\n         * We could call this on either `onAnimationComplete` or `onUpdate`.\n         * It seems the re-focusing works better with the `onUpdate`\n         */\n        onUpdate={onTransitionEnd}\n        className={cx(\"chakra-menu__menu-list\", listProps.className)}\n        variants={motionVariants}\n        initial={false}\n        animate={isOpen ? \"enter\" : \"exit\"}\n        __css={{\n          outline: 0,\n          ...styles.list,\n        }}\n      />\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  MenuList.displayName = \"MenuList\"\n}\n\nexport interface StyledMenuItemProps extends HTMLChakraProps<\"button\"> {}\n\nconst StyledMenuItem = forwardRef<StyledMenuItemProps, \"button\">(\n  (props, ref) => {\n    const { type, ...rest } = props\n    const styles = useStyles()\n\n    /**\n     * Given another component, use its type if present\n     * Else, use no type to avoid invalid html, e.g. <a type=\"button\" />\n     * Else, fall back to \"button\"\n     */\n    const btnType = rest.as ? type ?? undefined : \"button\"\n\n    const buttonStyles: SystemStyleObject = {\n      textDecoration: \"none\",\n      color: \"inherit\",\n      userSelect: \"none\",\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      textAlign: \"left\",\n      flex: \"0 0 auto\",\n      outline: 0,\n      ...styles.item,\n    }\n\n    return (\n      <chakra.button ref={ref} type={btnType} {...rest} __css={buttonStyles} />\n    )\n  },\n)\n\ninterface MenuItemOptions\n  extends Pick<UseMenuItemProps, \"isDisabled\" | \"isFocusable\"> {\n  /**\n   * The icon to render before the menu item's label.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * The spacing between the icon and menu item's label.\n   * @type SystemProps[\"mr\"]\n   */\n  iconSpacing?: SystemProps[\"mr\"]\n  /**\n   * Right-aligned label text content, useful for displaying hotkeys.\n   */\n  command?: string\n  /**\n   * The spacing between the command and menu item's label.\n   * @type SystemProps[\"ml\"]\n   */\n  commandSpacing?: SystemProps[\"ml\"]\n}\n\nexport interface MenuItemProps\n  extends HTMLChakraProps<\"button\">,\n    MenuItemOptions {}\n\nexport const MenuItem = forwardRef<MenuItemProps, \"button\">((props, ref) => {\n  const {\n    icon,\n    iconSpacing = \"0.75rem\",\n    command,\n    commandSpacing = \"0.75rem\",\n    children,\n    ...rest\n  } = props\n\n  const menuItemProps = useMenuItem(rest, ref) as MenuItemProps\n\n  const shouldWrap = icon || command\n\n  const _children = shouldWrap ? (\n    <chakra.span pointerEvents=\"none\" flex=\"1\">\n      {children}\n    </chakra.span>\n  ) : (\n    children\n  )\n\n  return (\n    <StyledMenuItem\n      {...menuItemProps}\n      className={cx(\"chakra-menu__menuitem\", menuItemProps.className)}\n    >\n      {icon && (\n        <MenuIcon fontSize=\"0.8em\" marginEnd={iconSpacing}>\n          {icon}\n        </MenuIcon>\n      )}\n      {_children}\n      {command && (\n        <MenuCommand marginStart={commandSpacing}>{command}</MenuCommand>\n      )}\n    </StyledMenuItem>\n  )\n})\n\nif (__DEV__) {\n  MenuItem.displayName = \"MenuItem\"\n}\n\nconst CheckIcon: React.FC<PropsOf<\"svg\">> = (props) => (\n  <svg viewBox=\"0 0 14 14\" width=\"1em\" height=\"1em\" {...props}>\n    <polygon\n      fill=\"currentColor\"\n      points=\"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n    />\n  </svg>\n)\n\nexport interface MenuItemOptionProps\n  extends UseMenuOptionOptions,\n    Omit<MenuItemProps, keyof UseMenuOptionOptions> {\n  /**\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * @type SystemProps[\"mr\"]\n   */\n  iconSpacing?: SystemProps[\"mr\"]\n}\n\nexport const MenuItemOption = forwardRef<MenuItemOptionProps, \"button\">(\n  (props, ref) => {\n    const { icon, iconSpacing = \"0.75rem\", ...rest } = props\n\n    const optionProps = useMenuOption(rest, ref) as StyledMenuItemProps\n\n    return (\n      <StyledMenuItem\n        {...optionProps}\n        className={cx(\"chakra-menu__menuitem-option\", rest.className)}\n      >\n        <MenuIcon\n          fontSize=\"0.8em\"\n          marginEnd={iconSpacing}\n          opacity={props.isChecked ? 1 : 0}\n        >\n          {icon || <CheckIcon />}\n        </MenuIcon>\n        <chakra.span flex=\"1\">{optionProps.children}</chakra.span>\n      </StyledMenuItem>\n    )\n  },\n)\n\nMenuItemOption.id = \"MenuItemOption\"\n\nif (__DEV__) {\n  MenuItemOption.displayName = \"MenuItemOption\"\n}\n\nexport interface MenuOptionGroupProps\n  extends UseMenuOptionGroupProps,\n    Omit<MenuGroupProps, \"value\" | \"defaultValue\" | \"onChange\"> {}\n\nexport const MenuOptionGroup: React.FC<MenuOptionGroupProps> = (props) => {\n  const { className, title, ...rest } = props\n  const ownProps = useMenuOptionGroup(rest)\n  return (\n    <MenuGroup\n      title={title}\n      className={cx(\"chakra-menu__option-group\", className)}\n      {...ownProps}\n    />\n  )\n}\n\nif (__DEV__) {\n  MenuOptionGroup.displayName = \"MenuOptionGroup\"\n}\n\nexport interface MenuGroupProps extends HTMLChakraProps<\"div\"> {}\n\nexport const MenuGroup = forwardRef<MenuGroupProps, \"div\">((props, ref) => {\n  const { title, children, className, ...rest } = props\n\n  const _className = cx(\"chakra-menu__group__title\", className)\n  const styles = useStyles()\n\n  return (\n    <chakra.div ref={ref} className=\"chakra-menu__group\" role=\"group\">\n      {title && (\n        <chakra.p className={_className} {...rest} __css={styles.groupTitle}>\n          {title}\n        </chakra.p>\n      )}\n      {children}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  MenuGroup.displayName = \"MenuGroup\"\n}\n\nexport interface MenuCommandProps extends HTMLChakraProps<\"span\"> {}\n\nexport const MenuCommand = forwardRef<MenuCommandProps, \"span\">(\n  (props, ref) => {\n    const styles = useStyles()\n    return (\n      <chakra.span\n        ref={ref}\n        {...props}\n        __css={styles.command}\n        className=\"chakra-menu__command\"\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  MenuCommand.displayName = \"MenuCommand\"\n}\n\nexport const MenuIcon: React.FC<HTMLChakraProps<\"span\">> = (props) => {\n  const { className, children, ...rest } = props\n\n  const child = React.Children.only(children)\n\n  const clone = React.isValidElement(child)\n    ? React.cloneElement(child, {\n        focusable: \"false\",\n        \"aria-hidden\": true,\n        className: cx(\"chakra-menu__icon\", child.props.className),\n      })\n    : null\n\n  const _className = cx(\"chakra-menu__icon-wrapper\", className)\n\n  return (\n    <chakra.span\n      className={_className}\n      {...rest}\n      __css={{\n        flexShrink: 0,\n      }}\n    >\n      {clone}\n    </chakra.span>\n  )\n}\n\nif (__DEV__) {\n  MenuIcon.displayName = \"MenuIcon\"\n}\n\nexport interface MenuDividerProps extends HTMLChakraProps<\"hr\"> {}\n\nexport const MenuDivider: React.FC<MenuDividerProps> = (props) => {\n  const { className, ...rest } = props\n  const styles = useStyles()\n  return (\n    <chakra.hr\n      role=\"separator\"\n      aria-orientation=\"horizontal\"\n      className={cx(\"chakra-menu__divider\", className)}\n      {...rest}\n      __css={styles.divider}\n    />\n  )\n}\n\nif (__DEV__) {\n  MenuDivider.displayName = \"MenuDivider\"\n}\n"]},"metadata":{},"sourceType":"module"}