{"ast":null,"code":"import { isArray, isCustomBreakpoint, isObject, isResponsiveObjectLike, memoizedGet as get, mergeWith, objectToArrayNotation, runIfFn } from \"@chakra-ui/utils\";\nimport { parser } from \"./parser\";\nimport { pseudoSelectors } from \"./pseudo\";\nvar cache = {\n  themeBreakpoints: [],\n  breakpoints: [],\n  breakpointValues: [],\n  mediaQueries: []\n};\n/**\n *\n */\n\nvar calculateBreakpointAndMediaQueries = function calculateBreakpointAndMediaQueries(themeBreakpoints) {\n  if (themeBreakpoints === void 0) {\n    themeBreakpoints = [];\n  } // caching here reduces execution time by factor 4-6x\n\n\n  var isCached = cache.themeBreakpoints === themeBreakpoints;\n\n  if (isCached) {\n    return cache;\n  }\n\n  var {\n    breakpoints,\n    breakpointValues\n  } = Object.entries(themeBreakpoints).filter(_ref => {\n    var [key] = _ref;\n    return isCustomBreakpoint(key);\n  }).reduce((carry, _ref2) => {\n    var [breakpoint, value] = _ref2;\n    carry.breakpoints.push(breakpoint);\n    carry.breakpointValues.push(value);\n    return carry;\n  }, {\n    breakpoints: [],\n    breakpointValues: []\n  });\n  var mediaQueries = [null, ...breakpointValues.map(bp => \"@media screen and (min-width: \" + bp + \")\").slice(1)];\n  cache.themeBreakpoints = themeBreakpoints;\n  cache.mediaQueries = mediaQueries;\n  cache.breakpointValues = breakpointValues;\n  cache.breakpoints = breakpoints;\n  return {\n    breakpoints,\n    mediaQueries\n  };\n};\n\nexport var processResponsive = styles => theme => {\n  var computedStyles = {};\n  var {\n    breakpoints,\n    mediaQueries\n  } = calculateBreakpointAndMediaQueries(theme.breakpoints);\n\n  for (var key in styles) {\n    var value = runIfFn(styles[key], theme);\n\n    if (value == null) {\n      continue;\n    }\n\n    value = isResponsiveObjectLike(value, breakpoints) ? objectToArrayNotation(value, breakpoints) : value;\n\n    if (!isArray(value)) {\n      computedStyles[key] = value;\n      continue;\n    }\n\n    var queries = value.slice(0, mediaQueries.length).length;\n\n    for (var index = 0; index < queries; index += 1) {\n      var media = mediaQueries[index];\n\n      if (!media) {\n        computedStyles[key] = value[index];\n        continue;\n      }\n\n      computedStyles[media] = computedStyles[media] || {};\n\n      if (value[index] == null) {\n        continue;\n      }\n\n      computedStyles[media][key] = value[index];\n    }\n  }\n\n  return computedStyles;\n};\nexport var css = function css(styleOrFn) {\n  if (styleOrFn === void 0) {\n    styleOrFn = {};\n  }\n\n  return function (props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    var theme = \"theme\" in props ? props.theme : props;\n    var computedStyles = {};\n    var styleObject = runIfFn(styleOrFn, theme);\n    var styles = processResponsive(styleObject)(theme);\n\n    for (var k in styles) {\n      var _config, _config$transform, _config2, _config3, _config4;\n\n      var x = styles[k];\n      var val = runIfFn(x, theme);\n      var key = k in pseudoSelectors ? pseudoSelectors[k] : k;\n      var config = parser.config[key];\n\n      if (config === true) {\n        // shortcut definition\n        config = {\n          property: key,\n          scale: key\n        };\n      }\n\n      if (key === \"apply\") {\n        var apply = css(get(theme, val))(theme);\n        computedStyles = mergeWith({}, computedStyles, apply);\n        continue;\n      }\n\n      if (isObject(val)) {\n        computedStyles[key] = css(val)(theme);\n        continue;\n      }\n\n      var scale = get(theme, (_config = config) == null ? void 0 : _config.scale, {});\n      var value = (_config$transform = (_config2 = config) == null ? void 0 : _config2.transform == null ? void 0 : _config2.transform(val, scale, props)) != null ? _config$transform : get(scale, val, val);\n\n      if ((_config3 = config) != null && _config3.properties) {\n        for (var property of config.properties) {\n          computedStyles[property] = value;\n        }\n\n        continue;\n      }\n\n      if ((_config4 = config) != null && _config4.property) {\n        /**\n         * Used for styled-system configs that map to multiple computed properties.\n         * For example, the `borderLeftRadius` computed keys based on rtl/ltr\n         */\n        if (config.property === \"&\") {\n          computedStyles = mergeWith({}, computedStyles, value);\n        } else {\n          computedStyles[config.property] = value;\n        }\n\n        continue;\n      }\n\n      computedStyles[key] = value;\n    }\n\n    return computedStyles;\n  };\n};","map":{"version":3,"sources":["../../src/css.ts"],"names":["memoizedGet","cache","themeBreakpoints","breakpoints","breakpointValues","mediaQueries","calculateBreakpointAndMediaQueries","isCached","isCustomBreakpoint","carry","bp","processResponsive","styles","theme","computedStyles","value","runIfFn","isResponsiveObjectLike","objectToArrayNotation","isArray","queries","index","media","css","styleOrFn","props","styleObject","x","val","key","k","pseudoSelectors","config","parser","property","scale","apply","get","mergeWith","isObject"],"mappings":"AAAA,SAAA,OAAA,EAAA,kBAAA,EAAA,QAAA,EAAA,sBAAA,EAMEA,WAAW,IANb,GAAA,EAAA,SAAA,EAAA,qBAAA,EAAA,OAAA,QAAA,kBAAA;AAYA,SAAA,MAAA,QAAA,UAAA;AACA,SAAA,eAAA,QAAA,UAAA;AASA,IAAMC,KAAY,GAAG;EACnBC,gBAAgB,EADG,EAAA;EAEnBC,WAAW,EAFQ,EAAA;EAGnBC,gBAAgB,EAHG,EAAA;EAInBC,YAAY,EAAE;AAJK,CAArB;AAkBA;AACA;AACA;;AACA,IAAMC,kCAAkC,GAAG,SAArCA,kCAAqC,CAAA,gBAAA,EAEtC;EAAA,IADHJ,gBACG,KAAA,KAAA,CAAA,EAAA;IADHA,gBACG,GAD0B,EAA7BA;EACG,CAAA,CACH;;;EACA,IAAMK,QAAQ,GAAGN,KAAK,CAALA,gBAAAA,KAAjB,gBAAA;;EAEA,IAAA,QAAA,EAAc;IACZ,OAAA,KAAA;EACD;;EAED,IAAM;IAAA,WAAA;IAAeG;EAAf,IAAoC,MAAM,CAAN,OAAA,CAAA,gBAAA,EAAA,MAAA,CAChC,IAAA,IAAA;IAAA,IAAC,CAAD,GAAC,IAAD,IAAA;IAAA,OAAWI,kBAAkB,CAA7B,GAA6B,CAA7B;EADgC,CAAA,EAAA,MAAA,CAGtC,CAAA,KAAA,EAAA,KAAA,KAAgC;IAAA,IAAxB,CAAA,UAAA,EAAA,KAAA,IAAwB,KAAA;IAC9BC,KAAK,CAALA,WAAAA,CAAAA,IAAAA,CAAAA,UAAAA;IACAA,KAAK,CAALA,gBAAAA,CAAAA,IAAAA,CAAAA,KAAAA;IAEA,OAAA,KAAA;EAPoC,CAAA,EAStC;IACEN,WAAW,EADb,EAAA;IAEEC,gBAAgB,EAAE;EAFpB,CATsC,CAA1C;EAeA,IAAMC,YAAY,GAAG,CAAA,IAAA,EAEnB,GAAGD,gBAAgB,CAAhBA,GAAAA,CACKM,EAAD,IAAA,mCAAA,EAAA,GADJN,GAAAA,EAAAA,KAAAA,CAFL,CAEKA,CAFgB,CAArB;EAOAH,KAAK,CAALA,gBAAAA,GAAAA,gBAAAA;EACAA,KAAK,CAALA,YAAAA,GAAAA,YAAAA;EACAA,KAAK,CAALA,gBAAAA,GAAAA,gBAAAA;EACAA,KAAK,CAALA,WAAAA,GAAAA,WAAAA;EAEA,OAAO;IAAA,WAAA;IAELI;EAFK,CAAP;AArCF,CAAA;;AA2CA,OAAO,IAAMM,iBAAiB,GAAIC,MAAD,IAAkBC,KAAD,IAAiB;EACjE,IAAMC,cAAmB,GAAzB,EAAA;EAEA,IAAM;IAAA,WAAA;IAAeT;EAAf,IAAgCC,kCAAkC,CACtEO,KAAK,CADP,WAAwE,CAAxE;;EAIA,KAAK,IAAL,GAAA,IAAA,MAAA,EAA0B;IACxB,IAAIE,KAAK,GAAGC,OAAO,CAACJ,MAAM,CAAP,GAAO,CAAP,EAAnB,KAAmB,CAAnB;;IAEA,IAAIG,KAAK,IAAT,IAAA,EAAmB;MACjB;IACD;;IAEDA,KAAK,GAAGE,sBAAsB,CAAA,KAAA,EAAtBA,WAAsB,CAAtBA,GACJC,qBAAqB,CAAA,KAAA,EADjBD,WACiB,CADjBA,GAARF,KAAAA;;IAIA,IAAI,CAACI,OAAO,CAAZ,KAAY,CAAZ,EAAqB;MACnBL,cAAc,CAAdA,GAAc,CAAdA,GAAAA,KAAAA;MACA;IACD;;IAED,IAAMM,OAAO,GAAGL,KAAK,CAALA,KAAAA,CAAAA,CAAAA,EAAeV,YAAY,CAA3BU,MAAAA,EAAhB,MAAA;;IAEA,KAAK,IAAIM,KAAK,GAAd,CAAA,EAAoBA,KAAK,GAAzB,OAAA,EAAqCA,KAAK,IAA1C,CAAA,EAAiD;MAC/C,IAAMC,KAAK,GAAGjB,YAAY,CAA1B,KAA0B,CAA1B;;MAEA,IAAI,CAAJ,KAAA,EAAY;QACVS,cAAc,CAAdA,GAAc,CAAdA,GAAsBC,KAAK,CAA3BD,KAA2B,CAA3BA;QACA;MACD;;MAEDA,cAAc,CAAdA,KAAc,CAAdA,GAAwBA,cAAc,CAAdA,KAAc,CAAdA,IAAxBA,EAAAA;;MAEA,IAAIC,KAAK,CAALA,KAAK,CAALA,IAAJ,IAAA,EAA0B;QACxB;MACD;;MAEDD,cAAc,CAAdA,KAAc,CAAdA,CAAAA,GAAAA,IAA6BC,KAAK,CAAlCD,KAAkC,CAAlCA;IACD;EACF;;EAED,OAAA,cAAA;AA3CK,CAAA;AAgDP,OAAO,IAAMS,GAAG,GAAG,SAANA,GAAM,CAAA,SAAA,EAAA;EAAA,IAACC,SAAD,KAAA,KAAA,CAAA,EAAA;IAACA,SAAD,GAAA,EAACA;EAAD;;EAAA,OAAqC,UAAA,KAAA,EAExC;IAAA,IADdC,KACc,KAAA,KAAA,CAAA,EAAA;MADdA,KACc,GADQ,EAAtBA;IACc;;IACd,IAAMZ,KAAK,GAAG,WAAA,KAAA,GAAmBY,KAAK,CAAxB,KAAA,GAAd,KAAA;IAEA,IAAIX,cAAyB,GAA7B,EAAA;IAEA,IAAMY,WAAW,GAAGV,OAAO,CAAA,SAAA,EAA3B,KAA2B,CAA3B;IACA,IAAMJ,MAAM,GAAGD,iBAAiB,CAAjBA,WAAiB,CAAjBA,CAAf,KAAeA,CAAf;;IAEA,KAAK,IAAL,CAAA,IAAA,MAAA,EAAwB;MAAA,IAAA,OAAA,EAAA,iBAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA;;MACtB,IAAMgB,CAAC,GAAGf,MAAM,CAAhB,CAAgB,CAAhB;MACA,IAAMgB,GAAG,GAAGZ,OAAO,CAAA,CAAA,EAAnB,KAAmB,CAAnB;MAEA,IAAMa,GAAG,GAAGC,CAAC,IAADA,eAAAA,GAAuBC,eAAe,CAAtCD,CAAsC,CAAtCA,GAAZ,CAAA;MACA,IAAIE,MAAM,GAAIC,MAAM,CAAP,MAACA,CAAd,GAAcA,CAAd;;MAEA,IAAID,MAAM,KAAV,IAAA,EAAqB;QACnB;QACAA,MAAM,GAAG;UACPE,QAAQ,EADD,GAAA;UAEPC,KAAK,EAAEN;QAFA,CAATG;MAID;;MAED,IAAIH,GAAG,KAAP,OAAA,EAAqB;QACnB,IAAMO,KAAK,GAAGb,GAAG,CAACc,GAAG,CAAA,KAAA,EAAPd,GAAO,CAAJ,CAAHA,CAAd,KAAcA,CAAd;QACAT,cAAc,GAAGwB,SAAS,CAAA,EAAA,EAAA,cAAA,EAA1BxB,KAA0B,CAA1BA;QACA;MACD;;MAED,IAAIyB,QAAQ,CAAZ,GAAY,CAAZ,EAAmB;QACjBzB,cAAc,CAAdA,GAAc,CAAdA,GAAsBS,GAAG,CAAHA,GAAG,CAAHA,CAAtBT,KAAsBS,CAAtBT;QACA;MACD;;MAED,IAAMqB,KAAK,GAAGE,GAAG,CAAA,KAAA,EAAA,CAAA,OAAA,GAAA,MAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAQL,OAAAA,CAAR,KAAA,EAAjB,EAAiB,CAAjB;MACA,IAAMjB,KAAK,GAAA,CAAA,iBAAA,GAAA,CAAA,QAAA,GAAA,MAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAGiB,QAAAA,CAAH,SAAGA,IAAH,IAAGA,GAAH,KAAA,CAAGA,GAAAA,QAAAA,CAAAA,SAAAA,CAAAA,GAAAA,EAAAA,KAAAA,EAAH,KAAGA,CAAH,KAAA,IAAA,GAAA,iBAAA,GAA6CK,GAAG,CAAA,KAAA,EAAA,GAAA,EAA3D,GAA2D,CAA3D;;MAEA,IAAA,CAAA,QAAA,GAAA,MAAA,KAAA,IAAA,IAAIL,QAAAA,CAAJ,UAAA,EAAwB;QACtB,KAAK,IAAL,QAAA,IAAuBA,MAAM,CAA7B,UAAA,EAA0C;UACxClB,cAAc,CAAdA,QAAc,CAAdA,GAAAA,KAAAA;QACD;;QACD;MACD;;MAED,IAAA,CAAA,QAAA,GAAA,MAAA,KAAA,IAAA,IAAIkB,QAAAA,CAAJ,QAAA,EAAsB;QACpB;AACN;AACA;AACA;QACM,IAAIA,MAAM,CAANA,QAAAA,KAAJ,GAAA,EAA6B;UAC3BlB,cAAc,GAAGwB,SAAS,CAAA,EAAA,EAAA,cAAA,EAA1BxB,KAA0B,CAA1BA;QADF,CAAA,MAEO;UACLA,cAAc,CAACkB,MAAM,CAArBlB,QAAc,CAAdA,GAAAA,KAAAA;QACD;;QACD;MACD;;MAEDA,cAAc,CAAdA,GAAc,CAAdA,GAAAA,KAAAA;IACD;;IAED,OAAA,cAAA;EA9DiB,CAAA;AAAZ,CAAA","sourcesContent":["import {\n  Dict,\n  isArray,\n  isCustomBreakpoint,\n  isObject,\n  isResponsiveObjectLike,\n  memoizedGet as get,\n  mergeWith,\n  objectToArrayNotation,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport { CSSObject, StyleObjectOrFn } from \"./types\"\nimport { parser } from \"./parser\"\nimport { pseudoSelectors } from \"./pseudo\"\n\ninterface Cache {\n  themeBreakpoints: string[]\n  breakpoints: string[]\n  breakpointValues: string[]\n  mediaQueries: (string | null)[]\n}\n\nconst cache: Cache = {\n  themeBreakpoints: [],\n  breakpoints: [],\n  breakpointValues: [],\n  mediaQueries: [],\n}\n\ninterface BreakpointValueObj {\n  /**\n   * left side of a breakpoint object, the name, e.g. sm\n   */\n  breakpoints: string[]\n  /**\n   * right side of a breakpoint object, the size, e.g. 4\n   */\n  breakpointValues: string[]\n}\n\n/**\n *\n */\nconst calculateBreakpointAndMediaQueries = (\n  themeBreakpoints: string[] = [],\n) => {\n  // caching here reduces execution time by factor 4-6x\n  const isCached = cache.themeBreakpoints === themeBreakpoints\n\n  if (isCached) {\n    return cache\n  }\n\n  const { breakpoints, breakpointValues } = Object.entries(themeBreakpoints)\n    .filter(([key]) => isCustomBreakpoint(key))\n    .reduce<BreakpointValueObj>(\n      (carry, [breakpoint, value]) => {\n        carry.breakpoints.push(breakpoint)\n        carry.breakpointValues.push(value)\n\n        return carry\n      },\n      {\n        breakpoints: [],\n        breakpointValues: [],\n      },\n    )\n\n  const mediaQueries = [\n    null,\n    ...breakpointValues\n      .map((bp) => `@media screen and (min-width: ${bp})`)\n      .slice(1),\n  ]\n\n  cache.themeBreakpoints = themeBreakpoints\n  cache.mediaQueries = mediaQueries\n  cache.breakpointValues = breakpointValues\n  cache.breakpoints = breakpoints\n\n  return {\n    breakpoints,\n    mediaQueries,\n  }\n}\n\nexport const processResponsive = (styles: any) => (theme: Dict) => {\n  const computedStyles: any = {}\n\n  const { breakpoints, mediaQueries } = calculateBreakpointAndMediaQueries(\n    theme.breakpoints,\n  )\n\n  for (const key in styles) {\n    let value = runIfFn(styles[key], theme)\n\n    if (value == null) {\n      continue\n    }\n\n    value = isResponsiveObjectLike(value, breakpoints)\n      ? objectToArrayNotation(value, breakpoints)\n      : value\n\n    if (!isArray(value)) {\n      computedStyles[key] = value\n      continue\n    }\n\n    const queries = value.slice(0, mediaQueries.length).length\n\n    for (let index = 0; index < queries; index += 1) {\n      const media = mediaQueries[index]\n\n      if (!media) {\n        computedStyles[key] = value[index]\n        continue\n      }\n\n      computedStyles[media] = computedStyles[media] || {}\n\n      if (value[index] == null) {\n        continue\n      }\n\n      computedStyles[media][key] = value[index]\n    }\n  }\n\n  return computedStyles\n}\n\ntype PropsOrTheme = Dict | { theme: Dict }\n\nexport const css = (styleOrFn: StyleObjectOrFn = {}) => (\n  props: PropsOrTheme = {},\n): CSSObject => {\n  const theme = \"theme\" in props ? props.theme : props\n\n  let computedStyles: CSSObject = {}\n\n  const styleObject = runIfFn(styleOrFn, theme)\n  const styles = processResponsive(styleObject)(theme)\n\n  for (const k in styles) {\n    const x = styles[k]\n    const val = runIfFn(x, theme)\n\n    const key = k in pseudoSelectors ? pseudoSelectors[k] : k\n    let config = (parser.config as Dict)[key]\n\n    if (config === true) {\n      // shortcut definition\n      config = {\n        property: key,\n        scale: key,\n      }\n    }\n\n    if (key === \"apply\") {\n      const apply = css(get(theme, val))(theme)\n      computedStyles = mergeWith({}, computedStyles, apply)\n      continue\n    }\n\n    if (isObject(val)) {\n      computedStyles[key] = css(val)(theme)\n      continue\n    }\n\n    const scale = get(theme, config?.scale, {})\n    const value = config?.transform?.(val, scale, props) ?? get(scale, val, val)\n\n    if (config?.properties) {\n      for (const property of config.properties) {\n        computedStyles[property] = value\n      }\n      continue\n    }\n\n    if (config?.property) {\n      /**\n       * Used for styled-system configs that map to multiple computed properties.\n       * For example, the `borderLeftRadius` computed keys based on rtl/ltr\n       */\n      if (config.property === \"&\") {\n        computedStyles = mergeWith({}, computedStyles, value)\n      } else {\n        computedStyles[config.property] = value\n      }\n      continue\n    }\n\n    computedStyles[key] = value\n  }\n\n  return computedStyles\n}\n"]},"metadata":{},"sourceType":"module"}