{"ast":null,"code":"import { createParser, system } from \"../core\";\nimport { t } from \"../utils\";\nvar config = {\n  border: t.borders(\"border\"),\n  borderWidth: t.borderWidths(\"borderWidth\"),\n  borderStyle: t.borderStyles(\"borderStyle\"),\n  borderColor: t.colors(\"borderColor\"),\n  borderRadius: t.radii(\"borderRadius\"),\n  borderTop: t.borders(\"borderTop\"),\n  borderBlockStart: t.borders(\"borderBlockStart\"),\n  borderTopLeftRadius: t.radii(\"borderTopLeftRadius\"),\n  borderStartStartRadius: t.logical({\n    scale: \"radii\",\n    property: {\n      ltr: \"borderTopLeftRadius\",\n      rtl: \"borderTopRightRadius\"\n    }\n  }),\n  borderEndStartRadius: t.logical({\n    scale: \"radii\",\n    property: {\n      ltr: \"borderBottomLeftRadius\",\n      rtl: \"borderBottomRightRadius\"\n    }\n  }),\n  borderTopRightRadius: t.radii(\"borderTopRightRadius\"),\n  borderStartEndRadius: t.logical({\n    scale: \"radii\",\n    property: {\n      ltr: \"borderTopRightRadius\",\n      rtl: \"borderTopLeftRadius\"\n    }\n  }),\n  borderEndEndRadius: t.logical({\n    scale: \"radii\",\n    property: {\n      ltr: \"borderBottomRightRadius\",\n      rtl: \"borderBottomLeftRadius\"\n    }\n  }),\n  borderRight: t.borders(\"borderRight\"),\n  borderInlineEnd: t.borders(\"borderInlineEnd\"),\n  borderBottom: t.borders(\"borderBottom\"),\n  borderBlockEnd: t.borders(\"borderBlockEnd\"),\n  borderBottomLeftRadius: t.radii(\"borderBottomLeftRadius\"),\n  borderBottomRightRadius: t.radii(\"borderBottomRightRadius\"),\n  borderLeft: t.borders(\"borderLeft\"),\n  borderInlineStart: {\n    property: \"borderInlineStart\",\n    scale: \"borders\"\n  },\n  borderInlineStartRadius: t.logical({\n    scale: \"radii\",\n    property: {\n      ltr: [\"borderTopLeftRadius\", \"borderBottomLeftRadius\"],\n      rtl: [\"borderTopRightRadius\", \"borderBottomRightRadius\"]\n    }\n  }),\n  borderInlineEndRadius: t.logical({\n    scale: \"radii\",\n    property: {\n      ltr: [\"borderTopRightRadius\", \"borderBottomRightRadius\"],\n      rtl: [\"borderTopLeftRadius\", \"borderBottomLeftRadius\"]\n    }\n  }),\n  borderX: t.borders([\"borderLeft\", \"borderRight\"]),\n  borderInline: t.borders(\"borderInline\"),\n  borderY: t.borders([\"borderTop\", \"borderBottom\"]),\n  borderBlock: t.borders(\"borderBlock\"),\n  borderTopWidth: t.borderWidths(\"borderTopWidth\"),\n  borderBlockStartWidth: t.borderWidths(\"borderBlockStartWidth\"),\n  borderTopColor: t.colors(\"borderTopColor\"),\n  borderBlockStartColor: t.colors(\"borderBlockStartColor\"),\n  borderTopStyle: t.borderStyles(\"borderTopStyle\"),\n  borderBlockStartStyle: t.borderStyles(\"borderBlockStartStyle\"),\n  borderBottomWidth: t.borderWidths(\"borderBottomWidth\"),\n  borderBlockEndWidth: t.borderWidths(\"borderBlockEndWidth\"),\n  borderBottomColor: t.colors(\"borderBottomColor\"),\n  borderBlockEndColor: t.colors(\"borderBlockEndColor\"),\n  borderBottomStyle: t.borderStyles(\"borderBottomStyle\"),\n  borderBlockEndStyle: t.borderStyles(\"borderBlockEndStyle\"),\n  borderLeftWidth: t.borderWidths(\"borderLeftWidth\"),\n  borderInlineStartWidth: t.borderWidths(\"borderInlineStartWidth\"),\n  borderLeftColor: t.colors(\"borderLeftColor\"),\n  borderInlineStartColor: t.colors(\"borderInlineStartColor\"),\n  borderLeftStyle: t.borderStyles(\"borderLeftStyle\"),\n  borderInlineStartStyle: t.borderStyles(\"borderInlineStartStyle\"),\n  borderRightWidth: t.borderWidths(\"borderRightWidth\"),\n  borderInlineEndWidth: t.borderWidths(\"borderInlineEndWidth\"),\n  borderRightColor: t.colors(\"borderRightColor\"),\n  borderInlineEndColor: t.colors(\"borderInlineEndColor\"),\n  borderRightStyle: t.borderStyles(\"borderRightStyle\"),\n  borderInlineEndStyle: t.borderStyles(\"borderInlineEndStyle\"),\n  borderTopRadius: t.radii([\"borderTopLeftRadius\", \"borderTopRightRadius\"]),\n  borderBottomRadius: t.radii([\"borderBottomLeftRadius\", \"borderBottomRightRadius\"]),\n  borderLeftRadius: t.radii([\"borderTopLeftRadius\", \"borderBottomLeftRadius\"]),\n  borderRightRadius: t.radii([\"borderTopRightRadius\", \"borderBottomRightRadius\"])\n};\nObject.assign(config, {\n  rounded: config.borderRadius,\n  roundedTop: config.borderTopRadius,\n  roundedTopLeft: config.borderTopLeftRadius,\n  roundedTopRight: config.borderTopRightRadius,\n  roundedTopStart: config.borderStartStartRadius,\n  roundedTopEnd: config.borderStartEndRadius,\n  roundedBottom: config.borderBottomRadius,\n  roundedBottomLeft: config.borderBottomLeftRadius,\n  roundedBottomRight: config.borderBottomRightRadius,\n  roundedBottomStart: config.borderEndStartRadius,\n  roundedBottomEnd: config.borderEndEndRadius,\n  roundedLeft: config.borderLeftRadius,\n  roundedRight: config.borderRightRadius,\n  roundedStart: config.borderInlineStartRadius,\n  roundedEnd: config.borderInlineEndRadius,\n  borderStart: config.borderInlineStart,\n  borderEnd: config.borderInlineEnd,\n  borderTopStartRadius: config.borderStartStartRadius,\n  borderTopEndRadius: config.borderStartEndRadius,\n  borderBottomStartRadius: config.borderEndStartRadius,\n  borderBottomEndRadius: config.borderEndEndRadius,\n  borderStartRadius: config.borderInlineStartRadius,\n  borderEndRadius: config.borderInlineEndRadius,\n  borderStartWidth: config.borderInlineStartWidth,\n  borderEndWidth: config.borderInlineEndWidth,\n  borderStartColor: config.borderInlineStartColor,\n  borderEndColor: config.borderInlineEndColor,\n  borderStartStyle: config.borderInlineStartStyle,\n  borderEndStyle: config.borderInlineEndStyle\n});\n/**\n * The prop types for border properties listed above\n */\n\nexport var border = system(config);\nexport var borderParser = createParser(config);","map":{"version":3,"sources":["../../../src/config/border.ts"],"names":["config","border","t","borderWidth","borderStyle","borderColor","borderRadius","borderTop","borderBlockStart","borderTopLeftRadius","borderStartStartRadius","scale","property","ltr","rtl","borderEndStartRadius","borderTopRightRadius","borderStartEndRadius","borderEndEndRadius","borderRight","borderInlineEnd","borderBottom","borderBlockEnd","borderBottomLeftRadius","borderBottomRightRadius","borderLeft","borderInlineStart","borderInlineStartRadius","borderInlineEndRadius","borderX","borderInline","borderY","borderBlock","borderTopWidth","borderBlockStartWidth","borderTopColor","borderBlockStartColor","borderTopStyle","borderBlockStartStyle","borderBottomWidth","borderBlockEndWidth","borderBottomColor","borderBlockEndColor","borderBottomStyle","borderBlockEndStyle","borderLeftWidth","borderInlineStartWidth","borderLeftColor","borderInlineStartColor","borderLeftStyle","borderInlineStartStyle","borderRightWidth","borderInlineEndWidth","borderRightColor","borderInlineEndColor","borderRightStyle","borderInlineEndStyle","borderTopRadius","borderBottomRadius","borderLeftRadius","borderRightRadius","Object","rounded","roundedTop","roundedTopLeft","roundedTopRight","roundedTopStart","roundedTopEnd","roundedBottom","roundedBottomLeft","roundedBottomRight","roundedBottomStart","roundedBottomEnd","roundedLeft","roundedRight","roundedStart","roundedEnd","borderStart","borderEnd","borderTopStartRadius","borderTopEndRadius","borderBottomStartRadius","borderBottomEndRadius","borderStartRadius","borderEndRadius","borderStartWidth","borderEndWidth","borderStartColor","borderEndColor","borderStartStyle","borderEndStyle","system","borderParser","createParser"],"mappings":"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","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config, createParser, system } from \"../core\"\nimport { t, Token } from \"../utils\"\n\nconst config: Config = {\n  border: t.borders(\"border\"),\n  borderWidth: t.borderWidths(\"borderWidth\"),\n  borderStyle: t.borderStyles(\"borderStyle\"),\n  borderColor: t.colors(\"borderColor\"),\n  borderRadius: t.radii(\"borderRadius\"),\n  borderTop: t.borders(\"borderTop\"),\n  borderBlockStart: t.borders(\"borderBlockStart\"),\n  borderTopLeftRadius: t.radii(\"borderTopLeftRadius\"),\n  borderStartStartRadius: t.logical({\n    scale: \"radii\",\n    property: {\n      ltr: \"borderTopLeftRadius\",\n      rtl: \"borderTopRightRadius\",\n    },\n  }),\n  borderEndStartRadius: t.logical({\n    scale: \"radii\",\n    property: {\n      ltr: \"borderBottomLeftRadius\",\n      rtl: \"borderBottomRightRadius\",\n    },\n  }),\n  borderTopRightRadius: t.radii(\"borderTopRightRadius\"),\n  borderStartEndRadius: t.logical({\n    scale: \"radii\",\n    property: {\n      ltr: \"borderTopRightRadius\",\n      rtl: \"borderTopLeftRadius\",\n    },\n  }),\n  borderEndEndRadius: t.logical({\n    scale: \"radii\",\n    property: {\n      ltr: \"borderBottomRightRadius\",\n      rtl: \"borderBottomLeftRadius\",\n    },\n  }),\n  borderRight: t.borders(\"borderRight\"),\n  borderInlineEnd: t.borders(\"borderInlineEnd\"),\n  borderBottom: t.borders(\"borderBottom\"),\n  borderBlockEnd: t.borders(\"borderBlockEnd\"),\n  borderBottomLeftRadius: t.radii(\"borderBottomLeftRadius\"),\n  borderBottomRightRadius: t.radii(\"borderBottomRightRadius\"),\n  borderLeft: t.borders(\"borderLeft\"),\n  borderInlineStart: {\n    property: \"borderInlineStart\",\n    scale: \"borders\",\n  },\n  borderInlineStartRadius: t.logical({\n    scale: \"radii\",\n    property: {\n      ltr: [\"borderTopLeftRadius\", \"borderBottomLeftRadius\"],\n      rtl: [\"borderTopRightRadius\", \"borderBottomRightRadius\"],\n    },\n  }),\n  borderInlineEndRadius: t.logical({\n    scale: \"radii\",\n    property: {\n      ltr: [\"borderTopRightRadius\", \"borderBottomRightRadius\"],\n      rtl: [\"borderTopLeftRadius\", \"borderBottomLeftRadius\"],\n    },\n  }),\n  borderX: t.borders([\"borderLeft\", \"borderRight\"]),\n  borderInline: t.borders(\"borderInline\"),\n  borderY: t.borders([\"borderTop\", \"borderBottom\"]),\n  borderBlock: t.borders(\"borderBlock\"),\n  borderTopWidth: t.borderWidths(\"borderTopWidth\"),\n  borderBlockStartWidth: t.borderWidths(\"borderBlockStartWidth\"),\n  borderTopColor: t.colors(\"borderTopColor\"),\n  borderBlockStartColor: t.colors(\"borderBlockStartColor\"),\n  borderTopStyle: t.borderStyles(\"borderTopStyle\"),\n  borderBlockStartStyle: t.borderStyles(\"borderBlockStartStyle\"),\n  borderBottomWidth: t.borderWidths(\"borderBottomWidth\"),\n  borderBlockEndWidth: t.borderWidths(\"borderBlockEndWidth\"),\n  borderBottomColor: t.colors(\"borderBottomColor\"),\n  borderBlockEndColor: t.colors(\"borderBlockEndColor\"),\n  borderBottomStyle: t.borderStyles(\"borderBottomStyle\"),\n  borderBlockEndStyle: t.borderStyles(\"borderBlockEndStyle\"),\n  borderLeftWidth: t.borderWidths(\"borderLeftWidth\"),\n  borderInlineStartWidth: t.borderWidths(\"borderInlineStartWidth\"),\n  borderLeftColor: t.colors(\"borderLeftColor\"),\n  borderInlineStartColor: t.colors(\"borderInlineStartColor\"),\n  borderLeftStyle: t.borderStyles(\"borderLeftStyle\"),\n  borderInlineStartStyle: t.borderStyles(\"borderInlineStartStyle\"),\n  borderRightWidth: t.borderWidths(\"borderRightWidth\"),\n  borderInlineEndWidth: t.borderWidths(\"borderInlineEndWidth\"),\n  borderRightColor: t.colors(\"borderRightColor\"),\n  borderInlineEndColor: t.colors(\"borderInlineEndColor\"),\n  borderRightStyle: t.borderStyles(\"borderRightStyle\"),\n  borderInlineEndStyle: t.borderStyles(\"borderInlineEndStyle\"),\n  borderTopRadius: t.radii([\"borderTopLeftRadius\", \"borderTopRightRadius\"]),\n  borderBottomRadius: t.radii([\n    \"borderBottomLeftRadius\",\n    \"borderBottomRightRadius\",\n  ]),\n  borderLeftRadius: t.radii([\"borderTopLeftRadius\", \"borderBottomLeftRadius\"]),\n  borderRightRadius: t.radii([\n    \"borderTopRightRadius\",\n    \"borderBottomRightRadius\",\n  ]),\n}\n\nObject.assign(config, {\n  rounded: config.borderRadius,\n  roundedTop: config.borderTopRadius,\n  roundedTopLeft: config.borderTopLeftRadius,\n  roundedTopRight: config.borderTopRightRadius,\n  roundedTopStart: config.borderStartStartRadius,\n  roundedTopEnd: config.borderStartEndRadius,\n  roundedBottom: config.borderBottomRadius,\n  roundedBottomLeft: config.borderBottomLeftRadius,\n  roundedBottomRight: config.borderBottomRightRadius,\n  roundedBottomStart: config.borderEndStartRadius,\n  roundedBottomEnd: config.borderEndEndRadius,\n  roundedLeft: config.borderLeftRadius,\n  roundedRight: config.borderRightRadius,\n  roundedStart: config.borderInlineStartRadius,\n  roundedEnd: config.borderInlineEndRadius,\n  borderStart: config.borderInlineStart,\n  borderEnd: config.borderInlineEnd,\n  borderTopStartRadius: config.borderStartStartRadius,\n  borderTopEndRadius: config.borderStartEndRadius,\n  borderBottomStartRadius: config.borderEndStartRadius,\n  borderBottomEndRadius: config.borderEndEndRadius,\n  borderStartRadius: config.borderInlineStartRadius,\n  borderEndRadius: config.borderInlineEndRadius,\n  borderStartWidth: config.borderInlineStartWidth,\n  borderEndWidth: config.borderInlineEndWidth,\n  borderStartColor: config.borderInlineStartColor,\n  borderEndColor: config.borderInlineEndColor,\n  borderStartStyle: config.borderInlineStartStyle,\n  borderEndStyle: config.borderInlineEndStyle,\n})\n\n/**\n * The prop types for border properties listed above\n */\nexport interface BorderProps {\n  /**\n   * The CSS `border` property\n   */\n  border?: Token<CSS.Property.Border | number, \"borders\">\n  /**\n   * The CSS `border-width` property\n   */\n  borderWidth?: Token<CSS.Property.BorderWidth | number>\n  /**\n   * The CSS `border-style` property\n   */\n  borderStyle?: Token<CSS.Property.BorderStyle>\n  /**\n   * The CSS `border-color` property\n   */\n  borderColor?: Token<CSS.Property.BorderTopColor, \"colors\">\n  /**\n   * The CSS `border-radius` property\n   */\n  borderRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-radius` property\n   */\n  rounded?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-top` property\n   */\n  borderTop?: Token<CSS.Property.BorderTop, \"borders\">\n  borderBlockStart?: Token<CSS.Property.BorderBlockStart | number>\n  /**\n   * The CSS `border-top-width` property\n   */\n  borderTopWidth?: Token<CSS.Property.BorderWidth | number>\n  borderBlockStartWidth?: Token<CSS.Property.BorderBlockStartWidth | number>\n  /**\n   * The CSS `border-bottom-width` property\n   */\n  borderBottomWidth?: Token<CSS.Property.BorderWidth | number>\n  borderBlockEndWidth?: Token<CSS.Property.BorderBlockEndWidth | number>\n  /**\n   * The CSS `border-left-width` property\n   */\n  borderLeftWidth?: Token<CSS.Property.BorderWidth | number>\n  borderStartWidth?: Token<CSS.Property.BorderWidth | number>\n  borderInlineStartWidth?: Token<CSS.Property.BorderInlineStartWidth | number>\n  /**\n   * The CSS `border-right-width` property\n   */\n  borderRightWidth?: Token<CSS.Property.BorderWidth | number>\n  borderEndWidth?: Token<CSS.Property.BorderWidth | number>\n  borderInlineEndWidth?: Token<CSS.Property.BorderInlineEndWidth | number>\n  /**\n   * The CSS `border-top-style` property\n   */\n  borderTopStyle?: Token<CSS.Property.BorderTopStyle>\n  borderBlockStartStyle?: Token<CSS.Property.BorderBlockStartStyle>\n  /**\n   * The CSS `border-bottom-style` property\n   */\n  borderBottomStyle?: Token<CSS.Property.BorderBottomStyle>\n  borderBlockEndStyle?: Token<CSS.Property.BorderBlockEndStyle>\n  /**\n   * The CSS `border-left-style` property\n   */\n  borderLeftStyle?: Token<CSS.Property.BorderLeftStyle>\n  borderStartStyle?: Token<CSS.Property.BorderInlineStartStyle>\n  borderInlineStartStyle?: Token<CSS.Property.BorderInlineStartStyle>\n  /**\n   * The CSS `border-right-styles` property\n   */\n  borderRightStyle?: Token<CSS.Property.BorderRightStyle>\n  borderEndStyle?: Token<CSS.Property.BorderInlineEndStyle>\n  borderInlineEndStyle?: Token<CSS.Property.BorderInlineEndStyle>\n  /**\n   * The CSS `border-top-color` property\n   */\n  borderTopColor?: Token<CSS.Property.BorderTopColor, \"colors\">\n  borderBlockStartColor?: Token<CSS.Property.BorderBlockStartColor, \"colors\">\n  /**\n   * The CSS `border-bottom-color` property\n   */\n  borderBottomColor?: Token<CSS.Property.BorderBottomColor, \"colors\">\n  borderBlockEndColor?: Token<CSS.Property.BorderBlockEndColor, \"colors\">\n  /**\n   * The CSS `border-left-color` property\n   */\n  borderLeftColor?: Token<CSS.Property.BorderLeftColor, \"colors\">\n  borderStartColor?: Token<CSS.Property.BorderInlineStartColor>\n  borderInlineStartColor?: Token<CSS.Property.BorderInlineStartColor, \"colors\">\n  /**\n   * The CSS `border-right-color` property\n   */\n  borderRightColor?: Token<CSS.Property.BorderRightColor, \"colors\">\n  borderEndColor?: Token<CSS.Property.BorderInlineEndColor>\n  borderInlineEndColor?: Token<CSS.Property.BorderInlineEndColor, \"colors\">\n  /**\n   * The CSS `border-right` property\n   */\n  borderRight?: Token<CSS.Property.BorderRight | number, \"borders\">\n\n  borderEnd?: Token<CSS.Property.BorderInlineStart | number>\n  borderInlineEnd?: Token<CSS.Property.BorderInlineEnd | number>\n  /**\n   * The CSS `border-bottom` property\n   */\n  borderBottom?: Token<CSS.Property.BorderBottom | number, \"borders\">\n\n  borderBlockEnd?: Token<CSS.Property.BorderBlockEnd | number>\n  /**\n   * The CSS `border-left` property\n   */\n  borderLeft?: Token<CSS.Property.BorderLeft | number, \"borders\">\n  borderStart?: Token<CSS.Property.BorderInlineStart | number>\n  borderInlineStart?: Token<CSS.Property.BorderInlineStart | number>\n  /**\n   * The CSS `border-top-radius` property\n   */\n  borderTopRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-top-radius` property\n   */\n  roundedTop?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-right-radius` property\n   */\n  borderRightRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-right-radius` property\n   */\n  roundedRight?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * When direction is `ltr`, `roundedEnd` is equivalent to `borderRightRadius`.\n   * When direction is `rtl`, `roundedEnd` is equivalent to `borderLeftRadius`.\n   */\n  roundedEnd?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * When direction is `ltr`, `borderInlineEndRadius` is equivalent to `borderRightRadius`.\n   * When direction is `rtl`, `borderInlineEndRadius` is equivalent to `borderLeftRadius`.\n   */\n  borderInlineEndRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * When direction is `ltr`, `borderEndRadius` is equivalent to `borderRightRadius`.\n   * When direction is `rtl`, `borderEndRadius` is equivalent to `borderLeftRadius`.\n   */\n  borderEndRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-bottom-radius` property\n   */\n  borderBottomRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-bottom-radius` property\n   */\n  roundedBottom?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-left-radius` property\n   */\n  borderLeftRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-left-radius` property\n   */\n  roundedLeft?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * When direction is `ltr`, `roundedEnd` is equivalent to `borderRightRadius`.\n   * When direction is `rtl`, `roundedEnd` is equivalent to `borderLeftRadius`.\n   */\n  roundedStart?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * When direction is `ltr`, `borderInlineStartRadius` is equivalent to `borderLeftRadius`.\n   * When direction is `rtl`, `borderInlineStartRadius` is equivalent to `borderRightRadius`.\n   */\n  borderInlineStartRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * When direction is `ltr`, `borderStartRadius` is equivalent to `borderLeftRadius`.\n   * When direction is `rtl`, `borderStartRadius` is equivalent to `borderRightRadius`.\n   */\n  borderStartRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-top-left-radius` property\n   */\n  borderTopLeftRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  borderTopStartRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  borderStartStartRadius?: Token<\n    CSS.Property.BorderStartStartRadius | number,\n    \"radii\"\n  >\n  /**\n   * The CSS `border-top-left-radius` property\n   */\n  roundedTopLeft?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  roundedTopStart?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-top-right-radius` property\n   */\n  borderTopRightRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  borderTopEndRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  borderStartEndRadius?: Token<\n    CSS.Property.BorderStartEndRadius | number,\n    \"radii\"\n  >\n  /**\n   * The CSS `border-top-right-radius` property\n   */\n  roundedTopRight?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  roundedTopEnd?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-bottom-left-radius` property\n   */\n  borderBottomLeftRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  borderBottomStartRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  borderEndStartRadius?: Token<\n    CSS.Property.BorderEndStartRadius | number,\n    \"radii\"\n  >\n  /**\n   * The CSS `border-bottom-left-radius` property\n   */\n  roundedBottomLeft?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  roundedBottomStart?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-bottom-right-radius` property\n   */\n  borderBottomRightRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  borderBottomEndRadius?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  borderEndEndRadius?: Token<CSS.Property.BorderEndEndRadius | number, \"radii\">\n  /**\n   * The CSS `border-bottom-right-radius` property\n   */\n  roundedBottomRight?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  roundedBottomEnd?: Token<CSS.Property.BorderRadius | number, \"radii\">\n  /**\n   * The CSS `border-right` and `border-left` property\n   */\n  borderX?: Token<CSS.Property.Border | number, \"borders\">\n  borderInline?: Token<CSS.Property.BorderInline | number>\n  /**\n   * The CSS `border-top` and `border-bottom` property\n   */\n  borderY?: Token<CSS.Property.Border | number, \"borders\">\n  borderBlock?: Token<CSS.Property.BorderBlock | number>\n}\n\nexport const border = system(config)\nexport const borderParser = createParser(config)\n"]},"metadata":{},"sourceType":"module"}