{"ast":null,"code":"import { useTheme } from \"@chakra-ui/system\";\nimport { memoizedGet as get, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useMediaQuery } from \"./use-media-query\";\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\n\nvar Visibility = props => {\n  var {\n    breakpoint,\n    hide,\n    children\n  } = props;\n  var [show] = useMediaQuery(breakpoint);\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nexport var Hide = props => {\n  var {\n    children\n  } = props;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nexport var Show = props => {\n  var {\n    children\n  } = props;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = (theme, value) => get(theme, \"breakpoints.\" + value, value);\n\nexport function useQuery(props) {\n  var {\n    breakpoint = \"\",\n    below,\n    above\n  } = props;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}","map":{"version":3,"sources":["../../src/media-query.tsx"],"names":["memoizedGet","Visibility","props","children","useMediaQuery","isVisible","hide","rendered","Hide","query","useQuery","Show","getBreakpoint","get","breakpoint","above","theme","useTheme","bpBelow","bpAbove"],"mappings":"AAAA,SAAA,QAAA,QAAA,mBAAA;AACA,SAAeA,WAAW,IAA1B,GAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,QAAA,mBAAA;AAQA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,UAAqC,GAAIC,KAAD,IAAW;EACvD,IAAM;IAAA,UAAA;IAAA,IAAA;IAAoBC;EAApB,IAAN,KAAA;EACA,IAAM,CAAA,IAAA,IAASC,aAAa,CAA5B,UAA4B,CAA5B;EACA,IAAMC,SAAS,GAAGC,IAAI,GAAG,CAAH,IAAA,GAAtB,IAAA;EAEA,IAAMC,QAAQ,GAAGF,SAAS,GAAA,QAAA,GAA1B,IAAA;EACA,OAAA,QAAA;AANF,CAAA;;AAWA,OAAO,IAAMG,IAAyB,GAAIN,KAAD,IAAW;EAClD,IAAM;IAAEC;EAAF,IAAN,KAAA;EACA,IAAMM,KAAK,GAAGC,QAAQ,CAAtB,KAAsB,CAAtB;EACA,OAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;IAAY,UAAU,EAAtB,KAAA;IAA+B,IAAI,EAAA;EAAnC,CAAA,EADF,QACE,CADF;AAHK,CAAA;;AAUP,IAAA,OAAA,EAAa;EACXF,IAAI,CAAJA,WAAAA,GAAAA,MAAAA;AACD;;AASD,OAAO,IAAMG,IAAyB,GAAIT,KAAD,IAAW;EAClD,IAAM;IAAEC;EAAF,IAAN,KAAA;EACA,IAAMM,KAAK,GAAGC,QAAQ,CAAtB,KAAsB,CAAtB;EACA,OAAA,aAAO,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;IAAY,UAAU,EAAED;EAAxB,CAAA,EAAP,QAAO,CAAP;AAHK,CAAA;;AAMP,IAAA,OAAA,EAAa;EACXE,IAAI,CAAJA,WAAAA,GAAAA,MAAAA;AACD;;AAED,IAAMC,aAAa,GAAG,CAAA,KAAA,EAAA,KAAA,KACpBC,GAAG,CAAA,KAAA,EAAA,iBAAA,KAAA,EADL,KACK,CADL;;AASA,OAAO,SAAA,QAAA,CAAA,KAAA,EAAwC;EAC7C,IAAM;IAAEC,UAAU,GAAZ,EAAA;IAAA,KAAA;IAA0BC;EAA1B,IAAN,KAAA;EAEA,IAAMC,KAAK,GAAGC,QAAd,EAAA;EACA,IAAMC,OAAO,GAAGN,aAAa,CAAA,KAAA,EAA7B,KAA6B,CAA7B;EACA,IAAMO,OAAO,GAAGP,aAAa,CAAA,KAAA,EAA7B,KAA6B,CAA7B;EAEA,IAAIH,KAAK,GAAT,UAAA;;EAEA,IAAA,OAAA,EAAa;IACXA,KAAK,GAAA,iBAAA,OAAA,GAALA,GAAAA;EADF,CAAA,MAEO,IAAA,OAAA,EAAa;IAClBA,KAAK,GAAA,iBAAA,OAAA,GAALA,GAAAA;EACD;;EAED,OAAA,KAAA;AACD","sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { Dict, memoizedGet as get, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useMediaQuery } from \"./use-media-query\"\n\ninterface VisibilityProps {\n  breakpoint: string\n  hide?: boolean\n  children: React.ReactNode\n}\n\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\nconst Visibility: React.FC<VisibilityProps> = (props) => {\n  const { breakpoint, hide, children } = props\n  const [show] = useMediaQuery(breakpoint)\n  const isVisible = hide ? !show : show\n\n  const rendered = isVisible ? children : null\n  return rendered as React.ReactElement\n}\n\nexport type HideProps = ShowProps\n\nexport const Hide: React.FC<HideProps> = (props) => {\n  const { children } = props\n  const query = useQuery(props)\n  return (\n    <Visibility breakpoint={query} hide>\n      {children}\n    </Visibility>\n  )\n}\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\"\n}\n\nexport interface ShowProps {\n  breakpoint?: string\n  below?: string\n  above?: string\n  children?: React.ReactNode\n}\n\nexport const Show: React.FC<ShowProps> = (props) => {\n  const { children } = props\n  const query = useQuery(props)\n  return <Visibility breakpoint={query}>{children}</Visibility>\n}\n\nif (__DEV__) {\n  Show.displayName = \"Show\"\n}\n\nconst getBreakpoint = (theme: Dict, value: any) =>\n  get(theme, `breakpoints.${value}`, value)\n\nexport interface UseQueryProps {\n  breakpoint?: string\n  below?: string\n  above?: string\n}\n\nexport function useQuery(props: UseQueryProps) {\n  const { breakpoint = \"\", below, above } = props\n\n  const theme = useTheme()\n  const bpBelow = getBreakpoint(theme, below)\n  const bpAbove = getBreakpoint(theme, above)\n\n  let query = breakpoint\n\n  if (bpBelow) {\n    query = `(max-width: ${bpBelow})`\n  } else if (bpAbove) {\n    query = `(min-width: ${bpAbove})`\n  }\n\n  return query\n}\n"]},"metadata":{},"sourceType":"module"}