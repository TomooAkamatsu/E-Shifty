{"ast":null,"code":"import { createParser, system } from \"../core\";\nimport { t } from \"../utils\";\nvar config = {\n  margin: t.spaceT(\"margin\"),\n  marginTop: t.spaceT(\"marginTop\"),\n  marginBlockStart: t.spaceT(\"marginBlockStart\"),\n  marginRight: t.spaceT(\"marginRight\"),\n  marginInlineEnd: t.spaceT(\"marginInlineEnd\"),\n  marginBottom: t.spaceT(\"marginBottom\"),\n  marginBlockEnd: t.spaceT(\"marginBlockEnd\"),\n  marginLeft: t.spaceT(\"marginLeft\"),\n  marginInlineStart: t.spaceT(\"marginInlineStart\"),\n  marginX: t.spaceT([\"marginLeft\", \"marginRight\"]),\n  marginInline: t.spaceT(\"marginInline\"),\n  marginY: t.spaceT([\"marginTop\", \"marginBottom\"]),\n  marginBlock: t.spaceT(\"marginBlock\"),\n  padding: t.space(\"padding\"),\n  paddingTop: t.space(\"paddingTop\"),\n  paddingBlockStart: t.space(\"paddingBlockStart\"),\n  paddingRight: t.space(\"paddingRight\"),\n  paddingBottom: t.space(\"paddingBottom\"),\n  paddingBlockEnd: t.space(\"paddingBlockEnd\"),\n  paddingLeft: t.space(\"paddingLeft\"),\n  paddingInlineStart: t.space(\"paddingInlineStart\"),\n  paddingInlineEnd: t.space(\"paddingInlineEnd\"),\n  paddingX: t.space([\"paddingLeft\", \"paddingRight\"]),\n  paddingInline: t.space(\"paddingInline\"),\n  paddingY: t.space([\"paddingTop\", \"paddingBottom\"]),\n  paddingBlock: t.space(\"paddingBlock\")\n};\nObject.assign(config, {\n  m: config.margin,\n  mt: config.marginTop,\n  mr: config.marginRight,\n  me: config.marginInlineEnd,\n  marginEnd: config.marginInlineEnd,\n  mb: config.marginBottom,\n  ml: config.marginLeft,\n  ms: config.marginInlineStart,\n  marginStart: config.marginInlineStart,\n  mx: config.marginX,\n  my: config.marginY,\n  p: config.padding,\n  pt: config.paddingTop,\n  py: config.paddingY,\n  px: config.paddingX,\n  pb: config.paddingBottom,\n  pl: config.paddingLeft,\n  ps: config.paddingInlineStart,\n  paddingStart: config.paddingInlineStart,\n  pr: config.paddingRight,\n  pe: config.paddingInlineEnd,\n  paddingEnd: config.paddingInlineEnd\n});\n/**\n * Types for space related CSS properties\n */\n\n/**\n * Converts shorthand or longhand margin and padding props to margin and padding CSS declarations\n *\n * - Numbers from 0-4 (or the length of theme.space) are converted to values on the spacing scale.\n * - Negative values can be used for negative margins.\n * - Numbers greater than the length of the theme.space array are converted to raw pixel values.\n * - String values are passed as raw CSS values.\n * - Array values are converted into responsive values.\n */\n\nexport var space = system(config);\nexport var spaceParser = createParser(config);","map":{"version":3,"sources":["../../../src/config/space.ts"],"names":["config","margin","t","marginTop","marginBlockStart","marginRight","marginInlineEnd","marginBottom","marginBlockEnd","marginLeft","marginInlineStart","marginX","marginInline","marginY","marginBlock","padding","paddingTop","paddingBlockStart","paddingRight","paddingBottom","paddingBlockEnd","paddingLeft","paddingInlineStart","paddingInlineEnd","paddingX","paddingInline","paddingY","paddingBlock","Object","m","mt","mr","me","marginEnd","mb","ml","ms","marginStart","mx","my","p","pt","py","px","pb","pl","ps","paddingStart","pr","pe","paddingEnd","space","system","spaceParser","createParser"],"mappings":"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","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config, createParser, system } from \"../core\"\nimport { Token, t } from \"../utils\"\n\nconst config: Config = {\n  margin: t.spaceT(\"margin\"),\n  marginTop: t.spaceT(\"marginTop\"),\n  marginBlockStart: t.spaceT(\"marginBlockStart\"),\n  marginRight: t.spaceT(\"marginRight\"),\n  marginInlineEnd: t.spaceT(\"marginInlineEnd\"),\n  marginBottom: t.spaceT(\"marginBottom\"),\n  marginBlockEnd: t.spaceT(\"marginBlockEnd\"),\n  marginLeft: t.spaceT(\"marginLeft\"),\n  marginInlineStart: t.spaceT(\"marginInlineStart\"),\n  marginX: t.spaceT([\"marginLeft\", \"marginRight\"]),\n  marginInline: t.spaceT(\"marginInline\"),\n  marginY: t.spaceT([\"marginTop\", \"marginBottom\"]),\n  marginBlock: t.spaceT(\"marginBlock\"),\n  padding: t.space(\"padding\"),\n  paddingTop: t.space(\"paddingTop\"),\n  paddingBlockStart: t.space(\"paddingBlockStart\"),\n  paddingRight: t.space(\"paddingRight\"),\n  paddingBottom: t.space(\"paddingBottom\"),\n  paddingBlockEnd: t.space(\"paddingBlockEnd\"),\n  paddingLeft: t.space(\"paddingLeft\"),\n  paddingInlineStart: t.space(\"paddingInlineStart\"),\n  paddingInlineEnd: t.space(\"paddingInlineEnd\"),\n  paddingX: t.space([\"paddingLeft\", \"paddingRight\"]),\n  paddingInline: t.space(\"paddingInline\"),\n  paddingY: t.space([\"paddingTop\", \"paddingBottom\"]),\n  paddingBlock: t.space(\"paddingBlock\"),\n}\n\nObject.assign(config, {\n  m: config.margin,\n  mt: config.marginTop,\n  mr: config.marginRight,\n  me: config.marginInlineEnd,\n  marginEnd: config.marginInlineEnd,\n  mb: config.marginBottom,\n  ml: config.marginLeft,\n  ms: config.marginInlineStart,\n  marginStart: config.marginInlineStart,\n  mx: config.marginX,\n  my: config.marginY,\n  p: config.padding,\n  pt: config.paddingTop,\n  py: config.paddingY,\n  px: config.paddingX,\n  pb: config.paddingBottom,\n  pl: config.paddingLeft,\n  ps: config.paddingInlineStart,\n  paddingStart: config.paddingInlineStart,\n  pr: config.paddingRight,\n  pe: config.paddingInlineEnd,\n  paddingEnd: config.paddingInlineEnd,\n})\n\n/**\n * Types for space related CSS properties\n */\nexport interface SpaceProps {\n  /**\n   * Margin on top, left, bottom and right\n   */\n  m?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Margin on top, left, bottom and right\n   */\n  margin?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Margin on top\n   */\n  mt?: Token<CSS.Property.Margin | number, \"space\">\n  marginBlockStart?: Token<CSS.Property.MarginBlockStart | number, \"space\">\n  /**\n   * Margin on top\n   */\n  marginTop?: Token<CSS.Property.MarginTop | number, \"space\">\n  /**\n   * Margin on right\n   */\n  mr?: Token<CSS.Property.MarginRight | number, \"space\">\n  /**\n   * When direction is `ltr`, `marginInlineEnd` is equivalent to `marginRight`.\n   * When direction is `rtl`, `marginInlineEnd` is equivalent to `marginLeft`.\n   */\n  marginInlineEnd?: Token<CSS.Property.MarginInlineEnd | number, \"space\">\n  /**\n   * When direction is `ltr`, `marginEnd` is equivalent to `marginRight`.\n   * When direction is `rtl`, `marginEnd` is equivalent to `marginLeft`.\n   */\n  marginEnd?: Token<CSS.Property.MarginInlineEnd | number, \"space\">\n  /**\n   * When direction is `ltr`, `me` is equivalent to `marginRight`.\n   * When direction is `rtl`, `me` is equivalent to `marginLeft`.\n   */\n  me?: Token<CSS.Property.MarginInlineEnd | number, \"space\">\n  /**\n   * Margin on right\n   */\n  marginRight?: Token<CSS.Property.MarginRight | number, \"space\">\n  /**\n   * Margin on bottom\n   */\n  mb?: Token<CSS.Property.MarginBottom | number, \"space\">\n  marginBlockEnd?: Token<CSS.Property.MarginBlockEnd | number, \"space\">\n  /**\n   * Margin on bottom\n   */\n  marginBottom?: Token<CSS.Property.MarginBottom | number, \"space\">\n  /**\n   * Margin on left\n   */\n  ml?: Token<CSS.Property.MarginLeft | number, \"space\">\n  /**\n   * When direction is `ltr`, `marginInlineStart` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `marginInlineStart` is equivalent to `marginRight`.\n   */\n  marginInlineStart?: Token<CSS.Property.MarginInlineStart | number, \"space\">\n  /**\n   * When direction is `ltr`, `marginStart` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `marginStart` is equivalent to `marginRight`.\n   */\n  marginStart?: Token<CSS.Property.MarginInlineStart | number, \"space\">\n  /**\n   * When direction is `ltr`, `ms` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `ms` is equivalent to `marginRight`.\n   */\n  ms?: Token<CSS.Property.MarginInlineStart | number, \"space\">\n  /**\n   * Margin on left\n   */\n  marginLeft?: Token<CSS.Property.MarginLeft | number, \"space\">\n  /**\n   * Margin on left and right\n   */\n  mx?: Token<CSS.Property.Margin | number, \"space\">\n  marginInline?: Token<CSS.Property.MarginInline | number, \"space\">\n  /**\n   * Margin on left and right\n   */\n  marginX?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Margin on top and bottom\n   */\n  my?: Token<CSS.Property.Margin | number, \"space\">\n  marginBlock?: Token<CSS.Property.MarginBlock | number, \"space\">\n  /**\n   * Margin on top and bottom\n   */\n  marginY?: Token<CSS.Property.Margin | number, \"space\">\n  /**\n   * Padding on top, left, bottom and right\n   */\n  p?: Token<CSS.Property.Padding | number, \"space\">\n  /**\n   * Padding on top, left, bottom and right\n   */\n  padding?: Token<CSS.Property.Padding | number, \"space\">\n  /**\n   * Padding on top\n   */\n  pt?: Token<CSS.Property.PaddingTop | number, \"space\">\n  paddingBlockStart?: Token<CSS.Property.PaddingBlockStart | number, \"space\">\n  /**\n   * Padding on top\n   */\n  paddingTop?: Token<CSS.Property.PaddingTop | number, \"space\">\n  /**\n   * Padding on right\n   */\n  pr?: Token<CSS.Property.PaddingRight | number, \"space\">\n  /**\n   * When direction is `ltr`, `paddingInlineEnd` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `paddingInlineEnd` is equivalent to `paddingLeft`.\n   */\n  paddingInlineEnd?: Token<CSS.Property.PaddingInlineEnd | number, \"space\">\n  /**\n   * When direction is `ltr`, `paddingEnd` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `paddingEnd` is equivalent to `paddingLeft`.\n   */\n  paddingEnd?: Token<CSS.Property.PaddingInlineEnd | number, \"space\">\n  /**\n   * When direction is `ltr`, `pe` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `pe` is equivalent to `paddingLeft`.\n   */\n  pe?: Token<CSS.Property.PaddingInlineEnd | number, \"space\">\n  /**\n   * Padding on right\n   */\n  paddingRight?: Token<CSS.Property.PaddingRight | number, \"space\">\n  /**\n   * Padding on bottom\n   */\n  pb?: Token<CSS.Property.PaddingBottom | number, \"space\">\n  paddingBlockEnd?: Token<CSS.Property.PaddingBlockEnd | number, \"space\">\n  /**\n   * Padding on bottom\n   */\n  paddingBottom?: Token<CSS.Property.PaddingBottom | number, \"space\">\n  /**\n   * Padding on left\n   */\n  pl?: Token<CSS.Property.PaddingLeft | number, \"space\">\n  /**\n   * When direction is `ltr`, `paddingInlineStart` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `paddingInlineStart` is equivalent to `paddingRight`.\n   */\n  paddingInlineStart?: Token<CSS.Property.PaddingInlineStart | number, \"space\">\n  /**\n   * When direction is `ltr`, `paddingStart` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `paddingStart` is equivalent to `paddingRight`.\n   */\n  paddingStart?: Token<CSS.Property.PaddingInlineStart | number, \"space\">\n  /**\n   * When direction is `ltr`, `ps` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `ps` is equivalent to `paddingRight`.\n   */\n  ps?: Token<CSS.Property.PaddingInlineStart | number, \"space\">\n  /**\n   * Padding on left\n   */\n  paddingLeft?: Token<CSS.Property.PaddingLeft | number, \"space\">\n  /**\n   * Padding on left and right\n   */\n  px?: Token<CSS.Property.Padding | number, \"space\">\n  paddingInline?: Token<CSS.Property.PaddingInline | number, \"space\">\n  /**\n   * Padding on left and right\n   */\n  paddingX?: Token<CSS.Property.Padding | number, \"space\">\n  /**\n   * Padding on top and bottom\n   */\n  py?: Token<CSS.Property.Padding | number, \"space\">\n  paddingBlock?: Token<CSS.Property.PaddingBlock | number, \"space\">\n  /**\n   * Padding on top and bottom\n   */\n  paddingY?: Token<CSS.Property.Padding | number, \"space\">\n}\n\n/**\n * Converts shorthand or longhand margin and padding props to margin and padding CSS declarations\n *\n * - Numbers from 0-4 (or the length of theme.space) are converted to values on the spacing scale.\n * - Negative values can be used for negative margins.\n * - Numbers greater than the length of the theme.space array are converted to raw pixel values.\n * - String values are passed as raw CSS values.\n * - Array values are converted into responsive values.\n */\nexport const space = system(config)\nexport const spaceParser = createParser(config)\n"]},"metadata":{},"sourceType":"module"}