{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\";\nimport { useControllableState, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { callAllHandlers, createContext, getValidChildren, isUndefined, mergeRefs, normalizeEventKey } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * Its returned object will be passed unto a Context Provider\n * so all child components can read from it.\n * There is no document link yet\n * @see Docs https://chakra-ui.com/docs/components/useTabs\n */\n\nexport function useTabs(props) {\n  var {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    orientation = \"horizontal\"\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIndex\", \"onChange\", \"index\", \"isManual\", \"isLazy\", \"orientation\"]);\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n\n\n  var [focusedIndex, setFocusedIndex] = React.useState(defaultIndex != null ? defaultIndex : 0);\n  var [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex != null ? defaultIndex : 0,\n    value: index,\n    onChange\n  });\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n\n  React.useEffect(() => {\n    if (!isUndefined(index)) {\n      setFocusedIndex(index);\n    }\n  }, [index]);\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   *\n   * This manager is used to store only the tab nodes that are not disabled, and focusable.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\" and \"Tab 3\", since `Tab 2` is disabled\n   */\n\n  var enabledDomContext = useDescendants();\n  /**\n   * This manager is used to store all tab nodes whether disabled or not.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\", \"Tab 2\" \"Tab 3\".\n   *\n   * We need this for correct indexing of tabs in event a tab is disabled\n   */\n\n  var domContext = useDescendants();\n  /**\n   * generate a unique id or use user-provided id for\n   * the tabs widget\n   */\n\n  var id = useId(props.id, \"tabs\");\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    orientation,\n    enabledDomContext,\n    domContext,\n    htmlProps\n  };\n}\nvar [TabsProvider, useTabsContext] = createContext({\n  name: \"TabsContext\",\n  errorMessage: \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\"\n});\nexport { TabsProvider, useTabsContext };\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\n\nexport function useTabList(props) {\n  var {\n    setFocusedIndex,\n    focusedIndex,\n    orientation,\n    enabledDomContext\n  } = useTabsContext();\n  var count = enabledDomContext.descendants.length;\n  /**\n   * Function to update the selected tab index\n   */\n\n  var setIndex = React.useCallback(index => {\n    var tab = enabledDomContext.descendants[index];\n\n    if (tab != null && tab.element) {\n      tab.element.focus();\n      setFocusedIndex(index);\n    }\n  }, [enabledDomContext.descendants, setFocusedIndex]);\n  var onKeyDown = React.useCallback(event => {\n    var nextTab = () => setIndex((focusedIndex + 1) % count);\n\n    var prevTab = () => setIndex((focusedIndex - 1 + count) % count);\n\n    var firstTab = () => setIndex(0);\n\n    var lastTab = () => setIndex(count - 1);\n\n    var isHorizontal = orientation === \"horizontal\";\n    var isVertical = orientation === \"vertical\";\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowRight: () => isHorizontal && nextTab(),\n      ArrowLeft: () => isHorizontal && prevTab(),\n      ArrowDown: () => isVertical && nextTab(),\n      ArrowUp: () => isVertical && prevTab(),\n      Home: firstTab,\n      End: lastTab\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [count, focusedIndex, orientation, setIndex]);\n  return _extends({}, props, {\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\n\nexport function useTab(props) {\n  var {\n    isDisabled,\n    isFocusable\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"isDisabled\", \"isFocusable\"]);\n\n  var {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    enabledDomContext,\n    domContext,\n    selectedIndex\n  } = useTabsContext();\n  var ref = React.useRef(null);\n  /**\n   * Think of `useDescendant` as the function that registers tab node\n   * to the `enabledDomContext`, and returns its index.\n   *\n   * Tab is registered if it is enabled or focusable\n   */\n\n  var enabledIndex = useDescendant({\n    disabled: Boolean(isDisabled),\n    focusable: Boolean(isFocusable),\n    context: enabledDomContext,\n    element: ref.current\n  });\n  /**\n   * Registers all tabs (whether disabled or not)\n   */\n\n  var index = useDescendant({\n    context: domContext,\n    element: ref.current\n  });\n  var isSelected = index === selectedIndex;\n\n  var onClick = () => {\n    setFocusedIndex(enabledIndex);\n    setSelectedIndex(index);\n  };\n\n  var onFocus = () => {\n    var isDisabledButFocusable = isDisabled && isFocusable;\n    var shouldSelect = !isManual && !isDisabledButFocusable;\n\n    if (shouldSelect) {\n      setSelectedIndex(index);\n    }\n  };\n\n  var clickableProps = useClickable(_extends({}, htmlProps, {\n    ref: mergeRefs(ref, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick)\n  }));\n  var type = \"button\";\n  return _extends({}, clickableProps, {\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus)\n  });\n}\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of its children with\n * all functionality included.\n */\n\nexport function useTabPanels(props) {\n  var context = useTabsContext();\n  var {\n    id,\n    selectedIndex\n  } = context;\n  var validChildren = getValidChildren(props.children);\n  var children = validChildren.map((child, index) => /*#__PURE__*/React.cloneElement(child, {\n    isSelected: index === selectedIndex,\n    id: makeTabPanelId(id, index),\n\n    /**\n     * Refers to the associated tab element, and also provides an accessible name to the tab panel.\n     */\n    \"aria-labelledby\": makeTabId(id, index)\n  }));\n  return _extends({}, props, {\n    children\n  });\n}\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\n\nexport function useTabPanel(props) {\n  var {\n    isSelected,\n    id,\n    children\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"isSelected\", \"id\", \"children\"]);\n\n  var {\n    isLazy\n  } = useTabsContext();\n  return _extends({\n    /**\n     * Puts the tabpanel in the page `Tab` sequence.\n     */\n    tabIndex: 0\n  }, htmlProps, {\n    children: !isLazy || isSelected ? children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id\n  });\n}\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\n\nexport function useTabIndicator() {\n  var context = useTabsContext();\n  var {\n    selectedIndex,\n    orientation,\n    domContext\n  } = context;\n  var isHorizontal = orientation === \"horizontal\";\n  var isVertical = orientation === \"vertical\"; // Get the clientRect of the selected tab\n\n  var [rect, setRect] = React.useState(() => {\n    if (isHorizontal) return {\n      left: 0,\n      width: 0\n    };\n    if (isVertical) return {\n      top: 0,\n      height: 0\n    };\n    return undefined;\n  });\n  var [hasMeasured, setHasMeasured] = React.useState(false); // Update the selected tab rect when the selectedIndex changes\n\n  useSafeLayoutEffect(() => {\n    var _tab$element;\n\n    if (isUndefined(selectedIndex)) return undefined;\n    var tab = domContext.descendants[selectedIndex];\n    var tabRect = tab == null ? void 0 : (_tab$element = tab.element) == null ? void 0 : _tab$element.getBoundingClientRect(); // Horizontal Tab: Calculate width and left distance\n\n    if (isHorizontal && tabRect) {\n      var {\n        left,\n        width\n      } = tabRect;\n      setRect({\n        left,\n        width\n      });\n    } // Vertical Tab: Calculate height and top distance\n\n\n    if (isVertical && tabRect) {\n      var {\n        top,\n        height\n      } = tabRect;\n      setRect({\n        top,\n        height\n      });\n    } // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n\n\n    var id = requestAnimationFrame(() => {\n      setHasMeasured(true);\n    });\n    return () => {\n      if (id) {\n        cancelAnimationFrame(id);\n      }\n    };\n  }, [selectedIndex, isHorizontal, isVertical, domContext.descendants]);\n  return _extends({\n    position: \"absolute\",\n    transition: hasMeasured ? \"all 200ms cubic-bezier(0, 0, 0.2, 1)\" : \"none\"\n  }, rect);\n}\n\nfunction makeTabId(id, index) {\n  return id + \"--tab-\" + index;\n}\n\nfunction makeTabPanelId(id, index) {\n  return id + \"--tabpanel-\" + index;\n}","map":{"version":3,"sources":["../../src/use-tabs.ts"],"names":["orientation","htmlProps","React","defaultIndex","useControllableState","defaultValue","value","onChange","isUndefined","setFocusedIndex","enabledDomContext","useDescendants","domContext","id","useId","props","createContext","name","errorMessage","useTabsContext","count","setIndex","index","tab","onKeyDown","event","nextTab","focusedIndex","prevTab","firstTab","lastTab","isHorizontal","isVertical","eventKey","normalizeEventKey","keyMap","ArrowRight","ArrowLeft","ArrowDown","ArrowUp","Home","End","action","role","callAllHandlers","isFocusable","selectedIndex","ref","enabledIndex","useDescendant","disabled","Boolean","focusable","context","element","current","isSelected","onClick","setSelectedIndex","onFocus","isDisabledButFocusable","isDisabled","shouldSelect","clickableProps","useClickable","mergeRefs","type","makeTabId","tabIndex","makeTabPanelId","validChildren","getValidChildren","children","isLazy","hidden","left","width","top","height","useSafeLayoutEffect","tabRect","setRect","requestAnimationFrame","setHasMeasured","cancelAnimationFrame","position","transition","hasMeasured"],"mappings":"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","sourcesContent":["import { useClickable, UseClickableProps } from \"@chakra-ui/clickable\"\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useId,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  createContext,\n  Dict,\n  EventKeyMap,\n  getValidChildren,\n  isUndefined,\n  mergeRefs,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface UseTabsProps {\n  /**\n   * The orientation of the tab list.\n   */\n  orientation?: \"vertical\" | \"horizontal\"\n  /**\n   * If `true`, the tabs will be manually activated and\n   * display its panel by pressing Space or Enter.\n   *\n   * If `false`, the tabs will be automatically activated\n   * and their panel is displayed when they receive focus.\n   */\n  isManual?: boolean\n  /**\n   * Callback when the index (controlled or un-controlled) changes.\n   */\n  onChange?: (index: number) => void\n  /**\n   * The index of the selected tab (in controlled mode)\n   */\n  index?: number\n  /**\n   * The initial index of the selected tab (in uncontrolled mode)\n   */\n  defaultIndex?: number\n  /**\n   * The id of the tab\n   */\n  id?: string\n  /**\n   * Performance 🚀:\n   * If `true`, the TabPanel rendering will be deferred\n   * until it is open.\n   */\n  isLazy?: boolean\n}\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * Its returned object will be passed unto a Context Provider\n * so all child components can read from it.\n * There is no document link yet\n * @see Docs https://chakra-ui.com/docs/components/useTabs\n */\nexport function useTabs(props: UseTabsProps) {\n  const {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    orientation = \"horizontal\",\n    ...htmlProps\n  } = props\n\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n  const [focusedIndex, setFocusedIndex] = React.useState(defaultIndex ?? 0)\n\n  const [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex ?? 0,\n    value: index,\n    onChange,\n  })\n\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n  React.useEffect(() => {\n    if (!isUndefined(index)) {\n      setFocusedIndex(index)\n    }\n  }, [index])\n\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   *\n   * This manager is used to store only the tab nodes that are not disabled, and focusable.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\" and \"Tab 3\", since `Tab 2` is disabled\n   */\n  const enabledDomContext = useDescendants()\n\n  /**\n   * This manager is used to store all tab nodes whether disabled or not.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\", \"Tab 2\" \"Tab 3\".\n   *\n   * We need this for correct indexing of tabs in event a tab is disabled\n   */\n  const domContext = useDescendants()\n\n  /**\n   * generate a unique id or use user-provided id for\n   * the tabs widget\n   */\n  const id = useId(props.id, `tabs`)\n\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    orientation,\n    enabledDomContext,\n    domContext,\n    htmlProps,\n  }\n}\n\nexport type UseTabsReturn = Omit<ReturnType<typeof useTabs>, \"htmlProps\">\n\nconst [TabsProvider, useTabsContext] = createContext<UseTabsReturn>({\n  name: \"TabsContext\",\n  errorMessage:\n    \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\",\n})\n\nexport { TabsProvider, useTabsContext }\n\ntype Child = React.ReactElement<any>\n\nexport interface UseTabListProps {\n  children?: React.ReactNode\n  onKeyDown?: React.KeyboardEventHandler\n  ref?: React.Ref<any>\n}\n\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\nexport function useTabList<P extends UseTabListProps>(props: P) {\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    orientation,\n    enabledDomContext,\n  } = useTabsContext()\n\n  const count = enabledDomContext.descendants.length\n\n  /**\n   * Function to update the selected tab index\n   */\n  const setIndex = React.useCallback(\n    (index: number) => {\n      const tab = enabledDomContext.descendants[index]\n      if (tab?.element) {\n        tab.element.focus()\n        setFocusedIndex(index)\n      }\n    },\n    [enabledDomContext.descendants, setFocusedIndex],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const nextTab = () => setIndex((focusedIndex + 1) % count)\n      const prevTab = () => setIndex((focusedIndex - 1 + count) % count)\n      const firstTab = () => setIndex(0)\n      const lastTab = () => setIndex(count - 1)\n\n      const isHorizontal = orientation === \"horizontal\"\n      const isVertical = orientation === \"vertical\"\n\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        ArrowRight: () => isHorizontal && nextTab(),\n        ArrowLeft: () => isHorizontal && prevTab(),\n        ArrowDown: () => isVertical && nextTab(),\n        ArrowUp: () => isVertical && prevTab(),\n        Home: firstTab,\n        End: lastTab,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [count, focusedIndex, orientation, setIndex],\n  )\n\n  return {\n    ...props,\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport type UseTabListReturn = ReturnType<typeof useTabList>\n\nexport interface UseTabOptions {\n  id?: string\n  isSelected?: boolean\n  panelId?: string\n  /**\n   * If `true`, the `Tab` won't be toggleable\n   */\n  isDisabled?: boolean\n}\n\nexport interface UseTabProps\n  extends Omit<UseClickableProps, \"color\">,\n    UseTabOptions {}\n\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\nexport function useTab<P extends UseTabProps>(props: P) {\n  const { isDisabled, isFocusable, ...htmlProps } = props\n\n  const {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    enabledDomContext,\n    domContext,\n    selectedIndex,\n  } = useTabsContext()\n\n  const ref = React.useRef<HTMLElement>(null)\n\n  /**\n   * Think of `useDescendant` as the function that registers tab node\n   * to the `enabledDomContext`, and returns its index.\n   *\n   * Tab is registered if it is enabled or focusable\n   */\n  const enabledIndex = useDescendant({\n    disabled: Boolean(isDisabled),\n    focusable: Boolean(isFocusable),\n    context: enabledDomContext,\n    element: ref.current,\n  })\n\n  /**\n   * Registers all tabs (whether disabled or not)\n   */\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  const isSelected = index === selectedIndex\n\n  const onClick = () => {\n    setFocusedIndex(enabledIndex)\n    setSelectedIndex(index)\n  }\n\n  const onFocus = () => {\n    const isDisabledButFocusable = isDisabled && isFocusable\n    const shouldSelect = !isManual && !isDisabledButFocusable\n\n    if (shouldSelect) {\n      setSelectedIndex(index)\n    }\n  }\n\n  const clickableProps = useClickable({\n    ...htmlProps,\n    ref: mergeRefs(ref, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick),\n  })\n\n  const type: \"button\" | \"submit\" | \"reset\" = \"button\"\n\n  return {\n    ...clickableProps,\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus),\n  }\n}\n\nexport interface UseTabPanelsProps {\n  children?: React.ReactNode\n}\n\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of its children with\n * all functionality included.\n */\nexport function useTabPanels<P extends UseTabPanelsProps>(props: P) {\n  const context = useTabsContext()\n\n  const { id, selectedIndex } = context\n\n  const validChildren = getValidChildren(props.children)\n\n  const children = validChildren.map((child, index) =>\n    React.cloneElement(child as Child, {\n      isSelected: index === selectedIndex,\n      id: makeTabPanelId(id, index),\n      /**\n       * Refers to the associated tab element, and also provides an accessible name to the tab panel.\n       */\n      \"aria-labelledby\": makeTabId(id, index),\n    }),\n  )\n\n  return { ...props, children }\n}\n\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\nexport function useTabPanel(props: Dict) {\n  const { isSelected, id, children, ...htmlProps } = props\n  const { isLazy } = useTabsContext()\n\n  return {\n    /**\n     * Puts the tabpanel in the page `Tab` sequence.\n     */\n    tabIndex: 0,\n    ...htmlProps,\n    children: !isLazy || isSelected ? children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id,\n  }\n}\n\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\nexport function useTabIndicator(): React.CSSProperties {\n  const context = useTabsContext()\n\n  const { selectedIndex, orientation, domContext } = context\n\n  const isHorizontal = orientation === \"horizontal\"\n  const isVertical = orientation === \"vertical\"\n\n  // Get the clientRect of the selected tab\n  const [rect, setRect] = React.useState(() => {\n    if (isHorizontal) return { left: 0, width: 0 }\n    if (isVertical) return { top: 0, height: 0 }\n    return undefined\n  })\n\n  const [hasMeasured, setHasMeasured] = React.useState(false)\n\n  // Update the selected tab rect when the selectedIndex changes\n  useSafeLayoutEffect(() => {\n    if (isUndefined(selectedIndex)) return undefined\n\n    const tab = domContext.descendants[selectedIndex]\n    const tabRect = tab?.element?.getBoundingClientRect()\n\n    // Horizontal Tab: Calculate width and left distance\n    if (isHorizontal && tabRect) {\n      const { left, width } = tabRect\n      setRect({ left, width })\n    }\n\n    // Vertical Tab: Calculate height and top distance\n    if (isVertical && tabRect) {\n      const { top, height } = tabRect\n      setRect({ top, height })\n    }\n\n    // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n    const id = requestAnimationFrame(() => {\n      setHasMeasured(true)\n    })\n\n    return () => {\n      if (id) {\n        cancelAnimationFrame(id)\n      }\n    }\n  }, [selectedIndex, isHorizontal, isVertical, domContext.descendants])\n\n  return {\n    position: \"absolute\",\n    transition: hasMeasured ? \"all 200ms cubic-bezier(0, 0, 0.2, 1)\" : \"none\",\n    ...rect,\n  }\n}\n\nfunction makeTabId(id: string, index: number) {\n  return `${id}--tab-${index}`\n}\n\nfunction makeTabPanelId(id: string, index: number) {\n  return `${id}--tabpanel-${index}`\n}\n"]},"metadata":{},"sourceType":"module"}