{"ast":null,"code":"import { contains, focus, getActiveElement, isTabbable } from \"@chakra-ui/utils\";\nimport { useUpdateEffect } from \"./use-update-effect\";\n\nfunction preventReturnFocus(containerRef) {\n  var el = containerRef.current;\n  if (!el) return false;\n  var activeElement = getActiveElement(el);\n  if (!activeElement) return false;\n  if (contains(el, activeElement)) return false;\n  if (isTabbable(activeElement)) return true;\n  return false;\n}\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\n\n\nexport function useFocusOnHide(containerRef, options) {\n  var {\n    shouldFocus: shouldFocusProp,\n    visible,\n    focusRef\n  } = options;\n  var shouldFocus = shouldFocusProp && !visible;\n  useUpdateEffect(() => {\n    if (!shouldFocus) return;\n\n    if (preventReturnFocus(containerRef)) {\n      return;\n    }\n\n    var el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;\n\n    if (el) {\n      focus(el);\n    }\n  }, [shouldFocus, containerRef, focusRef]);\n}","map":{"version":3,"sources":["../../src/use-focus-on-hide.ts"],"names":["el","containerRef","activeElement","getActiveElement","contains","isTabbable","shouldFocus","focusRef","shouldFocusProp","useUpdateEffect","preventReturnFocus","focus"],"mappings":"AAAA,SAAA,QAAA,EAAA,KAAA,EAAA,gBAAA,EAAA,UAAA,QAAA,kBAAA;AAQA,SAAA,eAAA,QAAA,qBAAA;;AAQA,SAAA,kBAAA,CAAA,YAAA,EAAwE;EACtE,IAAMA,EAAE,GAAGC,YAAY,CAAvB,OAAA;EACA,IAAI,CAAJ,EAAA,EAAS,OAAA,KAAA;EAET,IAAMC,aAAa,GAAGC,gBAAgB,CAAtC,EAAsC,CAAtC;EAEA,IAAI,CAAJ,aAAA,EAAoB,OAAA,KAAA;EACpB,IAAIC,QAAQ,CAAA,EAAA,EAAZ,aAAY,CAAZ,EAAiC,OAAA,KAAA;EACjC,IAAIC,UAAU,CAAd,aAAc,CAAd,EAA+B,OAAA,IAAA;EAE/B,OAAA,KAAA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAAA,cAAA,CAAA,YAAA,EAAA,OAAA,EAGL;EACA,IAAM;IAAEC,WAAW,EAAb,eAAA;IAAA,OAAA;IAAyCC;EAAzC,IAAN,OAAA;EAEA,IAAMD,WAAW,GAAGE,eAAe,IAAI,CAAvC,OAAA;EAEAC,eAAe,CAAC,MAAM;IACpB,IAAI,CAAJ,WAAA,EAAkB;;IAElB,IAAIC,kBAAkB,CAAtB,YAAsB,CAAtB,EAAsC;MACpC;IACD;;IAED,IAAMV,EAAE,GAAG,CAAA,QAAQ,IAAR,IAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,CAAR,OAAA,KAAqBC,YAAY,CAA5C,OAAA;;IAEA,IAAA,EAAA,EAAQ;MACNU,KAAK,CAALA,EAAK,CAALA;IACD;EAXY,CAAA,EAYZ,CAAA,WAAA,EAAA,YAAA,EAZHF,QAYG,CAZY,CAAfA;AAaD","sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getActiveElement,\n  isTabbable,\n} from \"@chakra-ui/utils\"\nimport { RefObject } from \"react\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnHideOptions {\n  focusRef: RefObject<FocusableElement>\n  shouldFocus?: boolean\n  visible?: boolean\n}\n\nfunction preventReturnFocus(containerRef: React.RefObject<HTMLElement>) {\n  const el = containerRef.current\n  if (!el) return false\n\n  const activeElement = getActiveElement(el)\n\n  if (!activeElement) return false\n  if (contains(el, activeElement)) return false\n  if (isTabbable(activeElement)) return true\n\n  return false\n}\n\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\nexport function useFocusOnHide(\n  containerRef: RefObject<HTMLElement>,\n  options: UseFocusOnHideOptions,\n) {\n  const { shouldFocus: shouldFocusProp, visible, focusRef } = options\n\n  const shouldFocus = shouldFocusProp && !visible\n\n  useUpdateEffect(() => {\n    if (!shouldFocus) return\n\n    if (preventReturnFocus(containerRef)) {\n      return\n    }\n\n    const el = focusRef?.current || containerRef.current\n\n    if (el) {\n      focus(el)\n    }\n  }, [shouldFocus, containerRef, focusRef])\n}\n"]},"metadata":{},"sourceType":"module"}