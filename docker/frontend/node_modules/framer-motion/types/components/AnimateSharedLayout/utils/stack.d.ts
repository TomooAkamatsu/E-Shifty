import { AxisBox2D, Point2D } from "../../../types/geometry";
import { ResolvedValues, VisualElement } from "../../../render/types";
import { VisualState } from "../../../render/utils/state";
import { Transition } from "../../../types";
export interface Snapshot {
    isDragging?: boolean;
    cursorProgress?: Point2D;
    latestMotionValues: ResolvedValues;
    boundingBox?: AxisBox2D;
}
export declare type LeadAndFollow = [
    VisualElement | undefined,
    VisualElement | undefined
];
export interface LayoutStack {
    add(element: VisualElement): void;
    remove(element: VisualElement): void;
    getLead(): VisualElement | undefined;
    updateSnapshot(): void;
    clearSnapshot(): void;
    animate(element: VisualElement, crossfade: boolean): void;
    updateLeadAndFollow(): void;
}
export interface CrossfadeState {
    isCrossfading(): boolean;
    getValues(element: VisualElement): VisualState;
    crossfadeFromLead(transition?: Transition): void;
    crossfadeToLead(transition?: Transition, maintainFollowOpacity?: boolean): void;
    reset(): void;
    stopAnimation(): void;
}
export declare function createCrossfadeState(state: StackState, forceCrossfade?: boolean): CrossfadeState;
interface StackState {
    lead?: VisualElement;
    follow?: VisualElement;
    leadIsExiting: boolean;
}
export declare function layoutStack(): LayoutStack;
export {};
